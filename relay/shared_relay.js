/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 616:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$p": () => (/* binding */ parseCssFromFile),
/* harmony export */   "SU": () => (/* binding */ handleApiRequest),
/* harmony export */   "ar": () => (/* binding */ generateHTML),
/* harmony export */   "jU": () => (/* binding */ parsePageFromFile),
/* harmony export */   "mn": () => (/* binding */ getPagePath)
/* harmony export */ });
/* unused harmony export parsePageFromJson */
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];if (null != _i) {var _s,_e,_x,_r,_arr = [],_n = !0,_d = !1;try {if (_x = (_i = _i.call(arr)).next, 0 === i) {if (Object(_i) !== _i) return;_n = !1;} else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);} catch (err) {_d = !0, _e = err;} finally {try {if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;} finally {if (_d) throw _e;}}return _arr;}}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}










function handleApiRequest() {
  if (handleJavascript()) {
    return true;
  }

  if (handleProperties()) {
    return true;
  }

  return false;
}

function handleProperties() {
  var toSet = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)()["setProperties"];

  if (toSet == null) {
    return false;
  }

  var props = JSON.parse(toSet);
  var notifications = [];var _iterator = _createForOfIteratorHelper(

    props),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _step$value = _slicedToArray(_step.value, 2),key = _step$value[0],value = _step$value[1];
      var prevValue = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(key);

      if (prevValue === value) {
        continue;
      }

      (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.setProperty)(key, value);
      notifications.push("".concat(key, " changed from `").concat(prevValue, "` to `").concat(value, "`"));
    }} catch (err) {_iterator.e(err);} finally {_iterator.f();}

  if (notifications.length == 0) {
    notifications.push("No settings were modified.");
  }

  // We include the ' ' because otherwise the browser doesn't like an empty page
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(JSON.stringify(notifications));
  return true;
}

function handleJavascript() {
  var js = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)()["javascript"];

  if (js == null) {
    return false;
  }

  var returns = eval(js) || "";
  // We include the ' ' because otherwise the browser doesn't like an empty page
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(returns + (returns ? "" : " "));
  return true;
}

function validateComponents(components) {var _iterator2 = _createForOfIteratorHelper(
    components),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var _button$name;var component = _step2.value;
      var button = component;

      if (button.preference == null) {
        continue;
      }

      button.name = (_button$name = button.name) !== null && _button$name !== void 0 ? _button$name : button.preference;

      if (button.validate != null) {
        try {
          eval(button.validate);
        } catch (e) {
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Unable to load ".concat(button.name, "'s validator '").concat(button.validate, "'"));
          button.validate = null;
        }
      }

      if (button.default != undefined && typeof button.default != "string") {
        button.default = button.default + "";
      }

      if (button.default == null && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyHasDefault)(button.preference)) {
        button.default = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyDefaultValue)(button.preference);
      }

      if (button.value != undefined && typeof button.value != "string") {
        button.value = button.value + "";
      }

      if (button.default == null && button.type == "boolean") {
        button.default = "true";
      }

      if (button.type == "tags") {
        var tags = button;
        if (tags.allowDuplicateTags == null) {
          tags.allowDuplicateTags = true;
        }

        if (tags.tagsSeperator == null) {
          tags.tagsSeperator = ",";
        }

        if (button.placeholderText == null) {
          button.placeholderText = button.default ? button.default : "";
        }
      }

      if (button.value != null) {
        continue;
      }

      var val = void 0;

      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyExists)(button.preference)) {
        val = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(button.preference);
      } else if (button.default != null) {
        val = button.default;
      } else {
        if (button.type == "dropdown") {
          if (typeof button.dropdown[0] == "string") {
            val = button.dropdown[0];
          } else {
            val = button.dropdown[0].value;
          }
        } else if (button.type == "boolean") {
          val = "true";
        } else {
          val = "";
        }
      }

      button.value = val;
    }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}
}

function generateHTML(
pages,
extraHtml)
{
  pages = pages.filter((p) => p != null);var _iterator3 = _createForOfIteratorHelper(

    pages),_step3;try {for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {var _page$file;var page = _step3.value;
      page.file = (_page$file = page.file) !== null && _page$file !== void 0 ? _page$file : page.page;

      validateComponents(page.components);
    }} catch (err) {_iterator3.e(err);} finally {_iterator3.f();}

  var buffer = [];

  var cssFiles = [];

  if (extraHtml && extraHtml.cssFiles) {
    cssFiles.push.apply(cssFiles, _toConsumableArray(extraHtml.cssFiles));
  }

  buffer.push("<!DOCTYPE html>");
  buffer.push("<head>");

  cssFiles.forEach((s) => {
    buffer.push("<link rel=\"stylesheet\" src=\"".concat(s, "\">"));
  });

  buffer.push("<style>");
  buffer.push("".concat(__webpack_require__(171)));

  if (extraHtml && extraHtml.css) {
    buffer.push(extraHtml.css);
  }

  buffer.push("</style>");

  buffer.push("</head>");

  buffer.push('<div id="root"></div>');

  buffer.push("<script>");

  // add script that react calls when loaded to get kol data
  buffer.push("let getData = function(callback) {callback(".concat(
  JSON.stringify(pages), ")}"));


  // close notifications when they are clicked on
  buffer.push("document.onclick = (e) => {\n    if(e.target.classList.contains('notification')) e.target.remove();\n  }");



  buffer.push("</script>");

  // include react script
  buffer.push("<script src=\"".concat(
  __webpack_require__(832), "\"></script>"));


  return buffer.join("\n");
}

function getPagePath(file) {
  var fileName = file.includes("/") ?
  file :
  "relay/shared_relay/pages/" + file + ".json";

  if (!fileName.endsWith(".json") && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fileToBuffer)(fileName).length == 0) {
    fileName += ".json";
  }

  return fileName;
}

/**
 * Parses from relay/shared_relay/pages/ if no slashes are in the name, otherwise expects a valid json file
 */
function parsePageFromFile(file) {
  var data = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fileToBuffer)(getPagePath(file));

  return parsePageFromJson(file, data);
}

function parseCssFromFile(file) {
  var fileName = file.includes("/") ?
  file :
  "relay/shared_relay/pages/" + file + ".css";

  if (!fileName.endsWith(".css")) {
    fileName += ".css";
  }

  var data = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fileToBuffer)(fileName);

  if (data.length == 0) {
    return null;
  }

  return data;
}

function parsePageFromJson(id, jsonData) {
  if (jsonData.length == 0) {
    return null;
  }

  var subpage = JSON.parse(jsonData);

  subpage.file = id;

  for (var _i2 = 0, _arr2 = subpage.components; _i2 < _arr2.length; _i2++) {var _ref3;var button = _arr2[_i2];
    if (button.type != "dropdown") {
      continue;
    }

    var dropdown = button;

    if (dropdown.dropdown == null) {
      dropdown.dropdown = [];
    } else if (typeof dropdown.dropdown[0] == "string") {
      dropdown.dropdown = dropdown.dropdown.map(
      (s) => {
        return {
          display: s,
          value: s
        };
      });

    }

    if (dropdown.dropdownFiller == null) {
      continue;
    }

    var data =
    eval(dropdown.dropdownFiller).
    map((_ref) => {var _ref2 = _slicedToArray(_ref, 2),display = _ref2[0],value = _ref2[1];
      return {
        display: display,
        value: value
      };
    });

    (_ref3 = dropdown.dropdown).push.apply(_ref3, _toConsumableArray(data));
  }

  return subpage;
}

/***/ }),

/***/ 832:
/***/ ((module) => {

module.exports = "data:application/javascript;base64,ZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZTIoKSB7InVzZSBzdHJpY3QiOwovKiEgcmVnZW5lcmF0b3ItcnVudGltZSAtLSBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gLS0gbGljZW5zZSAoTUlUKTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9MSUNFTlNFICovX3JlZ2VuZXJhdG9yUnVudGltZTIgPSBmdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lMigpIHtyZXR1cm4gZXhwb3J0czt9O3ZhciBleHBvcnRzID0ge30sT3AgPSBPYmplY3QucHJvdG90eXBlLGhhc093biA9IE9wLmhhc093blByb3BlcnR5LGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykge29ialtrZXldID0gZGVzYy52YWx1ZTt9LCRTeW1ib2wgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSxpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgIkBAaXRlcmF0b3IiLGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgIkBAYXN5bmNJdGVyYXRvciIsdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8ICJAQHRvU3RyaW5nVGFnIjtmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSksIG9ialtrZXldO310cnkge2RlZmluZSh7fSwgIiIpO30gY2F0Y2ggKGVycikge2RlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtyZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTt9O31mdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7dmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3IsZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpLGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7cmV0dXJuIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgIl9pbnZva2UiLCB7IHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIH0pLCBnZW5lcmF0b3I7fWZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge3RyeSB7cmV0dXJuIHsgdHlwZTogIm5vcm1hbCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTt9IGNhdGNoIChlcnIpIHtyZXR1cm4geyB0eXBlOiAidGhyb3ciLCBhcmc6IGVyciB9O319ZXhwb3J0cy53cmFwID0gd3JhcDt2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O2Z1bmN0aW9uIEdlbmVyYXRvcigpIHt9ZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fWZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge312YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXM7fSk7dmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO05hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJiBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpICYmIChJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlKTt2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7ZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1sibmV4dCIsICJ0aHJvdyIsICJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uIChhcmcpIHtyZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTt9KTt9KTt9ZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7ZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHt2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtpZiAoInRocm93IiAhPT0gcmVjb3JkLnR5cGUpIHt2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZyx2YWx1ZSA9IHJlc3VsdC52YWx1ZTtyZXR1cm4gdmFsdWUgJiYgIm9iamVjdCIgPT0gdHlwZW9mIHZhbHVlICYmIGhhc093bi5jYWxsKHZhbHVlLCAiX19hd2FpdCIpID8gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge2ludm9rZSgibmV4dCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO30sIGZ1bmN0aW9uIChlcnIpIHtpbnZva2UoInRocm93IiwgZXJyLCByZXNvbHZlLCByZWplY3QpO30pIDogUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAodW53cmFwcGVkKSB7cmVzdWx0LnZhbHVlID0gdW53cmFwcGVkLCByZXNvbHZlKHJlc3VsdCk7fSwgZnVuY3Rpb24gKGVycm9yKSB7cmV0dXJuIGludm9rZSgidGhyb3ciLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTt9KTt9cmVqZWN0KHJlY29yZC5hcmcpO312YXIgcHJldmlvdXNQcm9taXNlO2RlZmluZVByb3BlcnR5KHRoaXMsICJfaW52b2tlIiwgeyB2YWx1ZTogZnVuY3Rpb24gdmFsdWUobWV0aG9kLCBhcmcpIHtmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtyZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7fSk7fXJldHVybiBwcmV2aW91c1Byb21pc2UgPSBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTt9IH0pO31mdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHt2YXIgc3RhdGUgPSAic3VzcGVuZGVkU3RhcnQiO3JldHVybiBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtpZiAoImV4ZWN1dGluZyIgPT09IHN0YXRlKSB0aHJvdyBuZXcgRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmciKTtpZiAoImNvbXBsZXRlZCIgPT09IHN0YXRlKSB7aWYgKCJ0aHJvdyIgPT09IG1ldGhvZCkgdGhyb3cgYXJnO3JldHVybiBkb25lUmVzdWx0KCk7fWZvciAoY29udGV4dC5tZXRob2QgPSBtZXRob2QsIGNvbnRleHQuYXJnID0gYXJnOzspIHt2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO2lmIChkZWxlZ2F0ZSkge3ZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO2lmIChkZWxlZ2F0ZVJlc3VsdCkge2lmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7cmV0dXJuIGRlbGVnYXRlUmVzdWx0O319aWYgKCJuZXh0IiA9PT0gY29udGV4dC5tZXRob2QpIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztlbHNlIGlmICgidGhyb3ciID09PSBjb250ZXh0Lm1ldGhvZCkge2lmICgic3VzcGVuZGVkU3RhcnQiID09PSBzdGF0ZSkgdGhyb3cgc3RhdGUgPSAiY29tcGxldGVkIiwgY29udGV4dC5hcmc7Y29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7fSBlbHNlICJyZXR1cm4iID09PSBjb250ZXh0Lm1ldGhvZCAmJiBjb250ZXh0LmFicnVwdCgicmV0dXJuIiwgY29udGV4dC5hcmcpO3N0YXRlID0gImV4ZWN1dGluZyI7dmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO2lmICgibm9ybWFsIiA9PT0gcmVjb3JkLnR5cGUpIHtpZiAoc3RhdGUgPSBjb250ZXh0LmRvbmUgPyAiY29tcGxldGVkIiA6ICJzdXNwZW5kZWRZaWVsZCIsIHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO3JldHVybiB7IHZhbHVlOiByZWNvcmQuYXJnLCBkb25lOiBjb250ZXh0LmRvbmUgfTt9InRocm93IiA9PT0gcmVjb3JkLnR5cGUgJiYgKHN0YXRlID0gImNvbXBsZXRlZCIsIGNvbnRleHQubWV0aG9kID0gInRocm93IiwgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnKTt9fTt9ZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge3ZhciBtZXRob2ROYW1lID0gY29udGV4dC5tZXRob2QsbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kTmFtZV07aWYgKHVuZGVmaW5lZCA9PT0gbWV0aG9kKSByZXR1cm4gY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsICJ0aHJvdyIgPT09IG1ldGhvZE5hbWUgJiYgZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuICYmIChjb250ZXh0Lm1ldGhvZCA9ICJyZXR1cm4iLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCksICJ0aHJvdyIgPT09IGNvbnRleHQubWV0aG9kKSB8fCAicmV0dXJuIiAhPT0gbWV0aG9kTmFtZSAmJiAoY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJyIgKyBtZXRob2ROYW1lICsgIicgbWV0aG9kIikpLCBDb250aW51ZVNlbnRpbmVsO3ZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7aWYgKCJ0aHJvdyIgPT09IHJlY29yZC50eXBlKSByZXR1cm4gY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcsIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsO3ZhciBpbmZvID0gcmVjb3JkLmFyZztyZXR1cm4gaW5mbyA/IGluZm8uZG9uZSA/IChjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZSwgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYywgInJldHVybiIgIT09IGNvbnRleHQubWV0aG9kICYmIChjb250ZXh0Lm1ldGhvZCA9ICJuZXh0IiwgY29udGV4dC5hcmcgPSB1bmRlZmluZWQpLCBjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgQ29udGludWVTZW50aW5lbCkgOiBpbmZvIDogKGNvbnRleHQubWV0aG9kID0gInRocm93IiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdCIpLCBjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgQ29udGludWVTZW50aW5lbCk7fWZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7dmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTsxIGluIGxvY3MgJiYgKGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXSksIDIgaW4gbG9jcyAmJiAoZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl0sIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXSksIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTt9ZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge3ZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O3JlY29yZC50eXBlID0gIm5vcm1hbCIsIGRlbGV0ZSByZWNvcmQuYXJnLCBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO31mdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7dGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiAicm9vdCIgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7fWZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge2lmIChpdGVyYWJsZSkge3ZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtpZiAoaXRlcmF0b3JNZXRob2QpIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgaXRlcmFibGUubmV4dCkgcmV0dXJuIGl0ZXJhYmxlO2lmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge3ZhciBpID0gLTEsbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7Zm9yICg7ICsraSA8IGl0ZXJhYmxlLmxlbmd0aDspIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHJldHVybiBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV0sIG5leHQuZG9uZSA9ICExLCBuZXh0O3JldHVybiBuZXh0LnZhbHVlID0gdW5kZWZpbmVkLCBuZXh0LmRvbmUgPSAhMCwgbmV4dDt9O3JldHVybiBuZXh0Lm5leHQgPSBuZXh0O319cmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O31mdW5jdGlvbiBkb25lUmVzdWx0KCkge3JldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6ICEwIH07fXJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lUHJvcGVydHkoR3AsICJjb25zdHJ1Y3RvciIsIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBjb25maWd1cmFibGU6ICEwIH0pLCBkZWZpbmVQcm9wZXJ0eShHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgImNvbnN0cnVjdG9yIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb24sIGNvbmZpZ3VyYWJsZTogITAgfSksIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvckZ1bmN0aW9uIiksIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uIChnZW5GdW4pIHt2YXIgY3RvciA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGdlbkZ1biAmJiBnZW5GdW4uY29uc3RydWN0b3I7cmV0dXJuICEhY3RvciAmJiAoY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgIkdlbmVyYXRvckZ1bmN0aW9uIiA9PT0gKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSk7fSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikge3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAoZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvckZ1bmN0aW9uIikpLCBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCksIGdlbkZ1bjt9LCBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24gKGFyZykge3JldHVybiB7IF9fYXdhaXQ6IGFyZyB9O30sIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSksIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge3JldHVybiB0aGlzO30pLCBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yLCBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24gKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge3ZvaWQgMCA9PT0gUHJvbWlzZUltcGwgJiYgKFByb21pc2VJbXBsID0gUHJvbWlzZSk7dmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcih3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSwgUHJvbWlzZUltcGwpO3JldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbikgPyBpdGVyIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7cmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7fSk7fSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKSwgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgIkdlbmVyYXRvciIpLCBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXM7fSksIGRlZmluZShHcCwgInRvU3RyaW5nIiwgZnVuY3Rpb24gKCkge3JldHVybiAiW29iamVjdCBHZW5lcmF0b3JdIjt9KSwgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24gKHZhbCkge3ZhciBvYmplY3QgPSBPYmplY3QodmFsKSxrZXlzID0gW107Zm9yICh2YXIga2V5IGluIG9iamVjdCkga2V5cy5wdXNoKGtleSk7cmV0dXJuIGtleXMucmV2ZXJzZSgpLCBmdW5jdGlvbiBuZXh0KCkge2ZvciAoOyBrZXlzLmxlbmd0aDspIHt2YXIga2V5ID0ga2V5cy5wb3AoKTtpZiAoa2V5IGluIG9iamVjdCkgcmV0dXJuIG5leHQudmFsdWUgPSBrZXksIG5leHQuZG9uZSA9ICExLCBuZXh0O31yZXR1cm4gbmV4dC5kb25lID0gITAsIG5leHQ7fTt9LCBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcywgQ29udGV4dC5wcm90b3R5cGUgPSB7IGNvbnN0cnVjdG9yOiBDb250ZXh0LCByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkge2lmICh0aGlzLnByZXYgPSAwLCB0aGlzLm5leHQgPSAwLCB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkLCB0aGlzLmRvbmUgPSAhMSwgdGhpcy5kZWxlZ2F0ZSA9IG51bGwsIHRoaXMubWV0aG9kID0gIm5leHQiLCB0aGlzLmFyZyA9IHVuZGVmaW5lZCwgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSksICFza2lwVGVtcFJlc2V0KSBmb3IgKHZhciBuYW1lIGluIHRoaXMpICJ0IiA9PT0gbmFtZS5jaGFyQXQoMCkgJiYgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiYgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSAmJiAodGhpc1tuYW1lXSA9IHVuZGVmaW5lZCk7fSwgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHt0aGlzLmRvbmUgPSAhMDt2YXIgcm9vdFJlY29yZCA9IHRoaXMudHJ5RW50cmllc1swXS5jb21wbGV0aW9uO2lmICgidGhyb3ciID09PSByb290UmVjb3JkLnR5cGUpIHRocm93IHJvb3RSZWNvcmQuYXJnO3JldHVybiB0aGlzLnJ2YWw7fSwgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uIGRpc3BhdGNoRXhjZXB0aW9uKGV4Y2VwdGlvbikge2lmICh0aGlzLmRvbmUpIHRocm93IGV4Y2VwdGlvbjt2YXIgY29udGV4dCA9IHRoaXM7ZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7cmV0dXJuIHJlY29yZC50eXBlID0gInRocm93IiwgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbiwgY29udGV4dC5uZXh0ID0gbG9jLCBjYXVnaHQgJiYgKGNvbnRleHQubWV0aG9kID0gIm5leHQiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCksICEhY2F1Z2h0O31mb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7dmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldLHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247aWYgKCJyb290IiA9PT0gZW50cnkudHJ5TG9jKSByZXR1cm4gaGFuZGxlKCJlbmQiKTtpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge3ZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCAiY2F0Y2hMb2MiKSxoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIik7aWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTt9IGVsc2UgaWYgKGhhc0NhdGNoKSB7aWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7fSBlbHNlIHtpZiAoIWhhc0ZpbmFsbHkpIHRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTtpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTt9fX19LCBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0eXBlLCBhcmcpIHtmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7dmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO2lmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmIGhhc093bi5jYWxsKGVudHJ5LCAiZmluYWxseUxvYyIpICYmIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHt2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7YnJlYWs7fX1maW5hbGx5RW50cnkgJiYgKCJicmVhayIgPT09IHR5cGUgfHwgImNvbnRpbnVlIiA9PT0gdHlwZSkgJiYgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiYgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jICYmIChmaW5hbGx5RW50cnkgPSBudWxsKTt2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtyZXR1cm4gcmVjb3JkLnR5cGUgPSB0eXBlLCByZWNvcmQuYXJnID0gYXJnLCBmaW5hbGx5RW50cnkgPyAodGhpcy5tZXRob2QgPSAibmV4dCIsIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jLCBDb250aW51ZVNlbnRpbmVsKSA6IHRoaXMuY29tcGxldGUocmVjb3JkKTt9LCBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUocmVjb3JkLCBhZnRlckxvYykge2lmICgidGhyb3ciID09PSByZWNvcmQudHlwZSkgdGhyb3cgcmVjb3JkLmFyZztyZXR1cm4gImJyZWFrIiA9PT0gcmVjb3JkLnR5cGUgfHwgImNvbnRpbnVlIiA9PT0gcmVjb3JkLnR5cGUgPyB0aGlzLm5leHQgPSByZWNvcmQuYXJnIDogInJldHVybiIgPT09IHJlY29yZC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZywgdGhpcy5tZXRob2QgPSAicmV0dXJuIiwgdGhpcy5uZXh0ID0gImVuZCIpIDogIm5vcm1hbCIgPT09IHJlY29yZC50eXBlICYmIGFmdGVyTG9jICYmICh0aGlzLm5leHQgPSBhZnRlckxvYyksIENvbnRpbnVlU2VudGluZWw7fSwgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykge2ZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHt2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07aWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHJldHVybiB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShlbnRyeSksIENvbnRpbnVlU2VudGluZWw7fX0sIGNhdGNoOiBmdW5jdGlvbiBfY2F0Y2godHJ5TG9jKSB7Zm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge3ZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHt2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHt2YXIgdGhyb3duID0gcmVjb3JkLmFyZztyZXNldFRyeUVudHJ5KGVudHJ5KTt9cmV0dXJuIHRocm93bjt9fXRocm93IG5ldyBFcnJvcigiaWxsZWdhbCBjYXRjaCBhdHRlbXB0Iik7fSwgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge3JldHVybiB0aGlzLmRlbGVnYXRlID0geyBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSwgbmV4dExvYzogbmV4dExvYyB9LCAibmV4dCIgPT09IHRoaXMubWV0aG9kICYmICh0aGlzLmFyZyA9IHVuZGVmaW5lZCksIENvbnRpbnVlU2VudGluZWw7fSB9LCBleHBvcnRzO31mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7dHJ5IHt2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7dmFyIHZhbHVlID0gaW5mby52YWx1ZTt9IGNhdGNoIChlcnJvcikge3JlamVjdChlcnJvcik7cmV0dXJuO31pZiAoaW5mby5kb25lKSB7cmVzb2x2ZSh2YWx1ZSk7fSBlbHNlIHtQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7fX1mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcjIoZm4pIHtyZXR1cm4gZnVuY3Rpb24gKCkge3ZhciBzZWxmID0gdGhpcyxhcmdzID0gYXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7dmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO2Z1bmN0aW9uIF9uZXh0KHZhbHVlKSB7YXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTt9ZnVuY3Rpb24gX3Rocm93KGVycikge2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTt9X25leHQodW5kZWZpbmVkKTt9KTt9O31mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkyKG9iaiwga2V5LCB2YWx1ZSkge2tleSA9IF90b1Byb3BlcnR5S2V5MihrZXkpO2lmIChrZXkgaW4gb2JqKSB7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTt9IGVsc2Uge29ialtrZXldID0gdmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7dmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO2lmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5MihkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO319ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzMihDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCAicHJvdG90eXBlIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7cmV0dXJuIENvbnN0cnVjdG9yO31mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleTIoYXJnKSB7dmFyIGtleSA9IF90b1ByaW1pdGl2ZTIoYXJnLCAic3RyaW5nIik7cmV0dXJuIHR5cGVvZiBrZXkgPT09ICJzeW1ib2wiID8ga2V5IDogU3RyaW5nKGtleSk7fWZ1bmN0aW9uIF90b1ByaW1pdGl2ZTIoaW5wdXQsIGhpbnQpIHtpZiAodHlwZW9mIGlucHV0ICE9PSAib2JqZWN0IiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O3ZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7dmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCAiZGVmYXVsdCIpO2lmICh0eXBlb2YgcmVzICE9PSAib2JqZWN0IikgcmV0dXJuIHJlczt0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpO31yZXR1cm4gKGhpbnQgPT09ICJzdHJpbmciID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjazIoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHt0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTt9fWZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge2lmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7dGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTt9c3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgInByb3RvdHlwZSIsIHsgd3JpdGFibGU6IGZhbHNlIH0pO2lmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO31mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge3ZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO3JldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHt2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCkscmVzdWx0O2lmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7dmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtyZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO30gZWxzZSB7cmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7fTt9ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge2lmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7cmV0dXJuIGNhbGw7fSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHt0aHJvdyBuZXcgVHlwZUVycm9yKCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZCIpO31yZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTt9ZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7aWYgKHNlbGYgPT09IHZvaWQgMCkge3Rocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7fXJldHVybiBzZWxmO31mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7dmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09ICJmdW5jdGlvbiIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7X3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzO2lmICh0eXBlb2YgQ2xhc3MgIT09ICJmdW5jdGlvbiIpIHt0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpO31pZiAodHlwZW9mIF9jYWNoZSAhPT0gInVuZGVmaW5lZCIpIHtpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTt9ZnVuY3Rpb24gV3JhcHBlcigpIHtyZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO31XcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO3JldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO307cmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO31mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7X2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0LmJpbmQoKTt9IGVsc2Uge19jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHt2YXIgYSA9IFtudWxsXTthLnB1c2guYXBwbHkoYSwgYXJncyk7dmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO3ZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO2lmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO3JldHVybiBpbnN0YW5jZTt9O31yZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO31mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge2lmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7aWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTt0cnkge0Jvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTtyZXR1cm4gdHJ1ZTt9IGNhdGNoIChlKSB7cmV0dXJuIGZhbHNlO319ZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtyZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZigiW25hdGl2ZSBjb2RlXSIpICE9PSAtMTt9ZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtvLl9fcHJvdG9fXyA9IHA7cmV0dXJuIG87fTtyZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO31mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge19nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge3JldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7fTtyZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO31mdW5jdGlvbiBfc2xpY2VkVG9BcnJheTIoYXJyLCBpKSB7cmV0dXJuIF9hcnJheVdpdGhIb2xlczIoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQyKGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5MihhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QyKCk7fWZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdDIoYXJyLCBpKSB7dmFyIF9pID0gbnVsbCA9PSBhcnIgPyBudWxsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbIkBAaXRlcmF0b3IiXTtpZiAobnVsbCAhPSBfaSkge3ZhciBfcyxfZSxfeCxfcixfYXJyID0gW10sX24gPSAhMCxfZCA9ICExO3RyeSB7aWYgKF94ID0gKF9pID0gX2kuY2FsbChhcnIpKS5uZXh0LCAwID09PSBpKSB7aWYgKE9iamVjdChfaSkgIT09IF9pKSByZXR1cm47X24gPSAhMTt9IGVsc2UgZm9yICg7ICEoX24gPSAoX3MgPSBfeC5jYWxsKF9pKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksIF9hcnIubGVuZ3RoICE9PSBpKTsgX24gPSAhMCk7fSBjYXRjaCAoZXJyKSB7X2QgPSAhMCwgX2UgPSBlcnI7fSBmaW5hbGx5IHt0cnkge2lmICghX24gJiYgbnVsbCAhPSBfaS5yZXR1cm4gJiYgKF9yID0gX2kucmV0dXJuKCksIE9iamVjdChfcikgIT09IF9yKSkgcmV0dXJuO30gZmluYWxseSB7aWYgKF9kKSB0aHJvdyBfZTt9fXJldHVybiBfYXJyO319ZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7cmV0dXJuIF9hcnJheVdpdGhIb2xlczIoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5MihhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheTIoYXJyKSB8fCBfbm9uSXRlcmFibGVSZXN0MigpO31mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0MigpIHt0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpO31mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMyKGFycikge2lmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7fWZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMihvLCBhbGxvd0FycmF5TGlrZSkge3ZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvWyJAQGl0ZXJhdG9yIl07aWYgKCFpdCkge2lmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheTIobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSAibnVtYmVyIikge2lmIChpdCkgbyA9IGl0O3ZhciBpID0gMDt2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTtyZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkge2lmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07cmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTt9LCBlOiBmdW5jdGlvbiBlKF9lNCkge3Rocm93IF9lNDt9LCBmOiBGIH07fXRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTt9dmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLGRpZEVyciA9IGZhbHNlLGVycjtyZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkge2l0ID0gaXQuY2FsbChvKTt9LCBuOiBmdW5jdGlvbiBuKCkge3ZhciBzdGVwID0gaXQubmV4dCgpO25vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7cmV0dXJuIHN0ZXA7fSwgZTogZnVuY3Rpb24gZShfZTUpIHtkaWRFcnIgPSB0cnVlO2VyciA9IF9lNTt9LCBmOiBmdW5jdGlvbiBmKCkge3RyeSB7aWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTt9IGZpbmFsbHkge2lmIChkaWRFcnIpIHRocm93IGVycjt9fSB9O31mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkyKGFycikge3JldHVybiBfYXJyYXlXaXRob3V0SG9sZXMyKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheTIoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkyKGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkMigpO31mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQyKCkge3Rocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpO31mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkyKG8sIG1pbkxlbikge2lmICghbykgcmV0dXJuO2lmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheTIobywgbWluTGVuKTt2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7aWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7aWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheTIobywgbWluTGVuKTt9ZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheTIoaXRlcikge2lmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyWyJAQGl0ZXJhdG9yIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7fWZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlczIoYXJyKSB7aWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5MihhcnIpO31mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheTIoYXJyLCBsZW4pIHtpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07cmV0dXJuIGFycjI7fShmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7aWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtlbHNlCiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkKICBkZWZpbmUoW10sIGZhY3RvcnkpO2Vsc2UKICB7CiAgICB2YXIgYSA9IGZhY3RvcnkoKTsKICAgIGZvciAodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07CiAgfQp9KShzZWxmLCAoKSA9PiB7CiAgcmV0dXJuICgvKioqKioqLygoKSA9PiB7Ly8gd2VicGFja0Jvb3RzdHJhcAogICAgICAvKioqKioqLyJ1c2Ugc3RyaWN0IjsKICAgICAgLyoqKioqKi92YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9IHsKCiAgICAgICAgLyoqKi84ODc6CiAgICAgICAgLyoqKi8oX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgogICAgICAgICAgLy8gRVhQT1JUUwogICAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKICAgICAgICAgICAgIloiOiAoKSA9PiAvKiBiaW5kaW5nICovcmVsYXlfQXBwCiAgICAgICAgICB9KTsKCiAgICAgICAgICA7IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL0ByZW1peC1ydW4vcm91dGVyL2Rpc3Qvcm91dGVyLmpzCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEByZW1peC1ydW4vcm91dGVyIHYxLjMuMAogICAgICAgICAgICoKICAgICAgICAgICAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLgogICAgICAgICAgICoKICAgICAgICAgICAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogICAgICAgICAgICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgogICAgICAgICAgICoKICAgICAgICAgICAqIEBsaWNlbnNlIE1JVAogICAgICAgICAgICovCiAgICAgICAgICBmdW5jdGlvbiBfZXh0ZW5kcygpIHsKICAgICAgICAgICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgewogICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgICAvLyNyZWdpb24gVHlwZXMgYW5kIENvbnN0YW50cwogICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLgogICAgICAgICAgICovCiAgICAgICAgICB2YXIgQWN0aW9uOwoKICAgICAgICAgIChmdW5jdGlvbiAoQWN0aW9uKSB7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoCiAgICAgICAgICAgICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlCiAgICAgICAgICAgICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLgogICAgICAgICAgICAgKgogICAgICAgICAgICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuCiAgICAgICAgICAgICAqLwogICAgICAgICAgICBBY3Rpb25bIlBvcCJdID0gIlBPUCI7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW4KICAgICAgICAgICAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudAogICAgICAgICAgICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC4KICAgICAgICAgICAgICovCgogICAgICAgICAgICBBY3Rpb25bIlB1c2giXSA9ICJQVVNIIjsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrCiAgICAgICAgICAgICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS4KICAgICAgICAgICAgICovCgogICAgICAgICAgICBBY3Rpb25bIlJlcGxhY2UiXSA9ICJSRVBMQUNFIjsKICAgICAgICAgIH0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTsKCiAgICAgICAgICB2YXIgUG9wU3RhdGVFdmVudFR5cGUgPSAicG9wc3RhdGUiOwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlCiAgICAgICAgICAgKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gcm91dGVyX2NyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykgewogICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgX29wdGlvbnMgPQoKCgogICAgICAgICAgICAgIG9wdGlvbnMsX29wdGlvbnMkaW5pdGlhbEVudHJpID0gX29wdGlvbnMuaW5pdGlhbEVudHJpZXMsaW5pdGlhbEVudHJpZXMgPSBfb3B0aW9ucyRpbml0aWFsRW50cmkgPT09IHZvaWQgMCA/IFsiLyJdIDogX29wdGlvbnMkaW5pdGlhbEVudHJpLGluaXRpYWxJbmRleCA9IF9vcHRpb25zLmluaXRpYWxJbmRleCxfb3B0aW9ucyR2NUNvbXBhdCA9IF9vcHRpb25zLnY1Q29tcGF0LHY1Q29tcGF0ID0gX29wdGlvbnMkdjVDb21wYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkdjVDb21wYXQ7CiAgICAgICAgICAgIHZhciBlbnRyaWVzOyAvLyBEZWNsYXJlIHNvIHdlIGNhbiBhY2Nlc3MgZnJvbSBjcmVhdGVNZW1vcnlMb2NhdGlvbgoKICAgICAgICAgICAgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcCgoZW50cnksIGluZGV4KSA9PiBjcmVhdGVNZW1vcnlMb2NhdGlvbihlbnRyeSwgdHlwZW9mIGVudHJ5ID09PSAic3RyaW5nIiA/IG51bGwgOiBlbnRyeS5zdGF0ZSwgaW5kZXggPT09IDAgPyAiZGVmYXVsdCIgOiB1bmRlZmluZWQpKTsKICAgICAgICAgICAgdmFyIGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7CiAgICAgICAgICAgIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wOwogICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBudWxsOwoKICAgICAgICAgICAgZnVuY3Rpb24gY2xhbXBJbmRleChuKSB7CiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIDApLCBlbnRyaWVzLmxlbmd0aCAtIDEpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkgewogICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBzdGF0ZSA9IG51bGw7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihlbnRyaWVzID8gZ2V0Q3VycmVudExvY2F0aW9uKCkucGF0aG5hbWUgOiAiLyIsIHRvLCBzdGF0ZSwga2V5KTsKICAgICAgICAgICAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAiLyIsICJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6ICIgKyBKU09OLnN0cmluZ2lmeSh0bykpOwogICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykgewogICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdG8gPT09ICJzdHJpbmciID8gdG8gOiByb3V0ZXJfY3JlYXRlUGF0aCh0byk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBoaXN0b3J5ID0gewogICAgICAgICAgICAgIGdldCBpbmRleCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDsKICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICBnZXQgYWN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbjsKICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICBnZXQgbG9jYXRpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7CiAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZiwKCiAgICAgICAgICAgICAgY3JlYXRlVVJMOiBmdW5jdGlvbiBjcmVhdGVVUkwodG8pIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVVJMKGNyZWF0ZUhyZWYodG8pLCAiaHR0cDovL2xvY2FsaG9zdCIpOwogICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgIGVuY29kZUxvY2F0aW9uOiBmdW5jdGlvbiBlbmNvZGVMb2NhdGlvbih0bykgewogICAgICAgICAgICAgICAgdmFyIHBhdGggPSB0eXBlb2YgdG8gPT09ICJzdHJpbmciID8gcGFyc2VQYXRoKHRvKSA6IHRvOwogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgIiIsCiAgICAgICAgICAgICAgICAgIHNlYXJjaDogcGF0aC5zZWFyY2ggfHwgIiIsCiAgICAgICAgICAgICAgICAgIGhhc2g6IHBhdGguaGFzaCB8fCAiIgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICBwdXNoOiBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkgewogICAgICAgICAgICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7CiAgICAgICAgICAgICAgICB2YXIgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTsKICAgICAgICAgICAgICAgIGluZGV4ICs9IDE7CiAgICAgICAgICAgICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7CgogICAgICAgICAgICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7CiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbiwKICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgIGRlbHRhOiAxCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgIHJlcGxhY2U6IGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7CiAgICAgICAgICAgICAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTsKICAgICAgICAgICAgICAgIHZhciBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpOwogICAgICAgICAgICAgICAgZW50cmllc1tpbmRleF0gPSBuZXh0TG9jYXRpb247CgogICAgICAgICAgICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7CiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKHsKICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbiwKICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgIGRlbHRhOiAwCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgIGdvOiBmdW5jdGlvbiBnbyhkZWx0YSkgewogICAgICAgICAgICAgICAgYWN0aW9uID0gQWN0aW9uLlBvcDsKICAgICAgICAgICAgICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpOwogICAgICAgICAgICAgICAgdmFyIG5leHRMb2NhdGlvbiA9IGVudHJpZXNbbmV4dEluZGV4XTsKICAgICAgICAgICAgICAgIGluZGV4ID0gbmV4dEluZGV4OwoKICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcikgewogICAgICAgICAgICAgICAgICBsaXN0ZW5lcih7CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICBkZWx0YTogZGVsdGEKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4oZm4pIHsKICAgICAgICAgICAgICAgIGxpc3RlbmVyID0gZm47CiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gewogICAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IG51bGw7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiBoaXN0b3J5OwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvcgogICAgICAgICAgICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3UKICAgICAgICAgICAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLgogICAgICAgICAgICoKICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnkKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHJvdXRlcl9jcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7CiAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBvcHRpb25zID0ge307CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHsKICAgICAgICAgICAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9CgoKCiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24scGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7CiAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKCIiLCB7CiAgICAgICAgICAgICAgICBwYXRobmFtZTogcGF0aG5hbWUsCiAgICAgICAgICAgICAgICBzZWFyY2g6IHNlYXJjaCwKICAgICAgICAgICAgICAgIGhhc2g6IGhhc2gKICAgICAgICAgICAgICB9LCAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXMKICAgICAgICAgICAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgImRlZmF1bHQiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlckhyZWYod2luZG93LCB0bykgewogICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdG8gPT09ICJzdHJpbmciID8gdG8gOiByb3V0ZXJfY3JlYXRlUGF0aCh0byk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBnZXRVcmxCYXNlZEhpc3RvcnkoY3JlYXRlQnJvd3NlckxvY2F0aW9uLCBjcmVhdGVCcm93c2VySHJlZiwgbnVsbCwgb3B0aW9ucyk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIEhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHdpbmRvdy5sb2NhdGlvbi5oYXNoLiBUaGlzIG1ha2VzIGl0IGlkZWFsCiAgICAgICAgICAgKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvcgogICAgICAgICAgICogc29tZSByZWFzb24sIGVpdGhlciBiZWNhdXNlIHlvdSBkbyBjYW5ub3QgY29uZmlndXJlIGl0IG9yIHRoZSBVUkwgc3BhY2UgaXMKICAgICAgICAgICAqIHJlc2VydmVkIGZvciBzb21ldGhpbmcgZWxzZS4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWhhc2hoaXN0b3J5CiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiByb3V0ZXJfY3JlYXRlSGFzaEhpc3Rvcnkob3B0aW9ucykgewogICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVIYXNoTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7CiAgICAgICAgICAgICAgdmFyIF9wYXJzZVBhdGggPQoKCgogICAgICAgICAgICAgICAgcGFyc2VQYXRoKHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cigxKSksX3BhcnNlUGF0aCRwYXRobmFtZSA9IF9wYXJzZVBhdGgucGF0aG5hbWUscGF0aG5hbWUgPSBfcGFyc2VQYXRoJHBhdGhuYW1lID09PSB2b2lkIDAgPyAiLyIgOiBfcGFyc2VQYXRoJHBhdGhuYW1lLF9wYXJzZVBhdGgkc2VhcmNoID0gX3BhcnNlUGF0aC5zZWFyY2gsc2VhcmNoID0gX3BhcnNlUGF0aCRzZWFyY2ggPT09IHZvaWQgMCA/ICIiIDogX3BhcnNlUGF0aCRzZWFyY2gsX3BhcnNlUGF0aCRoYXNoID0gX3BhcnNlUGF0aC5oYXNoLGhhc2ggPSBfcGFyc2VQYXRoJGhhc2ggPT09IHZvaWQgMCA/ICIiIDogX3BhcnNlUGF0aCRoYXNoOwogICAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbigiIiwgewogICAgICAgICAgICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lLAogICAgICAgICAgICAgICAgc2VhcmNoOiBzZWFyY2gsCiAgICAgICAgICAgICAgICBoYXNoOiBoYXNoCiAgICAgICAgICAgICAgfSwgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzCiAgICAgICAgICAgICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8ICJkZWZhdWx0Iik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdywgdG8pIHsKICAgICAgICAgICAgICB2YXIgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJiYXNlIik7CiAgICAgICAgICAgICAgdmFyIGhyZWYgPSAiIjsKCiAgICAgICAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoImhyZWYiKSkgewogICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgICAgICAgICAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCIjIik7CiAgICAgICAgICAgICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIGhyZWYgKyAiIyIgKyAodHlwZW9mIHRvID09PSAic3RyaW5nIiA/IHRvIDogcm91dGVyX2NyZWF0ZVBhdGgodG8pKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoTG9jYXRpb24obG9jYXRpb24sIHRvKSB7CiAgICAgICAgICAgICAgd2FybmluZyQxKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gIi8iLCAicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGhhc2ggaGlzdG9yeS5wdXNoKCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyAiKSIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIHJvdXRlcl9pbnZhcmlhbnQodmFsdWUsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gd2FybmluZyQxKGNvbmQsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgaWYgKCFjb25kKSB7CiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICJ1bmRlZmluZWQiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7CgogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IQogICAgICAgICAgICAgICAgLy8KICAgICAgICAgICAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseQogICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5CiAgICAgICAgICAgICAgICAvLyBlbmFibGluZyAicGF1c2Ugb24gZXhjZXB0aW9ucyIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHkKICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gY3JlYXRlS2V5KCkgewogICAgICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDgpOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBGb3IgYnJvd3Nlci1iYXNlZCBoaXN0b3JpZXMsIHdlIGNvbWJpbmUgdGhlIHN0YXRlIGFuZCBrZXkgaW50byBhbiBvYmplY3QKICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSwKICAgICAgICAgICAgICBrZXk6IGxvY2F0aW9uLmtleSwKICAgICAgICAgICAgICBpZHg6IGluZGV4CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aAogICAgICAgICAgICovCgoKICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7CiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgc3RhdGUgPSBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBfZXh0ZW5kcyh7CiAgICAgICAgICAgICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSAic3RyaW5nIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLAogICAgICAgICAgICAgIHNlYXJjaDogIiIsCiAgICAgICAgICAgICAgaGFzaDogIiIKICAgICAgICAgICAgfSwgdHlwZW9mIHRvID09PSAic3RyaW5nIiA/IHBhcnNlUGF0aCh0bykgOiB0bywgewogICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICAgICAgICAvLyBUT0RPOiBUaGlzIGNvdWxkIGJlIGNsZWFuZWQgdXAuICBwdXNoL3JlcGxhY2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgdGFrZQogICAgICAgICAgICAgIC8vIGZ1bGwgTG9jYXRpb25zIG5vdyBhbmQgYXZvaWQgdGhlIG5lZWQgdG8gcnVuIHRocm91Z2ggdGhpcyBmbG93IGF0IGFsbAogICAgICAgICAgICAgIC8vIEJ1dCB0aGF0J3MgYSBwcmV0dHkgYmlnIHJlZmFjdG9yIHRvIHRoZSBjdXJyZW50IHRlc3Qgc3VpdGUgc28gZ29pbmcgdG8KICAgICAgICAgICAgICAvLyBrZWVwIGFzIGlzIGZvciB0aGUgdGltZSBiZWluZyBhbmQganVzdCBsZXQgYW55IGluY29taW5nIGtleXMgdGFrZSBwcmVjZWRlbmNlCiAgICAgICAgICAgICAga2V5OiB0byAmJiB0by5rZXkgfHwga2V5IHx8IGNyZWF0ZUtleSgpCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiByb3V0ZXJfY3JlYXRlUGF0aChfcmVmKSB7CiAgICAgICAgICAgIHZhciBfcmVmJHBhdGhuYW1lID0KCgoKICAgICAgICAgICAgICBfcmVmLnBhdGhuYW1lLHBhdGhuYW1lID0gX3JlZiRwYXRobmFtZSA9PT0gdm9pZCAwID8gIi8iIDogX3JlZiRwYXRobmFtZSxfcmVmJHNlYXJjaCA9IF9yZWYuc2VhcmNoLHNlYXJjaCA9IF9yZWYkc2VhcmNoID09PSB2b2lkIDAgPyAiIiA6IF9yZWYkc2VhcmNoLF9yZWYkaGFzaCA9IF9yZWYuaGFzaCxoYXNoID0gX3JlZiRoYXNoID09PSB2b2lkIDAgPyAiIiA6IF9yZWYkaGFzaDsKICAgICAgICAgICAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICI/IikgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gIj8iID8gc2VhcmNoIDogIj8iICsgc2VhcmNoOwogICAgICAgICAgICBpZiAoaGFzaCAmJiBoYXNoICE9PSAiIyIpIHBhdGhuYW1lICs9IGhhc2guY2hhckF0KDApID09PSAiIyIgPyBoYXNoIDogIiMiICsgaGFzaDsKICAgICAgICAgICAgcmV0dXJuIHBhdGhuYW1lOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBQYXJzZXMgYSBzdHJpbmcgVVJMIHBhdGggaW50byBpdHMgc2VwYXJhdGUgcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy4KICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7CiAgICAgICAgICAgIHZhciBwYXJzZWRQYXRoID0ge307CgogICAgICAgICAgICBpZiAocGF0aCkgewogICAgICAgICAgICAgIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoIiMiKTsKCiAgICAgICAgICAgICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7CiAgICAgICAgICAgICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpOwogICAgICAgICAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgc2VhcmNoSW5kZXggPSBwYXRoLmluZGV4T2YoIj8iKTsKCiAgICAgICAgICAgICAgaWYgKHNlYXJjaEluZGV4ID49IDApIHsKICAgICAgICAgICAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gcGF0aC5zdWJzdHIoc2VhcmNoSW5kZXgpOwogICAgICAgICAgICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIHNlYXJjaEluZGV4KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChwYXRoKSB7CiAgICAgICAgICAgICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBwYXJzZWRQYXRoOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGdldFVybEJhc2VkSGlzdG9yeShnZXRMb2NhdGlvbiwgX2NyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHsKICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIF9vcHRpb25zMiA9CgoKICAgICAgICAgICAgICBvcHRpb25zLF9vcHRpb25zMiR3aW5kb3cgPSBfb3B0aW9uczIud2luZG93LHdpbmRvdyA9IF9vcHRpb25zMiR3aW5kb3cgPT09IHZvaWQgMCA/IGRvY3VtZW50LmRlZmF1bHRWaWV3IDogX29wdGlvbnMyJHdpbmRvdyxfb3B0aW9uczIkdjVDb21wYXQgPSBfb3B0aW9uczIudjVDb21wYXQsdjVDb21wYXQgPSBfb3B0aW9uczIkdjVDb21wYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMyJHY1Q29tcGF0OwogICAgICAgICAgICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5OwogICAgICAgICAgICB2YXIgYWN0aW9uID0gQWN0aW9uLlBvcDsKICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gbnVsbDsKICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoKTsgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZQogICAgICAgICAgICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2gKICAgICAgICAgICAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLgoKICAgICAgICAgICAgaWYgKGluZGV4ID09IG51bGwpIHsKICAgICAgICAgICAgICBpbmRleCA9IDA7CiAgICAgICAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoX2V4dGVuZHMoe30sIGdsb2JhbEhpc3Rvcnkuc3RhdGUsIHsKICAgICAgICAgICAgICAgIGlkeDogaW5kZXgKICAgICAgICAgICAgICB9KSwgIiIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBnZXRJbmRleCgpIHsKICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHsKICAgICAgICAgICAgICAgIGlkeDogbnVsbAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmlkeDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlUG9wKCkgewogICAgICAgICAgICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlBvcDsKICAgICAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gZ2V0SW5kZXgoKTsKCiAgICAgICAgICAgICAgaWYgKG5leHRJbmRleCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBuZXh0SW5kZXggLSBpbmRleDsKICAgICAgICAgICAgICAgIGFjdGlvbiA9IG5leHRBY3Rpb247CiAgICAgICAgICAgICAgICBpbmRleCA9IG5leHRJbmRleDsKCiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgICAgbGlzdGVuZXIoewogICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLAogICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICAgIGRlbHRhOiBkZWx0YQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAvLyBUT0RPOiBXcml0ZSB1cCBhIGRvYyB0aGF0IGV4cGxhaW5zIG91ciBibG9ja2luZyBzdHJhdGVneSBpbiBkZXRhaWwKICAgICAgICAgICAgICAgIC8vIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlciB3aGF0IGlzIGdvaW5nIG9uCiAgICAgICAgICAgICAgICAvLyBhbmQgaG93IHRvIGF2b2lkIGl0LgogICAgICAgICAgICAgICAgIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgIiArICJjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGUgYmxvY2sgd2lsbCBmYWlsIHNpbGVudGx5IGluICIgKyAicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSAiICsgInJvdXRlciAoaW5zdGVhZCBvZiB1c2luZyB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgZGlyZWN0bHkpICIgKyAidG8gYXZvaWQgdGhpcyBzaXR1YXRpb24uIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkgewogICAgICAgICAgICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoOwogICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7CiAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTsKICAgICAgICAgICAgICBpbmRleCA9IGdldEluZGV4KCkgKyAxOwogICAgICAgICAgICAgIHZhciBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTsKICAgICAgICAgICAgICB2YXIgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTsgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi8KCiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgIiIsIHVybCk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWwKICAgICAgICAgICAgICAgIC8vIHdheSB0byB3YXJuIHRoZW0gYWJvdXQgaXQgc2luY2UgdGhlIHBhZ2Ugd2lsbCByZWZyZXNoLi4uCiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgIGxpc3RlbmVyKHsKICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sCiAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLAogICAgICAgICAgICAgICAgICBkZWx0YTogMQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkgewogICAgICAgICAgICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlOwogICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7CiAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTsKICAgICAgICAgICAgICBpbmRleCA9IGdldEluZGV4KCk7CiAgICAgICAgICAgICAgdmFyIGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbiwgaW5kZXgpOwogICAgICAgICAgICAgIHZhciB1cmwgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pOwogICAgICAgICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgIiIsIHVybCk7CgogICAgICAgICAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikgewogICAgICAgICAgICAgICAgbGlzdGVuZXIoewogICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvbiwKICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgIGRlbHRhOiAwCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVVSTCh0bykgewogICAgICAgICAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gaXMgIm51bGwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3gKICAgICAgICAgICAgICAvLyB1bmRlciBjZXJ0YWluIGNvbmRpdGlvbnMsIG5vdGFibHkgd2hlbiBzZXJ2aW5nIGZyb20gYSBsb2NhbCBIVE1MIGZpbGUKICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODc4Mjk3CiAgICAgICAgICAgICAgdmFyIGJhc2UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSAibnVsbCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgICAgdmFyIGhyZWYgPSB0eXBlb2YgdG8gPT09ICJzdHJpbmciID8gdG8gOiByb3V0ZXJfY3JlYXRlUGF0aCh0byk7CiAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChiYXNlLCAiTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6ICIgKyBocmVmKTsKICAgICAgICAgICAgICByZXR1cm4gbmV3IFVSTChocmVmLCBiYXNlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGhpc3RvcnkgPSB7CiAgICAgICAgICAgICAgZ2V0IGFjdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb247CiAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgZ2V0IGxvY2F0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7CiAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4oZm4pIHsKICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcikgewogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkEgaGlzdG9yeSBvbmx5IGFjY2VwdHMgb25lIGFjdGl2ZSBsaXN0ZW5lciIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApOwogICAgICAgICAgICAgICAgbGlzdGVuZXIgPSBmbjsKICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7CiAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApOwogICAgICAgICAgICAgICAgICBsaXN0ZW5lciA9IG51bGw7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHsKICAgICAgICAgICAgICAgIHJldHVybiBfY3JlYXRlSHJlZih3aW5kb3csIHRvKTsKICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICBjcmVhdGVVUkw6IGNyZWF0ZVVSTCwKCiAgICAgICAgICAgICAgZW5jb2RlTG9jYXRpb246IGZ1bmN0aW9uIGVuY29kZUxvY2F0aW9uKHRvKSB7CiAgICAgICAgICAgICAgICAvLyBFbmNvZGUgYSBMb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93LmxvY2F0aW9uIHdvdWxkCiAgICAgICAgICAgICAgICB2YXIgdXJsID0gY3JlYXRlVVJMKHRvKTsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsCiAgICAgICAgICAgICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCwKICAgICAgICAgICAgICAgICAgaGFzaDogdXJsLmhhc2gKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgcHVzaDogcHVzaCwKICAgICAgICAgICAgICByZXBsYWNlOiByZXBsYWNlLAoKICAgICAgICAgICAgICBnbzogZnVuY3Rpb24gZ28obikgewogICAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbEhpc3RvcnkuZ28obik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIGhpc3Rvcnk7CiAgICAgICAgICB9IC8vI2VuZHJlZ2lvbgoKICAgICAgICAgIHZhciBSZXN1bHRUeXBlOwoKICAgICAgICAgIChmdW5jdGlvbiAoUmVzdWx0VHlwZSkgewogICAgICAgICAgICBSZXN1bHRUeXBlWyJkYXRhIl0gPSAiZGF0YSI7CiAgICAgICAgICAgIFJlc3VsdFR5cGVbImRlZmVycmVkIl0gPSAiZGVmZXJyZWQiOwogICAgICAgICAgICBSZXN1bHRUeXBlWyJyZWRpcmVjdCJdID0gInJlZGlyZWN0IjsKICAgICAgICAgICAgUmVzdWx0VHlwZVsiZXJyb3IiXSA9ICJlcnJvciI7CiAgICAgICAgICB9KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTsKCiAgICAgICAgICBmdW5jdGlvbiBpc0luZGV4Um91dGUocm91dGUpIHsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlLmluZGV4ID09PSB0cnVlOwogICAgICAgICAgfSAvLyBXYWxrIHRoZSByb3V0ZSB0cmVlIGdlbmVyYXRpbmcgdW5pcXVlIElEcyB3aGVyZSBuZWNlc3Nhcnkgc28gd2UgYXJlIHdvcmtpbmcKICAgICAgICAgIC8vIHNvbGVseSB3aXRoIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0J3Mgd2l0aGluIHRoZSBSb3V0ZXIKCgogICAgICAgICAgZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIHBhcmVudFBhdGgsIGFsbElkcykgewogICAgICAgICAgICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgcGFyZW50UGF0aCA9IFtdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoYWxsSWRzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBhbGxJZHMgPSBuZXcgU2V0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgICB2YXIgdHJlZVBhdGggPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5MihwYXJlbnRQYXRoKSwgW2luZGV4XSk7CiAgICAgICAgICAgICAgdmFyIGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSAic3RyaW5nIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbigiLSIpOwogICAgICAgICAgICAgIHJvdXRlcl9pbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCAiQ2Fubm90IHNwZWNpZnkgY2hpbGRyZW4gb24gYW4gaW5kZXggcm91dGUiKTsKICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KCFhbGxJZHMuaGFzKGlkKSwgIkZvdW5kIGEgcm91dGUgaWQgY29sbGlzaW9uIG9uIGlkIFwiIiArIGlkICsgIlwiLiAgUm91dGUgIiArICJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXMiKTsKICAgICAgICAgICAgICBhbGxJZHMuYWRkKGlkKTsKCiAgICAgICAgICAgICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHsKICAgICAgICAgICAgICAgIHZhciBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCB7CiAgICAgICAgICAgICAgICAgIGlkOiBpZAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4Um91dGU7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwgewogICAgICAgICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlbiA/IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIHRyZWVQYXRoLCBhbGxJZHMpIDogdW5kZWZpbmVkCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXMKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7CiAgICAgICAgICAgIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgYmFzZW5hbWUgPSAiLyI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gInN0cmluZyIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7CiAgICAgICAgICAgIHZhciBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgIi8iLCBiYXNlbmFtZSk7CgogICAgICAgICAgICBpZiAocGF0aG5hbWUgPT0gbnVsbCkgewogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7CiAgICAgICAgICAgIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTsKICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBudWxsOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgLy8gSW5jb21pbmcgcGF0aG5hbWVzIGFyZSBnZW5lcmFsbHkgZW5jb2RlZCBmcm9tIGVpdGhlciB3aW5kb3cubG9jYXRpb24KICAgICAgICAgICAgICAvLyBvciBmcm9tIHJvdXRlci5uYXZpZ2F0ZSwgYnV0IHdlIHdhbnQgdG8gbWF0Y2ggYWdhaW5zdCB0aGUgdW5lbmNvZGVkCiAgICAgICAgICAgICAgLy8gcGF0aHMgaW4gdGhlIHJvdXRlIGRlZmluaXRpb25zLiAgTWVtb3J5IHJvdXRlciBsb2NhdGlvbnMgd29uJ3QgYmUKICAgICAgICAgICAgICAvLyBlbmNvZGVkIGhlcmUgYnV0IHRoZXJlIGFsc28gc2hvdWxkbid0IGJlIGFueXRoaW5nIHRvIGRlY29kZSBzbyB0aGlzCiAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGEgc2FmZSBvcGVyYXRpb24uICBUaGlzIGF2b2lkcyBuZWVkaW5nIG1hdGNoUm91dGVzIHRvIGJlCiAgICAgICAgICAgICAgLy8gaGlzdG9yeS1hd2FyZS4KICAgICAgICAgICAgICBzYWZlbHlEZWNvZGVVUkkocGF0aG5hbWUpKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkgewogICAgICAgICAgICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIGJyYW5jaGVzID0gW107CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJlbnRzTWV0YSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgcGFyZW50c01ldGEgPSBbXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIHBhcmVudFBhdGggPSAiIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGZsYXR0ZW5Sb3V0ZSA9IChyb3V0ZSwgaW5kZXgsIHJlbGF0aXZlUGF0aCkgPT4gewogICAgICAgICAgICAgIHZhciBtZXRhID0gewogICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiByZWxhdGl2ZVBhdGggPT09IHVuZGVmaW5lZCA/IHJvdXRlLnBhdGggfHwgIiIgOiByZWxhdGl2ZVBhdGgsCiAgICAgICAgICAgICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLAogICAgICAgICAgICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsCiAgICAgICAgICAgICAgICByb3V0ZTogcm91dGUKICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aCgiLyIpKSB7CiAgICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksICJBYnNvbHV0ZSByb3V0ZSBwYXRoIFwiIiArIG1ldGEucmVsYXRpdmVQYXRoICsgIlwiIG5lc3RlZCB1bmRlciBwYXRoICIgKyAoIlwiIiArIHBhcmVudFBhdGggKyAiXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoICIpICsgIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuIik7CiAgICAgICAgICAgICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhciBwYXRoID0gcm91dGVyX2pvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTsKICAgICAgICAgICAgICB2YXIgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTsgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZQogICAgICAgICAgICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW4KICAgICAgICAgICAgICAvLyB0aGUgImZsYXR0ZW5lZCIgdmVyc2lvbi4KCiAgICAgICAgICAgICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHJvdXRlcl9pbnZhcmlhbnQoIC8vIE91ciB0eXBlcyBrbm93IGJldHRlciwgYnV0IHJ1bnRpbWUgSlMgbWF5IG5vdCEKICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IKICAgICAgICAgICAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlLCAiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlICIgKyAoImFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFwiIiArIHBhdGggKyAiXCIuIikpOwogICAgICAgICAgICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpOwogICAgICAgICAgICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlCiAgICAgICAgICAgICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy4KCgogICAgICAgICAgICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBicmFuY2hlcy5wdXNoKHsKICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsCiAgICAgICAgICAgICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSwKICAgICAgICAgICAgICAgIHJvdXRlc01ldGE6IHJvdXRlc01ldGEKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHJvdXRlcy5mb3JFYWNoKChyb3V0ZSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgICB2YXIgX3JvdXRlJHBhdGg7CgogICAgICAgICAgICAgIC8vIGNvYXJzZS1ncmFpbiBjaGVjayBmb3Igb3B0aW9uYWwgcGFyYW1zCiAgICAgICAgICAgICAgaWYgKHJvdXRlLnBhdGggPT09ICIiIHx8ICEoKF9yb3V0ZSRwYXRoID0gcm91dGUucGF0aCkgIT0gbnVsbCAmJiBfcm91dGUkcGF0aC5pbmNsdWRlcygiPyIpKSkgewogICAgICAgICAgICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCk7CiAgICAgICAgICAgICAgfSBlbHNlIHt2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMigKICAgICAgICAgICAgICAgICAgZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocm91dGUucGF0aCkpLF9zdGVwMzt0cnkge2ZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7dmFyIGV4cGxvZGVkID0gX3N0ZXAzLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgsIGV4cGxvZGVkKTsKICAgICAgICAgICAgICAgICAgfX0gY2F0Y2ggKGVycikge19pdGVyYXRvcjMuZShlcnIpO30gZmluYWxseSB7X2l0ZXJhdG9yMy5mKCk7fQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBicmFuY2hlczsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogQ29tcHV0ZXMgYWxsIGNvbWJpbmF0aW9ucyBvZiBvcHRpb25hbCBwYXRoIHNlZ21lbnRzIGZvciBhIGdpdmVuIHBhdGgsCiAgICAgICAgICAgKiBleGNsdWRpbmcgY29tYmluYXRpb25zIHRoYXQgYXJlIGFtYmlndW91cyBhbmQgb2YgbG93ZXIgcHJpb3JpdHkuCiAgICAgICAgICAgKgogICAgICAgICAgICogRm9yIGV4YW1wbGUsIGAvb25lLzp0d28/L3RocmVlLzpmb3VyPy86Zml2ZT9gIGV4cGxvZGVzIHRvOgogICAgICAgICAgICogLSBgL29uZS90aHJlZWAKICAgICAgICAgICAqIC0gYC9vbmUvOnR3by90aHJlZWAKICAgICAgICAgICAqIC0gYC9vbmUvdGhyZWUvOmZvdXJgCiAgICAgICAgICAgKiAtIGAvb25lL3RocmVlLzpmaXZlYAogICAgICAgICAgICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyYAogICAgICAgICAgICogLSBgL29uZS86dHdvL3RocmVlLzpmaXZlYAogICAgICAgICAgICogLSBgL29uZS90aHJlZS86Zm91ci86Zml2ZWAKICAgICAgICAgICAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91ci86Zml2ZWAKICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7CiAgICAgICAgICAgIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoIi8iKTsKICAgICAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdOwogICAgICAgICAgICB2YXIgX3NlZ21lbnRzID0gX3RvQXJyYXkoc2VnbWVudHMpLGZpcnN0ID0gX3NlZ21lbnRzWzBdLHJlc3QgPSBfc2VnbWVudHMuc2xpY2UoMSk7IC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2AKCiAgICAgICAgICAgIHZhciBpc09wdGlvbmFsID0gZmlyc3QuZW5kc1dpdGgoIj8iKTsgLy8gQ29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyByZXF1aXJlZCBzZWdtZW50OiBgZm9vP2AgLT4gYGZvb2AKCiAgICAgICAgICAgIHZhciByZXF1aXJlZCA9IGZpcnN0LnJlcGxhY2UoL1w/JC8sICIiKTsKCiAgICAgICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgIC8vIEludGVwcmV0IGVtcHR5IHN0cmluZyBhcyBvbWl0dGluZyBhbiBvcHRpb25hbCBzZWdtZW50CiAgICAgICAgICAgICAgLy8gYFsib25lIiwgIiIsICJ0aHJlZSJdYCBjb3JyZXNwb25kcyB0byBvbWl0dGluZyBgOnR3b2AgZnJvbSBgL29uZS86dHdvPy90aHJlZWAgLT4gYC9vbmUvdGhyZWVgCiAgICAgICAgICAgICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBbcmVxdWlyZWQsICIiXSA6IFtyZXF1aXJlZF07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZXN0RXhwbG9kZWQgPSBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyZXN0LmpvaW4oIi8iKSk7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTsgLy8gQWxsIGNoaWxkIHBhdGhzIHdpdGggdGhlIHByZWZpeC4gIERvIHRoaXMgZm9yIGFsbCBjaGlsZHJlbiBiZWZvcmUgdGhlCiAgICAgICAgICAgIC8vIG9wdGlvbmFsIHZlcnNpb24gZm9yIGFsbCBjaGlsZHJlbiBzbyB3ZSBnZXQgY29uc2lzdGVudCBvcmRlcmluZyB3aGVyZSB0aGUKICAgICAgICAgICAgLy8gcGFyZW50IG9wdGlvbmFsIGFzcGVjdCBpcyBwcmVmZXJyZWQgYXMgcmVxdWlyZWQuICBPdGhlcndpc2UsIHdlIGNhbiBnZXQKICAgICAgICAgICAgLy8gY2hpbGQgc2VjdGlvbnMgaW50ZXJzcGVyc2VkIHdoZXJlIGRlZXBlciBvcHRpb25hbCBzZWdtZW50cyBhcmUgaGlnaGVyIHRoYW4KICAgICAgICAgICAgLy8gcGFyZW50IG9wdGlvbmFsIHNlZ21lbnRzLCB3aGVyZSBmb3IgZXhhbXBsZSwgLzp0d28gd291bGQgZXhwbG9kZXMgX2VhcmxpZXJfCiAgICAgICAgICAgIC8vIHRoZW4gLzpvbmUuICBCeSBhbHdheXMgaW5jbHVkaW5nIHRoZSBwYXJlbnQgYXMgcmVxdWlyZWQgX2ZvciBhbGwgY2hpbGRyZW5fCiAgICAgICAgICAgIC8vIGZpcnN0LCB3ZSBhdm9pZCB0aGlzIGlzc3VlCgogICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIF90b0NvbnN1bWFibGVBcnJheTIocmVzdEV4cGxvZGVkLm1hcCgoc3VicGF0aCkgPT4gc3VicGF0aCA9PT0gIiIgPyByZXF1aXJlZCA6IFtyZXF1aXJlZCwgc3VicGF0aF0uam9pbigiLyIpKSkpOyAvLyBUaGVuIGlmIHRoaXMgaXMgYW4gb3B0aW9uYWwgdmFsdWUsIGFkZCBhbGwgY2hpbGQgdmVyc2lvbnMgd2l0aG91dAoKICAgICAgICAgICAgaWYgKGlzT3B0aW9uYWwpIHsKICAgICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIF90b0NvbnN1bWFibGVBcnJheTIocmVzdEV4cGxvZGVkKSk7CiAgICAgICAgICAgIH0gLy8gZm9yIGFic29sdXRlIHBhdGhzLCBlbnN1cmUgYC9gIGluc3RlYWQgb2YgZW1wdHkgc2VnbWVudAoKCiAgICAgICAgICAgIHJldHVybiByZXN1bHQubWFwKChleHBsb2RlZCkgPT4gcGF0aC5zdGFydHNXaXRoKCIvIikgJiYgZXhwbG9kZWQgPT09ICIiID8gIi8iIDogZXhwbG9kZWQpOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7CiAgICAgICAgICAgIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3QKICAgICAgICAgICAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKChtZXRhKSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKChtZXRhKSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpKSk7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHBhcmFtUmUgPSAvXjpcdyskLzsKICAgICAgICAgIHZhciBkeW5hbWljU2VnbWVudFZhbHVlID0gMzsKICAgICAgICAgIHZhciBpbmRleFJvdXRlVmFsdWUgPSAyOwogICAgICAgICAgdmFyIGVtcHR5U2VnbWVudFZhbHVlID0gMTsKICAgICAgICAgIHZhciBzdGF0aWNTZWdtZW50VmFsdWUgPSAxMDsKICAgICAgICAgIHZhciBzcGxhdFBlbmFsdHkgPSAtMjsKCiAgICAgICAgICB2YXIgaXNTcGxhdCA9IChzKSA9PiBzID09PSAiKiI7CgogICAgICAgICAgZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGgsIGluZGV4KSB7CiAgICAgICAgICAgIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoIi8iKTsKICAgICAgICAgICAgdmFyIGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDsKCiAgICAgICAgICAgIGlmIChzZWdtZW50cy5zb21lKGlzU3BsYXQpKSB7CiAgICAgICAgICAgICAgaW5pdGlhbFNjb3JlICs9IHNwbGF0UGVuYWx0eTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGluZGV4KSB7CiAgICAgICAgICAgICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcigocykgPT4gIWlzU3BsYXQocykpLnJlZHVjZSgoc2NvcmUsIHNlZ21lbnQpID0+IHNjb3JlICsgKHBhcmFtUmUudGVzdChzZWdtZW50KSA/IGR5bmFtaWNTZWdtZW50VmFsdWUgOiBzZWdtZW50ID09PSAiIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhLCBiKSB7CiAgICAgICAgICAgIHZhciBzaWJsaW5ncyA9IGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7CiAgICAgICAgICAgIHJldHVybiBzaWJsaW5ncyA/IC8vIElmIHR3byByb3V0ZXMgYXJlIHNpYmxpbmdzLCB3ZSBzaG91bGQgdHJ5IHRvIG1hdGNoIHRoZSBlYXJsaWVyIHNpYmxpbmcKICAgICAgICAgICAgLy8gZmlyc3QuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBoYXZlIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIG1hdGNoaW5nCiAgICAgICAgICAgIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleQogICAgICAgICAgICAvLyB3YW50IHRoZW0gdHJpZWQuCiAgICAgICAgICAgIGFbYS5sZW5ndGggLSAxXSAtIGJbYi5sZW5ndGggLSAxXSA6IC8vIE90aGVyd2lzZSwgaXQgZG9lc24ndCByZWFsbHkgbWFrZSBzZW5zZSB0byByYW5rIG5vbi1zaWJsaW5ncyBieSBpbmRleCwKICAgICAgICAgICAgLy8gc28gdGhleSBzb3J0IGVxdWFsbHkuCiAgICAgICAgICAgIDA7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7CiAgICAgICAgICAgIHZhcgogICAgICAgICAgICByb3V0ZXNNZXRhID0KICAgICAgICAgICAgYnJhbmNoLnJvdXRlc01ldGE7CiAgICAgICAgICAgIHZhciBtYXRjaGVkUGFyYW1zID0ge307CiAgICAgICAgICAgIHZhciBtYXRjaGVkUGF0aG5hbWUgPSAiLyI7CiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gW107CgogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICB2YXIgbWV0YSA9IHJvdXRlc01ldGFbaV07CiAgICAgICAgICAgICAgdmFyIGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTsKICAgICAgICAgICAgICB2YXIgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09ICIvIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgIi8iOwogICAgICAgICAgICAgIHZhciBtYXRjaCA9IHJvdXRlcl9tYXRjaFBhdGgoewogICAgICAgICAgICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsCiAgICAgICAgICAgICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsCiAgICAgICAgICAgICAgICBlbmQ6IGVuZAogICAgICAgICAgICAgIH0sIHJlbWFpbmluZ1BhdGhuYW1lKTsKICAgICAgICAgICAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG1hdGNoZWRQYXJhbXMsIG1hdGNoLnBhcmFtcyk7CiAgICAgICAgICAgICAgdmFyIHJvdXRlID0gbWV0YS5yb3V0ZTsKICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goewogICAgICAgICAgICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD8KICAgICAgICAgICAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcywKICAgICAgICAgICAgICAgIHBhdGhuYW1lOiByb3V0ZXJfam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksCiAgICAgICAgICAgICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKHJvdXRlcl9qb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLAogICAgICAgICAgICAgICAgcm91dGU6IHJvdXRlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09ICIvIikgewogICAgICAgICAgICAgICAgbWF0Y2hlZFBhdGhuYW1lID0gcm91dGVyX2pvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIGEgcGF0aCB3aXRoIHBhcmFtcyBpbnRlcnBvbGF0ZWQuCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9nZW5lcmF0ZS1wYXRoCiAgICAgICAgICAgKi8KCgogICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKG9yaWdpbmFsUGF0aCwgcGFyYW1zKSB7CiAgICAgICAgICAgIGlmIChwYXJhbXMgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIHBhcmFtcyA9IHt9OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcGF0aCA9IG9yaWdpbmFsUGF0aDsKCiAgICAgICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKCIqIikgJiYgcGF0aCAhPT0gIioiICYmICFwYXRoLmVuZHNXaXRoKCIvKiIpKSB7CiAgICAgICAgICAgICAgd2FybmluZyhmYWxzZSwgIlJvdXRlIHBhdGggXCIiICsgcGF0aCArICJcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSAiICsgKCJcIiIgKyBwYXRoLnJlcGxhY2UoL1wqJC8sICIvKiIpICsgIlwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCAiKSArICJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgIiArICgicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcIiIgKyBwYXRoLnJlcGxhY2UoL1wqJC8sICIvKiIpICsgIlwiLiIpKTsKICAgICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cKiQvLCAiLyoiKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXjooXHcrKShcPz8pL2csIChfLCBrZXksIG9wdGlvbmFsKSA9PiB7CiAgICAgICAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zW2tleV07CgogICAgICAgICAgICAgIGlmIChvcHRpb25hbCA9PT0gIj8iKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0gPT0gbnVsbCA/ICIiIDogcGFyYW07CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAocGFyYW0gPT0gbnVsbCkgewogICAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChmYWxzZSwgIk1pc3NpbmcgXCI6IiArIGtleSArICJcIiBwYXJhbSIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtOwogICAgICAgICAgICB9KS5yZXBsYWNlKC9cLzooXHcrKShcPz8pL2csIChfLCBrZXksIG9wdGlvbmFsKSA9PiB7CiAgICAgICAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zW2tleV07CgogICAgICAgICAgICAgIGlmIChvcHRpb25hbCA9PT0gIj8iKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0gPT0gbnVsbCA/ICIiIDogIi8iICsgcGFyYW07CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAocGFyYW0gPT0gbnVsbCkgewogICAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChmYWxzZSwgIk1pc3NpbmcgXCI6IiArIGtleSArICJcIiBwYXJhbSIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuICIvIiArIHBhcmFtOwogICAgICAgICAgICB9KSAvLyBSZW1vdmUgYW55IG9wdGlvbmFsIG1hcmtlcnMgZnJvbSBvcHRpb25hbCBzdGF0aWMgc2VnbWVudHMKICAgICAgICAgICAgLnJlcGxhY2UoL1w/L2csICIiKS5yZXBsYWNlKC8oXC8/KVwqLywgKF8sIHByZWZpeCwgX18sIHN0cikgPT4gewogICAgICAgICAgICAgIHZhciBzdGFyID0gIioiOwoKICAgICAgICAgICAgICBpZiAocGFyYW1zW3N0YXJdID09IG51bGwpIHsKICAgICAgICAgICAgICAgIC8vIElmIG5vIHNwbGF0IHdhcyBwcm92aWRlZCwgdHJpbSB0aGUgdHJhaWxpbmcgc2xhc2ggX3VubGVzc18gaXQncwogICAgICAgICAgICAgICAgLy8gdGhlIGVudGlyZSBwYXRoCiAgICAgICAgICAgICAgICByZXR1cm4gc3RyID09PSAiLyoiID8gIi8iIDogIiI7CiAgICAgICAgICAgICAgfSAvLyBBcHBseSB0aGUgc3BsYXQKCgogICAgICAgICAgICAgIHJldHVybiAiIiArIHByZWZpeCArIHBhcmFtc1tzdGFyXTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXQKICAgICAgICAgICAqIHRoZSBtYXRjaC4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXBhdGgKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHJvdXRlcl9tYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgIHBhdHRlcm4gPSB7CiAgICAgICAgICAgICAgICBwYXRoOiBwYXR0ZXJuLAogICAgICAgICAgICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsCiAgICAgICAgICAgICAgICBlbmQ6IHRydWUKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKSxfY29tcGlsZVBhdGgyID0gX3NsaWNlZFRvQXJyYXkyKF9jb21waWxlUGF0aCwgMiksbWF0Y2hlciA9IF9jb21waWxlUGF0aDJbMF0scGFyYW1OYW1lcyA9IF9jb21waWxlUGF0aDJbMV07CiAgICAgICAgICAgIHZhciBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpOwogICAgICAgICAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgdmFyIG1hdGNoZWRQYXRobmFtZSA9IG1hdGNoWzBdOwogICAgICAgICAgICB2YXIgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnJlcGxhY2UoLyguKVwvKyQvLCAiJDEiKTsKICAgICAgICAgICAgdmFyIGNhcHR1cmVHcm91cHMgPSBtYXRjaC5zbGljZSgxKTsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHBhcmFtTmFtZXMucmVkdWNlKChtZW1vLCBwYXJhbU5hbWUsIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlCiAgICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbIioiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuCiAgICAgICAgICAgICAgaWYgKHBhcmFtTmFtZSA9PT0gIioiKSB7CiAgICAgICAgICAgICAgICB2YXIgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8ICIiOwogICAgICAgICAgICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXC8rJC8sICIkMSIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgbWVtb1twYXJhbU5hbWVdID0gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8ICIiLCBwYXJhbU5hbWUpOwogICAgICAgICAgICAgIHJldHVybiBtZW1vOwogICAgICAgICAgICB9LCB7fSk7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsCiAgICAgICAgICAgICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSwKICAgICAgICAgICAgICBwYXRobmFtZUJhc2U6IHBhdGhuYW1lQmFzZSwKICAgICAgICAgICAgICBwYXR0ZXJuOiBwYXR0ZXJuCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgY2FzZVNlbnNpdGl2ZSwgZW5kKSB7CiAgICAgICAgICAgIGlmIChjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChlbmQgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIGVuZCA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHdhcm5pbmcocGF0aCA9PT0gIioiIHx8ICFwYXRoLmVuZHNXaXRoKCIqIikgfHwgcGF0aC5lbmRzV2l0aCgiLyoiKSwgIlJvdXRlIHBhdGggXCIiICsgcGF0aCArICJcIiB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSAiICsgKCJcIiIgKyBwYXRoLnJlcGxhY2UoL1wqJC8sICIvKiIpICsgIlwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCAiKSArICJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgIiArICgicGxlYXNlIGNoYW5nZSB0aGUgcm91dGUgcGF0aCB0byBcIiIgKyBwYXRoLnJlcGxhY2UoL1wqJC8sICIvKiIpICsgIlwiLiIpKTsKICAgICAgICAgICAgdmFyIHBhcmFtTmFtZXMgPSBbXTsKICAgICAgICAgICAgdmFyIHJlZ2V4cFNvdXJjZSA9ICJeIiArIHBhdGgucmVwbGFjZSgvXC8qXCo/JC8sICIiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvdwogICAgICAgICAgICAucmVwbGFjZSgvXlwvKi8sICIvIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgLwogICAgICAgICAgICAucmVwbGFjZSgvW1xcLiorXiQ/e318KClbXF1dL2csICJcXCQmIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnMKICAgICAgICAgICAgLnJlcGxhY2UoL1wvOihcdyspL2csIChfLCBwYXJhbU5hbWUpID0+IHsKICAgICAgICAgICAgICBwYXJhbU5hbWVzLnB1c2gocGFyYW1OYW1lKTsKICAgICAgICAgICAgICByZXR1cm4gIi8oW15cXC9dKykiOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKCIqIikpIHsKICAgICAgICAgICAgICBwYXJhbU5hbWVzLnB1c2goIioiKTsKICAgICAgICAgICAgICByZWdleHBTb3VyY2UgKz0gcGF0aCA9PT0gIioiIHx8IHBhdGggPT09ICIvKiIgPyAiKC4qKSQiIC8vIEFscmVhZHkgbWF0Y2hlZCB0aGUgaW5pdGlhbCAvLCBqdXN0IG1hdGNoIHRoZSByZXN0CiAgICAgICAgICAgICAgOiAiKD86XFwvKC4rKXxcXC8qKSQiOyAvLyBEb24ndCBpbmNsdWRlIHRoZSAvIGluIHBhcmFtc1siKiJdCiAgICAgICAgICAgIH0gZWxzZSBpZiAoZW5kKSB7CiAgICAgICAgICAgICAgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlcwogICAgICAgICAgICAgIHJlZ2V4cFNvdXJjZSArPSAiXFwvKiQiOwogICAgICAgICAgICB9IGVsc2UgaWYgKHBhdGggIT09ICIiICYmIHBhdGggIT09ICIvIikgewogICAgICAgICAgICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsCiAgICAgICAgICAgICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG8KICAgICAgICAgICAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsCiAgICAgICAgICAgICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZAogICAgICAgICAgICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYQogICAgICAgICAgICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlCiAgICAgICAgICAgICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuCiAgICAgICAgICAgICAgcmVnZXhwU291cmNlICs9ICIoPzooPz1cXC98JCkpIjsKICAgICAgICAgICAgfSBlbHNlIDsKCiAgICAgICAgICAgIHZhciBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiAiaSIpOwogICAgICAgICAgICByZXR1cm4gW21hdGNoZXIsIHBhcmFtTmFtZXNdOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHNhZmVseURlY29kZVVSSSh2YWx1ZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUkkodmFsdWUpOwogICAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICAgIHdhcm5pbmcoZmFsc2UsICJUaGUgVVJMIHBhdGggXCIiICsgdmFsdWUgKyAiXCIgY291bGQgbm90IGJlIGRlY29kZWQgYmVjYXVzZSBpdCBpcyBpcyBhICIgKyAibWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5IGR1ZSB0byBhIGJhZCBwZXJjZW50ICIgKyAoImVuY29kaW5nICgiICsgZXJyb3IgKyAiKS4iKSk7CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLCBwYXJhbU5hbWUpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFwiIiArIHBhcmFtTmFtZSArICJcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2UiICsgKCIgdGhlIHN0cmluZyBcIiIgKyB2YWx1ZSArICJcIiBpcyBhIG1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSIpICsgKCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKCIgKyBlcnJvciArICIpLiIpKTsKICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkgewogICAgICAgICAgICBpZiAoYmFzZW5hbWUgPT09ICIvIikgcmV0dXJuIHBhdGhuYW1lOwoKICAgICAgICAgICAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfSAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleQogICAgICAgICAgICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdAoKCiAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gYmFzZW5hbWUuZW5kc1dpdGgoIi8iKSA/IGJhc2VuYW1lLmxlbmd0aCAtIDEgOiBiYXNlbmFtZS5sZW5ndGg7CiAgICAgICAgICAgIHZhciBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTsKCiAgICAgICAgICAgIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gIi8iKSB7CiAgICAgICAgICAgICAgLy8gcGF0aG5hbWUgZG9lcyBub3Qgc3RhcnQgd2l0aCBiYXNlbmFtZS8KICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8ICIvIjsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkgewogICAgICAgICAgICBpZiAoIWNvbmQpIHsKICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZQogICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gInVuZGVmaW5lZCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTsKCiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIEByZW1peC1ydW4vcm91dGVyIQogICAgICAgICAgICAgICAgLy8KICAgICAgICAgICAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseQogICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5CiAgICAgICAgICAgICAgICAvLyBlbmFibGluZyAicGF1c2Ugb24gZXhjZXB0aW9ucyIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHkKICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFJldHVybnMgYSByZXNvbHZlZCBwYXRoIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUuCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9yZXNvbHZlLXBhdGgKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHsKICAgICAgICAgICAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgZnJvbVBhdGhuYW1lID0gIi8iOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgX3JlZjEyID0KCgoKICAgICAgICAgICAgICB0eXBlb2YgdG8gPT09ICJzdHJpbmciID8gcGFyc2VQYXRoKHRvKSA6IHRvLHRvUGF0aG5hbWUgPSBfcmVmMTIucGF0aG5hbWUsX3JlZjEyJHNlYXJjaCA9IF9yZWYxMi5zZWFyY2gsc2VhcmNoID0gX3JlZjEyJHNlYXJjaCA9PT0gdm9pZCAwID8gIiIgOiBfcmVmMTIkc2VhcmNoLF9yZWYxMiRoYXNoID0gX3JlZjEyLmhhc2gsaGFzaCA9IF9yZWYxMiRoYXNoID09PSB2b2lkIDAgPyAiIiA6IF9yZWYxMiRoYXNoOwogICAgICAgICAgICB2YXIgcGF0aG5hbWUgPSB0b1BhdGhuYW1lID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKCIvIikgPyB0b1BhdGhuYW1lIDogcmVzb2x2ZVBhdGhuYW1lKHRvUGF0aG5hbWUsIGZyb21QYXRobmFtZSkgOiBmcm9tUGF0aG5hbWU7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lLAogICAgICAgICAgICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksCiAgICAgICAgICAgICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKQogICAgICAgICAgICB9OwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkgewogICAgICAgICAgICB2YXIgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXC8rJC8sICIiKS5zcGxpdCgiLyIpOwogICAgICAgICAgICB2YXIgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdCgiLyIpOwogICAgICAgICAgICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goKHNlZ21lbnQpID0+IHsKICAgICAgICAgICAgICBpZiAoc2VnbWVudCA9PT0gIi4uIikgewogICAgICAgICAgICAgICAgLy8gS2VlcCB0aGUgcm9vdCAiIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgLwogICAgICAgICAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gIi4iKSB7CiAgICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbigiLyIpIDogIi8iOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoY2hhciwgZmllbGQsIGRlc3QsIHBhdGgpIHsKICAgICAgICAgICAgcmV0dXJuICJDYW5ub3QgaW5jbHVkZSBhICciICsgY2hhciArICInIGNoYXJhY3RlciBpbiBhIG1hbnVhbGx5IHNwZWNpZmllZCAiICsgKCJgdG8uIiArIGZpZWxkICsgImAgZmllbGQgWyIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSArICJdLiAgUGxlYXNlIHNlcGFyYXRlIGl0IG91dCB0byB0aGUgIikgKyAoImB0by4iICsgZGVzdCArICJgIGZpZWxkLiBBbHRlcm5hdGl2ZWx5IHlvdSBtYXkgcHJvdmlkZSB0aGUgZnVsbCBwYXRoIGFzICIpICsgImEgc3RyaW5nIGluIDxMaW5rIHRvPVwiLi4uXCI+IGFuZCB0aGUgcm91dGVyIHdpbGwgcGFyc2UgaXQgZm9yIHlvdS4iOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICoKICAgICAgICAgICAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0CiAgICAgICAgICAgKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3QKICAgICAgICAgICAqIGludGVyZmVyZS4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGEKICAgICAgICAgICAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5CiAgICAgICAgICAgKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OgogICAgICAgICAgICoKICAgICAgICAgICAqICAgPFJvdXRlIHBhdGg9Ii8iPgogICAgICAgICAgICogICAgIDxSb3V0ZSBwYXRoPSJhY2NvdW50cyIgZWxlbWVudD17PExpbmsgdG89Ii4uIn0+CiAgICAgICAgICAgKiAgIDwvUm91dGU+CiAgICAgICAgICAgKgogICAgICAgICAgICogICA8Um91dGUgcGF0aD0iLyI+CiAgICAgICAgICAgKiAgICAgPFJvdXRlIHBhdGg9ImFjY291bnRzIj4KICAgICAgICAgICAqICAgICAgIDxSb3V0ZSBlbGVtZW50PXs8QWNjb3VudHNMYXlvdXQgLz59PiAgICAgICAvLyA8LS0gRG9lcyBub3QgY29udHJpYnV0ZQogICAgICAgICAgICogICAgICAgICA8Um91dGUgaW5kZXggZWxlbWVudD17PExpbmsgdG89Ii4uIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlCiAgICAgICAgICAgKiAgICAgICA8L1JvdXRlCiAgICAgICAgICAgKiAgICAgPC9Sb3V0ZT4KICAgICAgICAgICAqICAgPC9Sb3V0ZT4KICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKSB7CiAgICAgICAgICAgIHJldHVybiBtYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiBpbmRleCA9PT0gMCB8fCBtYXRjaC5yb3V0ZS5wYXRoICYmIG1hdGNoLnJvdXRlLnBhdGgubGVuZ3RoID4gMCk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lLCBpc1BhdGhSZWxhdGl2ZSkgewogICAgICAgICAgICBpZiAoaXNQYXRoUmVsYXRpdmUgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIGlzUGF0aFJlbGF0aXZlID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciB0bzsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9BcmcgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTsKICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoIj8iKSwgZ2V0SW52YWxpZFBhdGhFcnJvcigiPyIsICJwYXRobmFtZSIsICJzZWFyY2giLCB0bykpOwogICAgICAgICAgICAgIHJvdXRlcl9pbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcygiIyIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKCIjIiwgInBhdGhuYW1lIiwgImhhc2giLCB0bykpOwogICAgICAgICAgICAgIHJvdXRlcl9pbnZhcmlhbnQoIXRvLnNlYXJjaCB8fCAhdG8uc2VhcmNoLmluY2x1ZGVzKCIjIiksIGdldEludmFsaWRQYXRoRXJyb3IoIiMiLCAic2VhcmNoIiwgImhhc2giLCB0bykpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgaXNFbXB0eVBhdGggPSB0b0FyZyA9PT0gIiIgfHwgdG8ucGF0aG5hbWUgPT09ICIiOwogICAgICAgICAgICB2YXIgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gIi8iIDogdG8ucGF0aG5hbWU7CiAgICAgICAgICAgIHZhciBmcm9tOyAvLyBSb3V0aW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50IHBhdGhuYW1lIGlmIGV4cGxpY2l0bHkgcmVxdWVzdGVkLgogICAgICAgICAgICAvLwogICAgICAgICAgICAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZQogICAgICAgICAgICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91cgogICAgICAgICAgICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXMKICAgICAgICAgICAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yCiAgICAgICAgICAgIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yCiAgICAgICAgICAgIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZQogICAgICAgICAgICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuCgogICAgICAgICAgICBpZiAoaXNQYXRoUmVsYXRpdmUgfHwgdG9QYXRobmFtZSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgZnJvbSA9IGxvY2F0aW9uUGF0aG5hbWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIHJvdXRlUGF0aG5hbWVJbmRleCA9IHJvdXRlUGF0aG5hbWVzLmxlbmd0aCAtIDE7CgogICAgICAgICAgICAgIGlmICh0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoIi4uIikpIHsKICAgICAgICAgICAgICAgIHZhciB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdCgiLyIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyAiZ28gdXAgb25lIHJvdXRlIiBpbnN0ZWFkIG9mICJnbyB1cCBvbmUKICAgICAgICAgICAgICAgIC8vIFVSTCBzZWdtZW50Ii4gIFRoaXMgaXMgYSBrZXkgZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYQogICAgICAgICAgICAgICAgLy8gbWFqb3IgcmVhc29uIHdlIGNhbGwgdGhpcyBhICJ0byIgdmFsdWUgaW5zdGVhZCBvZiBhICJocmVmIi4KCiAgICAgICAgICAgICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gIi4uIikgewogICAgICAgICAgICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKCIvIik7CiAgICAgICAgICAgICAgfSAvLyBJZiB0aGVyZSBhcmUgbW9yZSAiLi4iIHNlZ21lbnRzIHRoYW4gcGFyZW50IHJvdXRlcywgcmVzb2x2ZSByZWxhdGl2ZSB0bwogICAgICAgICAgICAgIC8vIHRoZSByb290IC8gVVJMLgoKCiAgICAgICAgICAgICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6ICIvIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsICJ0byIgaGFkIG9uZQoKICAgICAgICAgICAgdmFyIGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCA9IHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gIi8iICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoIi8iKTsgLy8gT3IgaWYgdGhpcyB3YXMgYSBsaW5rIHRvIHRoZSBjdXJyZW50IHBhdGggd2hpY2ggaGFzIGEgdHJhaWxpbmcgc2xhc2gKCiAgICAgICAgICAgIHZhciBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSAiLiIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoIi8iKTsKCiAgICAgICAgICAgIGlmICghcGF0aC5wYXRobmFtZS5lbmRzV2l0aCgiLyIpICYmIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpKSB7CiAgICAgICAgICAgICAgcGF0aC5wYXRobmFtZSArPSAiLyI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBwYXRoOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykgewogICAgICAgICAgICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHMKICAgICAgICAgICAgcmV0dXJuIHRvID09PSAiIiB8fCB0by5wYXRobmFtZSA9PT0gIiIgPyAiLyIgOiB0eXBlb2YgdG8gPT09ICJzdHJpbmciID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZSA6IHRvLnBhdGhuYW1lOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICovCgogICAgICAgICAgdmFyIHJvdXRlcl9qb2luUGF0aHMgPSAocGF0aHMpID0+IHBhdGhzLmpvaW4oIi8iKS5yZXBsYWNlKC9cL1wvKy9nLCAiLyIpOwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICovCgogICAgICAgICAgdmFyIG5vcm1hbGl6ZVBhdGhuYW1lID0gKHBhdGhuYW1lKSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cLyskLywgIiIpLnJlcGxhY2UoL15cLyovLCAiLyIpOwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICovCgogICAgICAgICAgdmFyIG5vcm1hbGl6ZVNlYXJjaCA9IChzZWFyY2gpID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSAiPyIgPyAiIiA6IHNlYXJjaC5zdGFydHNXaXRoKCI/IikgPyBzZWFyY2ggOiAiPyIgKyBzZWFyY2g7CiAgICAgICAgICAvKioKICAgICAgICAgICAqIEBwcml2YXRlCiAgICAgICAgICAgKi8KCiAgICAgICAgICB2YXIgbm9ybWFsaXplSGFzaCA9IChoYXNoKSA9PiAhaGFzaCB8fCBoYXNoID09PSAiIyIgPyAiIiA6IGhhc2guc3RhcnRzV2l0aCgiIyIpID8gaGFzaCA6ICIjIiArIGhhc2g7CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFRoaXMgaXMgYSBzaG9ydGN1dCBmb3IgY3JlYXRpbmcgYGFwcGxpY2F0aW9uL2pzb25gIHJlc3BvbnNlcy4gQ29udmVydHMgYGRhdGFgCiAgICAgICAgICAgKiB0byBKU09OIGFuZCBzZXRzIHRoZSBgQ29udGVudC1UeXBlYCBoZWFkZXIuCiAgICAgICAgICAgKi8KCiAgICAgICAgICB2YXIganNvbiA9IGZ1bmN0aW9uIGpzb24oZGF0YSwgaW5pdCkgewogICAgICAgICAgICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgaW5pdCA9IHt9OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09ICJudW1iZXIiID8gewogICAgICAgICAgICAgIHN0YXR1czogaW5pdAogICAgICAgICAgICB9IDogaW5pdDsKICAgICAgICAgICAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7CgogICAgICAgICAgICBpZiAoIWhlYWRlcnMuaGFzKCJDb250ZW50LVR5cGUiKSkgewogICAgICAgICAgICAgIGhlYWRlcnMuc2V0KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7CiAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9O3ZhcgogICAgICAgICAgcm91dGVyX0Fib3J0ZWREZWZlcnJlZEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtfaW5oZXJpdHMocm91dGVyX0Fib3J0ZWREZWZlcnJlZEVycm9yLCBfRXJyb3IpO3ZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIocm91dGVyX0Fib3J0ZWREZWZlcnJlZEVycm9yKTtmdW5jdGlvbiByb3V0ZXJfQWJvcnRlZERlZmVycmVkRXJyb3IoKSB7X2NsYXNzQ2FsbENoZWNrMih0aGlzLCByb3V0ZXJfQWJvcnRlZERlZmVycmVkRXJyb3IpO3JldHVybiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9cmV0dXJuIF9jcmVhdGVDbGFzczIocm91dGVyX0Fib3J0ZWREZWZlcnJlZEVycm9yKTt9KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO3ZhcgogICAgICAgICAgRGVmZXJyZWREYXRhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gRGVmZXJyZWREYXRhKGRhdGEsIHJlc3BvbnNlSW5pdCkge19jbGFzc0NhbGxDaGVjazIodGhpcywgRGVmZXJyZWREYXRhKTsKICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdLZXlzU2V0ID0gbmV3IFNldCgpOwogICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7CiAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZEtleXMgPSBbXTsKICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICJvYmplY3QiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLCAiZGVmZXIoKSBvbmx5IGFjY2VwdHMgcGxhaW4gb2JqZWN0cyIpOyAvLyBTZXQgdXAgYW4gQWJvcnRDb250cm9sbGVyICsgUHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHRvIGV4aXQgZWFybHkKICAgICAgICAgICAgICAvLyBjYW5jZWxsYXRpb24KCiAgICAgICAgICAgICAgdmFyIHJlamVjdDsKICAgICAgICAgICAgICB0aGlzLmFib3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChfLCByKSA9PiByZWplY3QgPSByKTsKICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7CgogICAgICAgICAgICAgIHZhciBvbkFib3J0ID0gKCkgPT4gcmVqZWN0KG5ldyByb3V0ZXJfQWJvcnRlZERlZmVycmVkRXJyb3IoIkRlZmVycmVkIGRhdGEgYWJvcnRlZCIpKTsKCiAgICAgICAgICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsID0gKCkgPT4gdGhpcy5jb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCJhYm9ydCIsIG9uQWJvcnQpOwoKICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoImFib3J0Iiwgb25BYm9ydCk7CiAgICAgICAgICAgICAgdGhpcy5kYXRhID0gT2JqZWN0LmVudHJpZXMoZGF0YSkucmVkdWNlKChhY2MsIF9yZWYpID0+IHsKICAgICAgICAgICAgICAgIHZhciBfcmVmMTMgPSBfc2xpY2VkVG9BcnJheTIoX3JlZiwgMiksa2V5ID0gX3JlZjEzWzBdLHZhbHVlID0gX3JlZjEzWzFdOwogICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCBfZGVmaW5lUHJvcGVydHkyKHt9LAogICAgICAgICAgICAgICAga2V5LCB0aGlzLnRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSkpOwoKICAgICAgICAgICAgICB9LCB7fSk7CiAgICAgICAgICAgICAgdGhpcy5pbml0ID0gcmVzcG9uc2VJbml0OwogICAgICAgICAgICB9X2NyZWF0ZUNsYXNzMihEZWZlcnJlZERhdGEsIFt7IGtleTogInRyYWNrUHJvbWlzZSIsIHZhbHVlOgoKICAgICAgICAgICAgICBmdW5jdGlvbiB0cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZEtleXMucHVzaChrZXkpOwogICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nS2V5c1NldC5hZGQoa2V5KTsgLy8gV2Ugc3RvcmUgYSBsaXR0bGUgd3JhcHBlciBwcm9taXNlIHRoYXQgd2lsbCBiZSBleHRlbmRlZCB3aXRoCiAgICAgICAgICAgICAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdAoKICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yYWNlKFt2YWx1ZSwgdGhpcy5hYm9ydFByb21pc2VdKS50aGVuKChkYXRhKSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSksIChlcnJvcikgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yKSk7IC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uCiAgICAgICAgICAgICAgICAvLyBlcnJvcnMgb3IgYWJvcnRlZCBkZWZlcnJlZCB2YWx1ZXMKCiAgICAgICAgICAgICAgICBwcm9taXNlLmNhdGNoKCgpID0+IHt9KTsKICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCAiX3RyYWNrZWQiLCB7CiAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gdHJ1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZTsKICAgICAgICAgICAgICB9IH0sIHsga2V5OiAib25TZXR0bGUiLCB2YWx1ZToKCiAgICAgICAgICAgICAgZnVuY3Rpb24gb25TZXR0bGUocHJvbWlzZSwga2V5LCBlcnJvciwgZGF0YSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlci5zaWduYWwuYWJvcnRlZCAmJiBlcnJvciBpbnN0YW5jZW9mIHJvdXRlcl9BYm9ydGVkRGVmZXJyZWRFcnJvcikgewogICAgICAgICAgICAgICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTsKICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsICJfZXJyb3IiLCB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBlcnJvcgogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvbmUpIHsKICAgICAgICAgICAgICAgICAgLy8gTm90aGluZyBsZWZ0IHRvIGFib3J0IQogICAgICAgICAgICAgICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsICJfZXJyb3IiLCB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBlcnJvcgogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpOwogICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCAiX2RhdGEiLCB7CiAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gZGF0YQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICAgICAgICB9IH0sIHsga2V5OiAiZW1pdCIsIHZhbHVlOgoKICAgICAgICAgICAgICBmdW5jdGlvbiBlbWl0KGFib3J0ZWQsIHNldHRsZWRLZXkpIHsKICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlcihhYm9ydGVkLCBzZXR0bGVkS2V5KSk7CiAgICAgICAgICAgICAgfSB9LCB7IGtleTogInN1YnNjcmliZSIsIHZhbHVlOgoKICAgICAgICAgICAgICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHsKICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcnMuYWRkKGZuKTsKICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmbik7CiAgICAgICAgICAgICAgfSB9LCB7IGtleTogImNhbmNlbCIsIHZhbHVlOgoKICAgICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWwoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTsKICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZm9yRWFjaCgodiwgaykgPT4gdGhpcy5wZW5kaW5nS2V5c1NldC5kZWxldGUoaykpOwogICAgICAgICAgICAgICAgdGhpcy5lbWl0KHRydWUpOwogICAgICAgICAgICAgIH0gfSwgeyBrZXk6ICJyZXNvbHZlRGF0YSIsIHZhbHVlOiBmdW5jdGlvbiAoKSB7dmFyIF9yZXNvbHZlRGF0YSA9IF9hc3luY1RvR2VuZXJhdG9yMiggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUyKCkubWFyaygKCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfY2FsbGVlMihzaWduYWwpIHt2YXIgYWJvcnRlZCwgb25BYm9ydDtyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZTIoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHt3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7Y2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkID0gZmFsc2U7aWYgKAoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb25lKSB7X2NvbnRleHQyLm5leHQgPSA3O2JyZWFrO30KICAgICAgICAgICAgICAgICAgICAgICAgb25BYm9ydCA9ICgpID0+IHRoaXMuY2FuY2VsKCk7CgogICAgICAgICAgICAgICAgICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcigiYWJvcnQiLCBvbkFib3J0KTtfY29udGV4dDIubmV4dCA9IDY7cmV0dXJuICgKICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUoKGFib3J0ZWQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoImFib3J0Iiwgb25BYm9ydCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWJvcnRlZCB8fCB0aGlzLmRvbmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFib3J0ZWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7Y2FzZSA2OmFib3J0ZWQgPSBfY29udGV4dDIuc2VudDtjYXNlIDc6cmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsCgoKICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnRlZCk7Y2FzZSA4OmNhc2UgImVuZCI6cmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7fX0sIF9jYWxsZWUyLCB0aGlzKTt9KSk7ZnVuY3Rpb24gcmVzb2x2ZURhdGEoX3gzKSB7cmV0dXJuIF9yZXNvbHZlRGF0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO31yZXR1cm4gcmVzb2x2ZURhdGE7fSgpIH0sIHsga2V5OiAiZG9uZSIsIGdldDoKCgogICAgICAgICAgICAgIGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBlbmRpbmdLZXlzU2V0LnNpemUgPT09IDA7CiAgICAgICAgICAgICAgfSB9LCB7IGtleTogInVud3JhcHBlZERhdGEiLCBnZXQ6CgogICAgICAgICAgICAgIGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgIHJvdXRlcl9pbnZhcmlhbnQodGhpcy5kYXRhICE9PSBudWxsICYmIHRoaXMuZG9uZSwgIkNhbiBvbmx5IHVud3JhcCBkYXRhIG9uIGluaXRpYWxpemVkIGFuZCBzZXR0bGVkIGRlZmVycmVkcyIpOwogICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkucmVkdWNlKChhY2MsIF9yZWYyKSA9PiB7CiAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTQgPSBfc2xpY2VkVG9BcnJheTIoX3JlZjIsIDIpLGtleSA9IF9yZWYxNFswXSx2YWx1ZSA9IF9yZWYxNFsxXTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCBfZGVmaW5lUHJvcGVydHkyKHt9LAogICAgICAgICAgICAgICAgICBrZXksIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSkpOwoKICAgICAgICAgICAgICAgIH0sIHt9KTsKICAgICAgICAgICAgICB9IH0sIHsga2V5OiAicGVuZGluZ0tleXMiLCBnZXQ6CgogICAgICAgICAgICAgIGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGVuZGluZ0tleXNTZXQpOwogICAgICAgICAgICAgIH0gfV0pO3JldHVybiBEZWZlcnJlZERhdGE7fSgpOwoKCgogICAgICAgICAgZnVuY3Rpb24gaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkgewogICAgICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlICYmIHZhbHVlLl90cmFja2VkID09PSB0cnVlOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHVud3JhcFRyYWNrZWRQcm9taXNlKHZhbHVlKSB7CiAgICAgICAgICAgIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHsKICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh2YWx1ZS5fZXJyb3IpIHsKICAgICAgICAgICAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fZGF0YTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZGVmZXIgPSBmdW5jdGlvbiBkZWZlcihkYXRhLCBpbml0KSB7CiAgICAgICAgICAgIGlmIChpbml0ID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBpbml0ID0ge307CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gIm51bWJlciIgPyB7CiAgICAgICAgICAgICAgc3RhdHVzOiBpbml0CiAgICAgICAgICAgIH0gOiBpbml0OwogICAgICAgICAgICByZXR1cm4gbmV3IERlZmVycmVkRGF0YShkYXRhLCByZXNwb25zZUluaXQpOwogICAgICAgICAgfTsKICAgICAgICAgIC8qKgogICAgICAgICAgICogQSByZWRpcmVjdCByZXNwb25zZS4gU2V0cyB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBgTG9jYXRpb25gIGhlYWRlci4KICAgICAgICAgICAqIERlZmF1bHRzIHRvICIzMDIgRm91bmQiLgogICAgICAgICAgICovCgogICAgICAgICAgdmFyIHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7CiAgICAgICAgICAgIGlmIChpbml0ID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBpbml0ID0gMzAyOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmVzcG9uc2VJbml0ID0gaW5pdDsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0ID09PSAibnVtYmVyIikgewogICAgICAgICAgICAgIHJlc3BvbnNlSW5pdCA9IHsKICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2VJbml0CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2VJbml0LnN0YXR1cyA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTsKICAgICAgICAgICAgaGVhZGVycy5zZXQoIkxvY2F0aW9uIiwgdXJsKTsKICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7CiAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycwogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9OwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllcwogICAgICAgICAgICovdmFyCgogICAgICAgICAgcm91dGVyX0Vycm9yUmVzcG9uc2UgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZUNsYXNzMigKICAgICAgICAgIGZ1bmN0aW9uIHJvdXRlcl9FcnJvclJlc3BvbnNlKHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaW50ZXJuYWwpIHtfY2xhc3NDYWxsQ2hlY2syKHRoaXMsIHJvdXRlcl9FcnJvclJlc3BvbnNlKTsKICAgICAgICAgICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICBpbnRlcm5hbCA9IGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCAiIjsKICAgICAgICAgICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsOwoKICAgICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTsKICAgICAgICAgICAgICB0aGlzLmVycm9yID0gZGF0YTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHgKICAgICAgICAgICAqIFJlc3BvbnNlIHRocm93IGZyb20gYW4gYWN0aW9uL2xvYWRlcgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZSkgewogICAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIHJvdXRlcl9FcnJvclJlc3BvbnNlOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciB2YWxpZE11dGF0aW9uTWV0aG9kc0FyciA9IFsicG9zdCIsICJwdXQiLCAicGF0Y2giLCAiZGVsZXRlIl07CiAgICAgICAgICB2YXIgdmFsaWRNdXRhdGlvbk1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkTXV0YXRpb25NZXRob2RzQXJyKTsKICAgICAgICAgIHZhciB2YWxpZFJlcXVlc3RNZXRob2RzQXJyID0gWyJnZXQiXS5jb25jYXQodmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIpOwogICAgICAgICAgdmFyIHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpOwogICAgICAgICAgdmFyIHJlZGlyZWN0U3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pOwogICAgICAgICAgdmFyIHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwNywgMzA4XSk7CiAgICAgICAgICB2YXIgSURMRV9OQVZJR0FUSU9OID0gewogICAgICAgICAgICBzdGF0ZTogImlkbGUiLAogICAgICAgICAgICBsb2NhdGlvbjogdW5kZWZpbmVkLAogICAgICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsCiAgICAgICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCwKICAgICAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCwKICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZAogICAgICAgICAgfTsKICAgICAgICAgIHZhciBJRExFX0ZFVENIRVIgPSB7CiAgICAgICAgICAgIHN0YXRlOiAiaWRsZSIsCiAgICAgICAgICAgIGRhdGE6IHVuZGVmaW5lZCwKICAgICAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLAogICAgICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsCiAgICAgICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsCiAgICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQKICAgICAgICAgIH07CiAgICAgICAgICB2YXIgSURMRV9CTE9DS0VSID0gewogICAgICAgICAgICBzdGF0ZTogInVuYmxvY2tlZCIsCiAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCwKICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCwKICAgICAgICAgICAgbG9jYXRpb246IHVuZGVmaW5lZAogICAgICAgICAgfTsKICAgICAgICAgIHZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAidW5kZWZpbmVkIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICJ1bmRlZmluZWQiOwogICAgICAgICAgdmFyIGlzU2VydmVyID0gIWlzQnJvd3NlcjsgLy8jZW5kcmVnaW9uCiAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgICAgLy8jcmVnaW9uIGNyZWF0ZVJvdXRlcgogICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCiAgICAgICAgICAvKioKICAgICAgICAgICAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiByb3V0ZXJfY3JlYXRlUm91dGVyKGluaXQpIHsKICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCAiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlUm91dGVyIik7CiAgICAgICAgICAgIHZhciBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcyk7IC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnkKCiAgICAgICAgICAgIHZhciB1bmxpc3Rlbkhpc3RvcnkgPSBudWxsOyAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9ucyB0byBjYWxsIG9uIGFsbCBzdGF0ZSBjaGFuZ2VzCgogICAgICAgICAgICB2YXIgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZwoKICAgICAgICAgICAgdmFyIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHJlc3RvcmF0aW9uIGtleXMKCiAgICAgICAgICAgIHZhciBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uCgogICAgICAgICAgICB2YXIgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsOyAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2UKICAgICAgICAgICAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyXwogICAgICAgICAgICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvCiAgICAgICAgICAgIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvbgogICAgICAgICAgICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdAogICAgICAgICAgICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi4KCiAgICAgICAgICAgIHZhciBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDsKICAgICAgICAgICAgdmFyIGluaXRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKTsKICAgICAgICAgICAgdmFyIGluaXRpYWxFcnJvcnMgPSBudWxsOwoKICAgICAgICAgICAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHsKICAgICAgICAgICAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3QKICAgICAgICAgICAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyCiAgICAgICAgICAgICAgdmFyIGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHsKICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB2YXIgX2dldFNob3J0Q2lyY3VpdE1hdGNoID0KCgogICAgICAgICAgICAgICAgZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKSxtYXRjaGVzID0gX2dldFNob3J0Q2lyY3VpdE1hdGNoLm1hdGNoZXMscm91dGUgPSBfZ2V0U2hvcnRDaXJjdWl0TWF0Y2gucm91dGU7CiAgICAgICAgICAgICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzOwogICAgICAgICAgICAgIGluaXRpYWxFcnJvcnMgPSBfZGVmaW5lUHJvcGVydHkyKHt9LAogICAgICAgICAgICAgIHJvdXRlLmlkLCBlcnJvcik7CgogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgaW5pdGlhbGl6ZWQgPSAhaW5pdGlhbE1hdGNoZXMuc29tZSgobSkgPT4gbS5yb3V0ZS5sb2FkZXIpIHx8IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsOwogICAgICAgICAgICB2YXIgcm91dGVyOwogICAgICAgICAgICB2YXIgc3RhdGUgPSB7CiAgICAgICAgICAgICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbiwKICAgICAgICAgICAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLAogICAgICAgICAgICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLAogICAgICAgICAgICAgIGluaXRpYWxpemVkOiBpbml0aWFsaXplZCwKICAgICAgICAgICAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sCiAgICAgICAgICAgICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZAogICAgICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsCiAgICAgICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSwKICAgICAgICAgICAgICByZXZhbGlkYXRpb246ICJpZGxlIiwKICAgICAgICAgICAgICBsb2FkZXJEYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgfHwge30sCiAgICAgICAgICAgICAgYWN0aW9uRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5hY3Rpb25EYXRhIHx8IG51bGwsCiAgICAgICAgICAgICAgZXJyb3JzOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyB8fCBpbml0aWFsRXJyb3JzLAogICAgICAgICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKCksCiAgICAgICAgICAgICAgYmxvY2tlcnM6IG5ldyBNYXAoKQogICAgICAgICAgICB9OyAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tCiAgICAgICAgICAgIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbikKCiAgICAgICAgICAgIHZhciBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDsgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3QKICAgICAgICAgICAgLy8gYmUgcmVzdG9yZWQ/CgogICAgICAgICAgICB2YXIgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlOyAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvbgoKICAgICAgICAgICAgdmFyIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjsgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYQogICAgICAgICAgICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZAoKICAgICAgICAgICAgdmFyIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBmbGFnIHRvIGZvcmNlIHJldmFsaWRhdGlvbiBvZiBhbGwgbG9hZGVyczoKICAgICAgICAgICAgLy8gIC0gc3VibWlzc2lvbnMgKGNvbXBsZXRlZCBvciBpbnRlcnJ1cHRlZCkKICAgICAgICAgICAgLy8gIC0gdXNlUmV2YWxpZGF0ZSgpCiAgICAgICAgICAgIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdCkKCiAgICAgICAgICAgIHZhciBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7IC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgcm91dGVzIHRoYXQgcmVxdWlyZSByZXZhbGlkYXRpb24gZHVlCiAgICAgICAgICAgIC8vIHRvIGEgY2FuY2VsbGVkIGRlZmVycmVkIG9uIGFjdGlvbiBzdWJtaXNzaW9uCgogICAgICAgICAgICB2YXIgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTsgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW4KICAgICAgICAgICAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uCgogICAgICAgICAgICB2YXIgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107IC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnMKCiAgICAgICAgICAgIHZhciBmZXRjaENvbnRyb2xsZXJzID0gbmV3IE1hcCgpOyAvLyBUcmFjayBsb2FkcyBiYXNlZCBvbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBzdGFydGVkCgogICAgICAgICAgICB2YXIgaW5jcmVtZW50aW5nTG9hZElkID0gMDsgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdAogICAgICAgICAgICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZAogICAgICAgICAgICAvLyBuYXZpZ2F0aW9uCgogICAgICAgICAgICB2YXIgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTsgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnMKCiAgICAgICAgICAgIHZhciBmZXRjaFJlbG9hZElkcyA9IG5ldyBNYXAoKTsgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgcmVkaXJlY3QgbmF2aWdhdGlvbnMgZnJvbSB0aGVpciBhY3Rpb25zCgogICAgICAgICAgICB2YXIgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTsgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVycwoKICAgICAgICAgICAgdmFyIGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwKCk7IC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhCiAgICAgICAgICAgIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkCiAgICAgICAgICAgIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZQogICAgICAgICAgICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuCgogICAgICAgICAgICB2YXIgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpOyAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmUKICAgICAgICAgICAgLy8gYW55IGNvbXBlbGxpbmcgdXNlIGNhc2VzIGZvciBtdWx0aS1ibG9ja2VyIHlldAoKICAgICAgICAgICAgdmFyIGFjdGl2ZUJsb2NrZXIgPSBudWxsOyAvLyBTdG9yZSBibG9ja2VyIGZ1bmN0aW9ucyBpbiBhIHNlcGFyYXRlIE1hcCBvdXRzaWRlIG9mIHJvdXRlciBzdGF0ZSBzaW5jZQogICAgICAgICAgICAvLyB3ZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBVSSBzdGF0ZSBpZiB0aGV5IGNoYW5nZQoKICAgICAgICAgICAgdmFyIGJsb2NrZXJGdW5jdGlvbnMgPSBuZXcgTWFwKCk7IC8vIEZsYWcgdG8gaWdub3JlIHRoZSBuZXh0IGhpc3RvcnkgdXBkYXRlLCBzbyB3ZSBjYW4gcmV2ZXJ0IHRoZSBVUkwgY2hhbmdlIG9uCiAgICAgICAgICAgIC8vIGEgUE9QIG5hdmlnYXRpb24gdGhhdCB3YXMgYmxvY2tlZCBieSB0aGUgdXNlciB3aXRob3V0IHRvdWNoaW5nIHJvdXRlciBzdGF0ZQoKICAgICAgICAgICAgdmFyIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7IC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuCiAgICAgICAgICAgIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjoKICAgICAgICAgICAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTsKCiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7CiAgICAgICAgICAgICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlCiAgICAgICAgICAgICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlcwogICAgICAgICAgICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oKF9yZWYpID0+IHsKICAgICAgICAgICAgICAgIHZhcgogICAgICAgICAgICAgICAgICBoaXN0b3J5QWN0aW9uID0KCgogICAgICAgICAgICAgICAgICBfcmVmLmFjdGlvbixsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sZGVsdGEgPSBfcmVmLmRlbHRhOwoKICAgICAgICAgICAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYQogICAgICAgICAgICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvbgogICAgICAgICAgICAgICAgaWYgKGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlKSB7CiAgICAgICAgICAgICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7CiAgICAgICAgICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sCiAgICAgICAgICAgICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb24sCiAgICAgICAgICAgICAgICAgIGhpc3RvcnlBY3Rpb246IGhpc3RvcnlBY3Rpb24KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGlmIChibG9ja2VyS2V5KSB7CiAgICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIFVSTCB0byBtYXRjaCB0aGUgY3VycmVudCBVSSwgYnV0IGRvbid0IHVwZGF0ZSByb3V0ZXIgc3RhdGUKICAgICAgICAgICAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSB0cnVlOwogICAgICAgICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7IC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZQoKICAgICAgICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICJibG9ja2VkIiwKICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sCgogICAgICAgICAgICAgICAgICAgIHByb2NlZWQ6IGZ1bmN0aW9uIHByb2NlZWQoKSB7CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICJwcm9jZWVkaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24KICAgICAgICAgICAgICAgICAgICAgIH0pOyAvLyBSZS1kbyB0aGUgc2FtZSBQT1AgbmF2aWdhdGlvbiB3ZSBqdXN0IGJsb2NrZWQKCiAgICAgICAgICAgICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpOwogICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSk7CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVTdGF0ZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrZXJzOiBuZXcgTWFwKHJvdXRlci5zdGF0ZS5ibG9ja2VycykKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbik7CiAgICAgICAgICAgICAgfSk7IC8vIEtpY2sgb2ZmIGluaXRpYWwgZGF0YSBsb2FkIGlmIG5lZWRlZC4gIFVzZSBQb3AgdG8gYXZvaWQgbW9kaWZ5aW5nIGhpc3RvcnkKCiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkgewogICAgICAgICAgICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiByb3V0ZXI7CiAgICAgICAgICAgIH0gLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzCgoKICAgICAgICAgICAgZnVuY3Rpb24gZGlzcG9zZSgpIHsKICAgICAgICAgICAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7CiAgICAgICAgICAgICAgICB1bmxpc3Rlbkhpc3RvcnkoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHN1YnNjcmliZXJzLmNsZWFyKCk7CiAgICAgICAgICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpOwogICAgICAgICAgICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTsKICAgICAgICAgICAgICBzdGF0ZS5ibG9ja2Vycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUJsb2NrZXIoa2V5KSk7CiAgICAgICAgICAgIH0gLy8gU3Vic2NyaWJlIHRvIHN0YXRlIHVwZGF0ZXMgZm9yIHRoZSByb3V0ZXIKCgogICAgICAgICAgICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHsKICAgICAgICAgICAgICBzdWJzY3JpYmVycy5hZGQoZm4pOwogICAgICAgICAgICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pOwogICAgICAgICAgICB9IC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2UKCgogICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShuZXdTdGF0ZSkgewogICAgICAgICAgICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBuZXdTdGF0ZSk7CiAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlcihzdGF0ZSkpOwogICAgICAgICAgICB9IC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OCiAgICAgICAgICAgIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuCiAgICAgICAgICAgIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbQogICAgICAgICAgICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTgogICAgICAgICAgICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZQoKCiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUpIHsKICAgICAgICAgICAgICB2YXIgX2xvY2F0aW9uJHN0YXRlLCBfbG9jYXRpb24kc3RhdGUyOwoKICAgICAgICAgICAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZToKICAgICAgICAgICAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlCiAgICAgICAgICAgICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb24KICAgICAgICAgICAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGUKICAgICAgICAgICAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdAogICAgICAgICAgICAgIHZhciBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gImxvYWRpbmciICYmICgoX2xvY2F0aW9uJHN0YXRlID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUuX2lzUmVkaXJlY3QpICE9PSB0cnVlOwogICAgICAgICAgICAgIHZhciBhY3Rpb25EYXRhOwoKICAgICAgICAgICAgICBpZiAobmV3U3RhdGUuYWN0aW9uRGF0YSkgewogICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG5ld1N0YXRlLmFjdGlvbkRhdGEpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgYWN0aW9uRGF0YSA9IG5ld1N0YXRlLmFjdGlvbkRhdGE7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAvLyBFbXB0eSBhY3Rpb25EYXRhIC0+IGNsZWFyIHByaW9yIGFjdGlvbkRhdGEgZHVlIHRvIGFuIGFjdGlvbiBlcnJvcgogICAgICAgICAgICAgICAgICBhY3Rpb25EYXRhID0gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQWN0aW9uUmVsb2FkKSB7CiAgICAgICAgICAgICAgICAvLyBLZWVwIHRoZSBjdXJyZW50IGRhdGEgaWYgd2UncmUgd3JhcHBpbmcgdXAgdGhlIGFjdGlvbiByZWxvYWQKICAgICAgICAgICAgICAgIGFjdGlvbkRhdGEgPSBzdGF0ZS5hY3Rpb25EYXRhOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBDbGVhciBhY3Rpb25EYXRhIG9uIGFueSBvdGhlciBjb21wbGV0ZWQgbmF2aWdhdGlvbnMKICAgICAgICAgICAgICAgIGFjdGlvbkRhdGEgPSBudWxsOwogICAgICAgICAgICAgIH0gLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXMKCgogICAgICAgICAgICAgIHZhciBsb2FkZXJEYXRhID0gbmV3U3RhdGUubG9hZGVyRGF0YSA/IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5sb2FkZXJEYXRhLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IFtdLCBuZXdTdGF0ZS5lcnJvcnMpIDogc3RhdGUubG9hZGVyRGF0YTsgLy8gT24gYSBzdWNjZXNzZnVsIG5hdmlnYXRpb24gd2UgY2FuIGFzc3VtZSB3ZSBnb3QgdGhyb3VnaCBhbGwgYmxvY2tlcnMKICAgICAgICAgICAgICAvLyBzbyB3ZSBjYW4gc3RhcnQgZnJlc2gKICAgICAgICAgICAgICB2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMigKICAgICAgICAgICAgICAgIGJsb2NrZXJGdW5jdGlvbnMpLF9zdGVwNDt0cnkge2ZvciAoX2l0ZXJhdG9yNC5zKCk7ICEoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uKCkpLmRvbmU7KSB7dmFyIF9zdGVwNCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5Mihfc3RlcDQudmFsdWUsIDEpLGtleSA9IF9zdGVwNCR2YWx1ZVswXTsKICAgICAgICAgICAgICAgICAgZGVsZXRlQmxvY2tlcihrZXkpOwogICAgICAgICAgICAgICAgfSAvLyBBbHdheXMgcmVzcGVjdCB0aGUgdXNlciBmbGFnLiAgT3RoZXJ3aXNlIGRvbid0IHJlc2V0IG9uIG11dGF0aW9uCiAgICAgICAgICAgICAgICAvLyBzdWJtaXNzaW9uIG5hdmlnYXRpb25zIHVubGVzcyB0aGV5IHJlZGlyZWN0CiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7X2l0ZXJhdG9yNC5lKGVycik7fSBmaW5hbGx5IHtfaXRlcmF0b3I0LmYoKTt9CgogICAgICAgICAgICAgIHZhciBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIHx8IHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiAoKF9sb2NhdGlvbiRzdGF0ZTIgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZTIuX2lzUmVkaXJlY3QpICE9PSB0cnVlOwogICAgICAgICAgICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwgewogICAgICAgICAgICAgICAgYWN0aW9uRGF0YTogYWN0aW9uRGF0YSwKICAgICAgICAgICAgICAgIGxvYWRlckRhdGE6IGxvYWRlckRhdGEsCiAgICAgICAgICAgICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLAogICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLAogICAgICAgICAgICAgICAgaW5pdGlhbGl6ZWQ6IHRydWUsCiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sCiAgICAgICAgICAgICAgICByZXZhbGlkYXRpb246ICJpZGxlIiwKICAgICAgICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSwKICAgICAgICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcHJldmVudFNjcm9sbFJlc2V0LAogICAgICAgICAgICAgICAgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpCiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA7ZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgO2Vsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5QdXNoKSB7CiAgICAgICAgICAgICAgICBpbml0Lmhpc3RvcnkucHVzaChsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlJlcGxhY2UpIHsKICAgICAgICAgICAgICAgIGluaXQuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7CiAgICAgICAgICAgICAgfSAvLyBSZXNldCBzdGF0ZWZ1bCBuYXZpZ2F0aW9uIHZhcnMKCgogICAgICAgICAgICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wOwogICAgICAgICAgICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTsKICAgICAgICAgICAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTsKICAgICAgICAgICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7CiAgICAgICAgICAgICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTsKICAgICAgICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTsKICAgICAgICAgICAgfSAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNICiAgICAgICAgICAgIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uCiAgICAgICAgICAgIGZ1bmN0aW9uCgogICAgICAgICAgICBuYXZpZ2F0ZShfeDQsIF94NSkge3JldHVybiBfbmF2aWdhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAgICAgICAgICAgLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXMKICAgICAgICAgICAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvICJzdWNjZWVkIiBieSBjYWxsaW5nIGFsbAogICAgICAgICAgICAvLyBsb2FkZXJzIGR1cmluZyB0aGUgbmV4dCBsb2FkZXIgcm91bmQKICAgICAgICAgICAgZnVuY3Rpb24gX25hdmlnYXRlKCkge19uYXZpZ2F0ZSA9IF9hc3luY1RvR2VuZXJhdG9yMiggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUyKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMyh0bywgb3B0cykge3ZhciBfbm9ybWFsaXplTmF2aWdhdGVPcHQyLCBwYXRoLCBzdWJtaXNzaW9uLCBlcnJvciwgY3VycmVudExvY2F0aW9uLCBuZXh0TG9jYXRpb24sIHVzZXJSZXBsYWNlLCBoaXN0b3J5QWN0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIGJsb2NrZXJLZXk7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkge2Nhc2UgMDppZiAoISh0eXBlb2YgdG8gPT09ICJudW1iZXIiKSkge19jb250ZXh0My5uZXh0ID0gMzticmVhazt9aW5pdC5oaXN0b3J5LmdvKHRvKTtyZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIik7Y2FzZSAzOl9ub3JtYWxpemVOYXZpZ2F0ZU9wdDIgPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnModG8sIG9wdHMpLCBwYXRoID0gX25vcm1hbGl6ZU5hdmlnYXRlT3B0Mi5wYXRoLCBzdWJtaXNzaW9uID0gX25vcm1hbGl6ZU5hdmlnYXRlT3B0Mi5zdWJtaXNzaW9uLCBlcnJvciA9IF9ub3JtYWxpemVOYXZpZ2F0ZU9wdDIuZXJyb3I7Y3VycmVudExvY2F0aW9uID0gc3RhdGUubG9jYXRpb247bmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7IC8vIFdoZW4gdXNpbmcgbmF2aWdhdGUgYXMgYSBQVVNIL1JFUExBQ0Ugd2UgYXJlbid0IHJlYWRpbmcgYW4gYWxyZWFkeS1lbmNvZGVkCiAgICAgICAgICAgICAgICAgICAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yCiAgICAgICAgICAgICAgICAgICAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbAogICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNhbWUgZW5jb2Rpbmcgd2UnZCBnZXQgZnJvbSBhIGhpc3RvcnkucHVzaFN0YXRlL3dpbmRvdy5sb2NhdGlvbiByZWFkCiAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5CiAgICAgICAgICAgICAgICAgICAgICBuZXh0TG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSk7dXNlclJlcGxhY2UgPSBvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsID8gb3B0cy5yZXBsYWNlIDogdW5kZWZpbmVkO2hpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUHVzaDtpZiAodXNlclJlcGxhY2UgPT09IHRydWUpIHtoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7fSBlbHNlIGlmICh1c2VyUmVwbGFjZSA9PT0gZmFsc2UpIDtlbHNlIGlmIChzdWJtaXNzaW9uICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpICYmIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2gpIHsvLyBCeSBkZWZhdWx0IG9uIHN1Ym1pc3Npb25zIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uIHdlIFJFUExBQ0Ugc28gdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvcgogICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAvLyBhY3Rpb24vbG9hZGVyIHRoaXMgd2lsbCBiZSBpZ25vcmVkIGFuZCB0aGUgcmVkaXJlY3Qgd2lsbCBiZSBhIFBVU0gKICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO31wcmV2ZW50U2Nyb2xsUmVzZXQgPSBvcHRzICYmICJwcmV2ZW50U2Nyb2xsUmVzZXQiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHsgY3VycmVudExvY2F0aW9uOiBjdXJyZW50TG9jYXRpb24sIG5leHRMb2NhdGlvbjogbmV4dExvY2F0aW9uLCBoaXN0b3J5QWN0aW9uOiBoaXN0b3J5QWN0aW9uIH0pO2lmICghYmxvY2tlcktleSkge19jb250ZXh0My5uZXh0ID0gMTU7YnJlYWs7fSAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGUKICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwgeyBzdGF0ZTogImJsb2NrZWQiLCBsb2NhdGlvbjogbmV4dExvY2F0aW9uLCBwcm9jZWVkOiBmdW5jdGlvbiBwcm9jZWVkKCkge3VwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwgeyBzdGF0ZTogInByb2NlZWRpbmciLCBwcm9jZWVkOiB1bmRlZmluZWQsIHJlc2V0OiB1bmRlZmluZWQsIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24gfSk7IC8vIFNlbmQgdGhlIHNhbWUgbmF2aWdhdGlvbiB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGUodG8sIG9wdHMpO30sIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtkZWxldGVCbG9ja2VyKGJsb2NrZXJLZXkpO3VwZGF0ZVN0YXRlKHsgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpIH0pO30gfSk7cmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMTU6X2NvbnRleHQzLm5leHQgPSAxNztyZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIG5leHRMb2NhdGlvbiwgeyBzdWJtaXNzaW9uOiBzdWJtaXNzaW9uLCAvLyBTZW5kIHRocm91Z2ggdGhlIGZvcm1EYXRhIHNlcmlhbGl6YXRpb24gZXJyb3IgaWYgd2UgaGF2ZSBvbmUgc28gd2UgY2FuCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbmRlciBhdCB0aGUgcmlnaHQgZXJyb3IgYm91bmRhcnkgYWZ0ZXIgd2UgbWF0Y2ggcm91dGVzCiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdFcnJvcjogZXJyb3IsIHByZXZlbnRTY3JvbGxSZXNldDogcHJldmVudFNjcm9sbFJlc2V0LCByZXBsYWNlOiBvcHRzICYmIG9wdHMucmVwbGFjZSB9KTtjYXNlIDE3OnJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDMuc2VudCk7Y2FzZSAxODpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDMuc3RvcCgpO319LCBfY2FsbGVlMyk7fSkpO3JldHVybiBfbmF2aWdhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24gcmV2YWxpZGF0ZSgpIHtpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO3VwZGF0ZVN0YXRlKHsgcmV2YWxpZGF0aW9uOiAibG9hZGluZyIgfSk7IC8vIElmIHdlJ3JlIGN1cnJlbnRseSBzdWJtaXR0aW5nIGFuIGFjdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBzdGFydCBhIG5ldwogICAgICAgICAgICAgIC8vIG5hdmlnYXRpb24sIHdlJ2xsIGp1c3QgbGV0IHRoZSBmb2xsb3cgdXAgbG9hZGVyIGV4ZWN1dGlvbiBjYWxsIGFsbCBsb2FkZXJzCiAgICAgICAgICAgICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09ICJzdWJtaXR0aW5nIikge3JldHVybjt9IC8vIElmIHdlJ3JlIGN1cnJlbnRseSBpbiBhbiBpZGxlIHN0YXRlLCBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uIGZvciB0aGUgY3VycmVudAogICAgICAgICAgICAgIC8vIGFjdGlvbi9sb2NhdGlvbiBhbmQgbWFyayBpdCBhcyB1bmludGVycnVwdGVkLCB3aGljaCB3aWxsIHNraXAgdGhlIGhpc3RvcnkKICAgICAgICAgICAgICAvLyB1cGRhdGUgaW4gY29tcGxldGVOYXZpZ2F0aW9uCiAgICAgICAgICAgICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09ICJpZGxlIikge3N0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwgeyBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW4gYSBsb2FkaW5nIHN0YXRlLCBqdXN0IHN0YXJ0IGEgbmV3CiAgICAgICAgICAgICAgLy8gbmF2aWdhdGlvbiB0byB0aGUgbmF2aWdhdGlvbi5sb2NhdGlvbiBidXQgZG8gbm90IHRyaWdnZXIgYW4gdW5pbnRlcnJ1cHRlZAogICAgICAgICAgICAgIC8vIHJldmFsaWRhdGlvbiBzbyB0aGF0IGhpc3RvcnkgY29ycmVjdGx5IHVwZGF0ZXMgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXMKCgogICAgICAgICAgICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHsKICAgICAgICAgICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvbgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhCiAgICAgICAgICAgIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3QKICAgICAgICAgICAgLy8gbmF2aWdhdGlvbgogICAgICAgICAgICBmdW5jdGlvbgoKICAgICAgICAgICAgc3RhcnROYXZpZ2F0aW9uKF94NiwgX3g3LCBfeDgpIHtyZXR1cm4gX3N0YXJ0TmF2aWdhdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO30KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgogICAgICAgICAgICAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGUKICAgICAgICAgICAgLy8gcmVkaXJlY3RzL2Vycm9ycwogICAgICAgICAgICBmdW5jdGlvbiBfc3RhcnROYXZpZ2F0aW9uKCkge19zdGFydE5hdmlnYXRpb24gPSBfYXN5bmNUb0dlbmVyYXRvcjIoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lMigpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHt2YXIgbG9hZGluZ05hdmlnYXRpb24sIG1hdGNoZXMsIF9lcnJvciwgX2dldFNob3J0Q2lyY3VpdE1hdGNoMiwgbm90Rm91bmRNYXRjaGVzLCBfcm91dGUsIHJlcXVlc3QsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IsIGFjdGlvbk91dHB1dCwgbmF2aWdhdGlvbiwgX3lpZWxkJGhhbmRsZUxvYWRlcnMsIHNob3J0Q2lyY3VpdGVkLCBsb2FkZXJEYXRhLCBlcnJvcnM7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge2Nhc2UgMDogLy8gQWJvcnQgYW55IGluLXByb2dyZXNzIG5hdmlnYXRpb25zIGFuZCBzdGFydCBhIG5ldyBvbmUuIFVuc2V0IGFueSBvbmdvaW5nCiAgICAgICAgICAgICAgICAgICAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXMKICAgICAgICAgICAgICAgICAgICAgIC8vIG5ldyBuYXZpZ2F0aW9uIHRvIHVwZGF0ZSBoaXN0b3J5IG5vcm1hbGx5CiAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7cGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtwZW5kaW5nQWN0aW9uID0gaGlzdG9yeUFjdGlvbjtpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSAob3B0cyAmJiBvcHRzLnN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgPT09IHRydWU7IC8vIFNhdmUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiwKICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0cmFjayB3aGV0aGVyIHdlIHNob3VsZCByZXNldCBzY3JvbGwgb24gY29tcGxldGlvbgogICAgICAgICAgICAgICAgICAgICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO2xvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjttYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGluaXQuYmFzZW5hbWUpOyAvLyBTaG9ydCBjaXJjdWl0IHdpdGggYSA0MDQgb24gdGhlIHJvb3QgZXJyb3IgYm91bmRhcnkgaWYgd2UgbWF0Y2ggbm90aGluZwogICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHtfY29udGV4dDQubmV4dCA9IDE0O2JyZWFrO31fZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUgfSk7X2dldFNob3J0Q2lyY3VpdE1hdGNoMiA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyksIG5vdEZvdW5kTWF0Y2hlcyA9IF9nZXRTaG9ydENpcmN1aXRNYXRjaDIubWF0Y2hlcywgX3JvdXRlID0gX2dldFNob3J0Q2lyY3VpdE1hdGNoMi5yb3V0ZTsgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzCiAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKTtjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHsgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLCBsb2FkZXJEYXRhOiB7fSwgZXJyb3JzOiBfZGVmaW5lUHJvcGVydHkyKHt9LCBfcm91dGUuaWQsIF9lcnJvcikgfSk7cmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMTQ6aWYgKCFpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikpIHtfY29udGV4dDQubmV4dCA9IDE3O2JyZWFrO31jb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHsgbWF0Y2hlczogbWF0Y2hlcyB9KTtyZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIik7Y2FzZSAxNzogLy8gQ3JlYXRlIGEgY29udHJvbGxlci9SZXF1ZXN0IGZvciB0aGlzIG5hdmlnYXRpb24KICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtyZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBsb2NhdGlvbiwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbCwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24pO2lmICghKG9wdHMgJiYgb3B0cy5wZW5kaW5nRXJyb3IpKSB7X2NvbnRleHQ0Lm5leHQgPSAyMzticmVhazt9IC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nRXJyb3IsIGl0IG1lYW5zIHRoZSB1c2VyIGF0dGVtcHRlZCBhIEdFVCBzdWJtaXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIGJpbmFyeSBGb3JtRGF0YSBzbyBhc3NpZ24gaGVyZSBhbmQgc2tpcCB0byBoYW5kbGVMb2FkZXJzLiAgVGhhdAogICAgICAgICAgICAgICAgICAgICAgLy8gd2F5IHdlIGhhbmRsZSBjYWxsaW5nIGxvYWRlcnMgYWJvdmUgdGhlIGJvdW5kYXJ5IGV0Yy4gIEl0J3Mgbm90IHJlYWxseQogICAgICAgICAgICAgICAgICAgICAgLy8gZGlmZmVyZW50IGZyb20gYW4gYWN0aW9uRXJyb3IgaW4gdGhhdCBzZW5zZS4KICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdFcnJvciA9IF9kZWZpbmVQcm9wZXJ0eTIoe30sIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcykucm91dGUuaWQsIG9wdHMucGVuZGluZ0Vycm9yKTtfY29udGV4dDQubmV4dCA9IDM0O2JyZWFrO2Nhc2UgMjM6aWYgKCEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7X2NvbnRleHQ0Lm5leHQgPSAzNDticmVhazt9X2NvbnRleHQ0Lm5leHQgPSAyNjtyZXR1cm4gaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24sIG1hdGNoZXMsIHsgcmVwbGFjZTogb3B0cy5yZXBsYWNlIH0pO2Nhc2UgMjY6YWN0aW9uT3V0cHV0ID0gX2NvbnRleHQ0LnNlbnQ7aWYgKCFhY3Rpb25PdXRwdXQuc2hvcnRDaXJjdWl0ZWQpIHtfY29udGV4dDQubmV4dCA9IDI5O2JyZWFrO31yZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIik7Y2FzZSAyOTpwZW5kaW5nQWN0aW9uRGF0YSA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRGF0YTtwZW5kaW5nRXJyb3IgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkVycm9yO25hdmlnYXRpb24gPSBfZXh0ZW5kcyh7IHN0YXRlOiAibG9hZGluZyIsIGxvY2F0aW9uOiBsb2NhdGlvbiB9LCBvcHRzLnN1Ym1pc3Npb24pO2xvYWRpbmdOYXZpZ2F0aW9uID0gbmF2aWdhdGlvbjsgLy8gQ3JlYXRlIGEgR0VUIHJlcXVlc3QgZm9yIHRoZSBsb2FkZXJzCiAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHsgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbCB9KTtjYXNlIDM0Ol9jb250ZXh0NC5uZXh0ID0gMzY7cmV0dXJuIGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIGxvYWRpbmdOYXZpZ2F0aW9uLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO2Nhc2UgMzY6X3lpZWxkJGhhbmRsZUxvYWRlcnMgPSBfY29udGV4dDQuc2VudDtzaG9ydENpcmN1aXRlZCA9IF95aWVsZCRoYW5kbGVMb2FkZXJzLnNob3J0Q2lyY3VpdGVkO2xvYWRlckRhdGEgPSBfeWllbGQkaGFuZGxlTG9hZGVycy5sb2FkZXJEYXRhO2Vycm9ycyA9IF95aWVsZCRoYW5kbGVMb2FkZXJzLmVycm9ycztpZiAoIXNob3J0Q2lyY3VpdGVkKSB7X2NvbnRleHQ0Lm5leHQgPSA0MjticmVhazt9cmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIpO2Nhc2UgNDI6IC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmCiAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHkKICAgICAgICAgICAgICAgICAgICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvbgogICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHsgbWF0Y2hlczogbWF0Y2hlcyB9LCBwZW5kaW5nQWN0aW9uRGF0YSA/IHsgYWN0aW9uRGF0YTogcGVuZGluZ0FjdGlvbkRhdGEgfSA6IHt9LCB7IGxvYWRlckRhdGE6IGxvYWRlckRhdGEsIGVycm9yczogZXJyb3JzIH0pKTtjYXNlIDQ0OmNhc2UgImVuZCI6cmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7fX0sIF9jYWxsZWU0KTt9KSk7cmV0dXJuIF9zdGFydE5hdmlnYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24gaGFuZGxlQWN0aW9uKF94OSwgX3gxMCwgX3gxMSwgX3gxMiwgX3gxMykge3JldHVybiBfaGFuZGxlQWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fQoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgogICAgICAgICAgICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsCiAgICAgICAgICAgIC8vIGVycm9ycywgZXRjLgogICAgICAgICAgICBmdW5jdGlvbiBfaGFuZGxlQWN0aW9uKCkge19oYW5kbGVBY3Rpb24gPSBfYXN5bmNUb0dlbmVyYXRvcjIoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lMigpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHt2YXIgbmF2aWdhdGlvbiwgcmVzdWx0LCBhY3Rpb25NYXRjaCwgcmVwbGFjZSwgYm91bmRhcnlNYXRjaDtyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZTIoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHt3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7Y2FzZSAwOmludGVycnVwdEFjdGl2ZUxvYWRzKCk7IC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGUKICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb24gPSBfZXh0ZW5kcyh7IHN0YXRlOiAic3VibWl0dGluZyIsIGxvY2F0aW9uOiBsb2NhdGlvbiB9LCBzdWJtaXNzaW9uKTt1cGRhdGVTdGF0ZSh7IG5hdmlnYXRpb246IG5hdmlnYXRpb24gfSk7IC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO2lmIChhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24pIHtfY29udGV4dDUubmV4dCA9IDg7YnJlYWs7fXJlc3VsdCA9IHsgdHlwZTogUmVzdWx0VHlwZS5lcnJvciwgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7IG1ldGhvZDogcmVxdWVzdC5tZXRob2QsIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSwgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWQgfSkgfTtfY29udGV4dDUubmV4dCA9IDEzO2JyZWFrO2Nhc2UgODpfY29udGV4dDUubmV4dCA9IDEwO3JldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oImFjdGlvbiIsIHJlcXVlc3QsIGFjdGlvbk1hdGNoLCBtYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpO2Nhc2UgMTA6cmVzdWx0ID0gX2NvbnRleHQ1LnNlbnQ7aWYgKCFyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7X2NvbnRleHQ1Lm5leHQgPSAxMzticmVhazt9cmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIHsgc2hvcnRDaXJjdWl0ZWQ6IHRydWUgfSk7Y2FzZSAxMzppZiAoIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge19jb250ZXh0NS5uZXh0ID0gMTg7YnJlYWs7fWlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7cmVwbGFjZSA9IG9wdHMucmVwbGFjZTt9IGVsc2Ugey8vIElmIHRoZSB1c2VyIGRpZG4ndCBleHBsaWNpdHkgaW5kaWNhdGUgcmVwbGFjZSBiZWhhdmlvciwgcmVwbGFjZSBpZgogICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSByZWRpcmVjdGVkIHRvIHRoZSBleGFjdCBzYW1lIGxvY2F0aW9uIHdlJ3JlIGN1cnJlbnRseSBhdCB0byBhdm9pZAogICAgICAgICAgICAgICAgICAgICAgICAvLyBkb3VibGUgYmFjay1idXR0b25zCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2UgPSByZXN1bHQubG9jYXRpb24gPT09IHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lICsgc3RhdGUubG9jYXRpb24uc2VhcmNoO31fY29udGV4dDUubmV4dCA9IDE3O3JldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVzdWx0LCB7IHN1Ym1pc3Npb246IHN1Ym1pc3Npb24sIHJlcGxhY2U6IHJlcGxhY2UgfSk7Y2FzZSAxNzpyZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgeyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9KTtjYXNlIDE4OmlmICghaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7X2NvbnRleHQ1Lm5leHQgPSAyMjticmVhazt9IC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVycwogICAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvbgogICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpOyAvLyBCeSBkZWZhdWx0LCBhbGwgc3VibWlzc2lvbnMgYXJlIFJFUExBQ0UgbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGUKICAgICAgICAgICAgICAgICAgICAgIC8vIGFjdGlvbiB0aHJldyBhbiBlcnJvciB0aGF0J2xsIGJlIHJlbmRlcmVkIGluIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbAogICAgICAgICAgICAgICAgICAgICAgLy8gYmFjayB0byBQVVNIIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0aGUgYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG8KICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBwcmUtc3VibWlzc2lvbiBmb3JtIGxvY2F0aW9uIHRvIHRyeSBhZ2FpbgogICAgICAgICAgICAgICAgICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlB1c2g7fXJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCB7IC8vIFNlbmQgYmFjayBhbiBlbXB0eSBvYmplY3Qgd2UgY2FuIHVzZSB0byBjbGVhciBvdXQgYW55IHByaW9yIGFjdGlvbkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHt9LCBwZW5kaW5nQWN0aW9uRXJyb3I6IF9kZWZpbmVQcm9wZXJ0eTIoe30sIGJvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdC5lcnJvcikgfSk7Y2FzZSAyMjppZiAoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge19jb250ZXh0NS5uZXh0ID0gMjQ7YnJlYWs7fXRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7IHR5cGU6ICJkZWZlci1hY3Rpb24iIH0pO2Nhc2UgMjQ6cmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIHsgcGVuZGluZ0FjdGlvbkRhdGE6IF9kZWZpbmVQcm9wZXJ0eTIoe30sIGFjdGlvbk1hdGNoLnJvdXRlLmlkLCByZXN1bHQuZGF0YSkgfSk7Y2FzZSAyNTpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDUuc3RvcCgpO319LCBfY2FsbGVlNSk7fSkpO3JldHVybiBfaGFuZGxlQWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIGhhbmRsZUxvYWRlcnMoX3gxNCwgX3gxNSwgX3gxNiwgX3gxNywgX3gxOCwgX3gxOSwgX3gyMCwgX3gyMSkge3JldHVybiBfaGFuZGxlTG9hZGVycy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO31mdW5jdGlvbiBfaGFuZGxlTG9hZGVycygpIHtfaGFuZGxlTG9hZGVycyA9IF9hc3luY1RvR2VuZXJhdG9yMiggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUyKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNihyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgb3ZlcnJpZGVOYXZpZ2F0aW9uLCBzdWJtaXNzaW9uLCByZXBsYWNlLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7dmFyIGxvYWRpbmdOYXZpZ2F0aW9uLCBuYXZpZ2F0aW9uLCBhY3RpdmVTdWJtaXNzaW9uLCBfZ2V0TWF0Y2hlc1RvTG9hZCwgX2dldE1hdGNoZXNUb0xvYWQyLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgYWN0aW9uRGF0YSwgX3lpZWxkJGNhbGxMb2FkZXJzQW5kLCByZXN1bHRzLCBsb2FkZXJSZXN1bHRzLCBmZXRjaGVyUmVzdWx0cywgcmVkaXJlY3QsIF9wcm9jZXNzTG9hZGVyRGF0YSwgbG9hZGVyRGF0YSwgZXJyb3JzLCBkaWRBYm9ydEZldGNoTG9hZHM7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkge2Nhc2UgMDogLy8gRmlndXJlIG91dCB0aGUgcmlnaHQgbmF2aWdhdGlvbiB3ZSB3YW50IHRvIHVzZSBmb3IgZGF0YSBsb2FkaW5nCiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbjtpZiAoIWxvYWRpbmdOYXZpZ2F0aW9uKSB7bmF2aWdhdGlvbiA9IF9leHRlbmRzKHsgc3RhdGU6ICJsb2FkaW5nIiwgbG9jYXRpb246IGxvY2F0aW9uLCBmb3JtTWV0aG9kOiB1bmRlZmluZWQsIGZvcm1BY3Rpb246IHVuZGVmaW5lZCwgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCwgZm9ybURhdGE6IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgICAgICAgICB9LCBzdWJtaXNzaW9uKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gbmF2aWdhdGlvbjsKICAgICAgICAgICAgICAgICAgICAgIH0gLy8gSWYgdGhpcyB3YXMgYSByZWRpcmVjdCBmcm9tIGFuIGFjdGlvbiB3ZSBkb24ndCBoYXZlIGEgInN1Ym1pc3Npb24iIGJ1dAogICAgICAgICAgICAgICAgICAgICAgLy8gd2UgaGF2ZSBpdCBvbiB0aGUgbG9hZGluZyBuYXZpZ2F0aW9uIHNvIHVzZSB0aGF0IGlmIGF2YWlsYWJsZQoKCiAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiA/IHN1Ym1pc3Npb24gOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtTWV0aG9kICYmIGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1BY3Rpb24gJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybURhdGEgJiYgbG9hZGluZ05hdmlnYXRpb24uZm9ybUVuY1R5cGUgPyB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1NZXRob2Q6IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1NZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1BY3Rpb246IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1BY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUVuY1R5cGU6IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1FbmNUeXBlCiAgICAgICAgICAgICAgICAgICAgICB9IDogdW5kZWZpbmVkO19nZXRNYXRjaGVzVG9Mb2FkID0KICAgICAgICAgICAgICAgICAgICAgIGdldE1hdGNoZXNUb0xvYWQoaW5pdC5oaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgYWN0aXZlU3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IsIGZldGNoTG9hZE1hdGNoZXMpLCBfZ2V0TWF0Y2hlc1RvTG9hZDIgPSBfc2xpY2VkVG9BcnJheTIoX2dldE1hdGNoZXNUb0xvYWQsIDIpLCBtYXRjaGVzVG9Mb2FkID0gX2dldE1hdGNoZXNUb0xvYWQyWzBdLCByZXZhbGlkYXRpbmdGZXRjaGVycyA9IF9nZXRNYXRjaGVzVG9Mb2FkMlsxXTsgLy8gQ2FuY2VsIHBlbmRpbmcgZGVmZXJyZWRzIGZvciBuby1sb25nZXItbWF0Y2hlZCByb3V0ZXMgb3Igcm91dGVzIHdlJ3JlCiAgICAgICAgICAgICAgICAgICAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3AKCiAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKHJvdXRlSWQpID0+ICEobWF0Y2hlcyAmJiBtYXRjaGVzLnNvbWUoKG0pID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fCBtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZSgobSkgPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4KICAgICAgICAgICAgICAgICAgICAgIGlmICghKAogICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDAgJiYgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID09PSAwKSkge19jb250ZXh0Ni5uZXh0ID0gODticmVhazt9CiAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlczogbWF0Y2hlcywKICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyRGF0YToge30sCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbAogICAgICAgICAgICAgICAgICAgICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhCiAgICAgICAgICAgICAgICAgICAgICB9IDoge30pKTtyZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0pO2Nhc2UgODoKICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlCiAgICAgICAgICAgICAgICAgICAgICAvLyBzdGF0ZS4gIElmIG5vdCwgd2UgbmVlZCB0byBzd2l0Y2ggdG8gb3VyIGxvYWRpbmcgc3RhdGUgYW5kIGxvYWQgZGF0YSwKICAgICAgICAgICAgICAgICAgICAgIC8vIHByZXNlcnZpbmcgYW55IG5ldyBhY3Rpb24gZGF0YSBvciBleGlzdGluZyBhY3Rpb24gZGF0YSAoaW4gdGhlIGNhc2Ugb2YKICAgICAgICAgICAgICAgICAgICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpCgoKICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKF9yZWYyKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxNSA9IF9zbGljZWRUb0FycmF5MihfcmVmMiwgMSksa2V5ID0gX3JlZjE1WzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogImxvYWRpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZmV0Y2hlciAmJiBmZXRjaGVyLmRhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgIjogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25EYXRhID0gcGVuZGluZ0FjdGlvbkRhdGEgfHwgc3RhdGUuYWN0aW9uRGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IGxvYWRpbmdOYXZpZ2F0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGFjdGlvbkRhdGEgPyBPYmplY3Qua2V5cyhhY3Rpb25EYXRhKS5sZW5ndGggPT09IDAgPyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uRGF0YTogbnVsbAogICAgICAgICAgICAgICAgICAgICAgICB9IDogewogICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkRhdGE6IGFjdGlvbkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8gewogICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB9IDoge30pKTsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkOwogICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaCgoX3JlZjMpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxNiA9IF9zbGljZWRUb0FycmF5MihfcmVmMywgMSksa2V5ID0gX3JlZjE2WzBdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIpOwogICAgICAgICAgICAgICAgICAgICAgfSk7X2NvbnRleHQ2Lm5leHQgPSAxMztyZXR1cm4gKAoKCgoKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXF1ZXN0KSk7Y2FzZSAxMzpfeWllbGQkY2FsbExvYWRlcnNBbmQgPSBfY29udGV4dDYuc2VudDtyZXN1bHRzID0gX3lpZWxkJGNhbGxMb2FkZXJzQW5kLnJlc3VsdHM7bG9hZGVyUmVzdWx0cyA9IF95aWVsZCRjYWxsTG9hZGVyc0FuZC5sb2FkZXJSZXN1bHRzO2ZldGNoZXJSZXN1bHRzID0gX3lpZWxkJGNhbGxMb2FkZXJzQW5kLmZldGNoZXJSZXN1bHRzO2lmICghCgogICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge19jb250ZXh0Ni5uZXh0ID0gMTk7YnJlYWs7fXJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfSk7Y2FzZSAxOToKICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0CiAgICAgICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZAogICAgICAgICAgICAgICAgICAgICAgLy8gcmVhc3NpZ25lZCB0byBuZXcgY29udHJvbGxlcnMgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb24KCgogICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaCgoX3JlZjQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYxNyA9IF9zbGljZWRUb0FycmF5MihfcmVmNCwgMSksa2V5ID0gX3JlZjE3WzBdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTsKICAgICAgICAgICAgICAgICAgICAgIH0pOyAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb24KCiAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtpZiAoIQoKICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0KSB7X2NvbnRleHQ2Lm5leHQgPSAyNTticmVhazt9X2NvbnRleHQ2Lm5leHQgPSAyNDtyZXR1cm4gKAogICAgICAgICAgICAgICAgICAgICAgICBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVkaXJlY3QsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlOiByZXBsYWNlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtjYXNlIDI0OnJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfSk7Y2FzZSAyNToKICAgICAgICAgICAgICAgICAgICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzCiAgICAgICAgICAgICAgICAgICAgICBfcHJvY2Vzc0xvYWRlckRhdGEgPQoKCgoKICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKSwgbG9hZGVyRGF0YSA9IF9wcm9jZXNzTG9hZGVyRGF0YS5sb2FkZXJEYXRhLCBlcnJvcnMgPSBfcHJvY2Vzc0xvYWRlckRhdGEuZXJyb3JzOyAvLyBXaXJlIHVwIHN1YnNjcmliZXJzIHRvIHVwZGF0ZSBsb2FkZXJEYXRhIGFzIHByb21pc2VzIHNldHRsZQoKICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZWZlcnJlZERhdGEsIHJvdXRlSWQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWREYXRhLnN1YnNjcmliZSgoYWJvcnRlZCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb24KICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2FkZXJEYXRhIGlzIHN0YWJsZSBhY3Jvc3MgcmVzb2x2ZS9yZWplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhpcyBpbnN0YW5jZSBpZiB3ZSB3ZXJlIGFib3J0ZWQgb3IgaWYgcHJvbWlzZXMgaGF2ZSBzZXR0bGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpOwogICAgICAgICAgICAgICAgICAgICAgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpO3JldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHMoewogICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXJEYXRhOiBsb2FkZXJEYXRhLAogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IGVycm9ycwogICAgICAgICAgICAgICAgICAgICAgfSwgZGlkQWJvcnRGZXRjaExvYWRzIHx8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDAgPyB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKQogICAgICAgICAgICAgICAgICAgICAgfSA6IHt9KSk7Y2FzZSAzMDpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDYuc3RvcCgpO319LCBfY2FsbGVlNik7fSkpO3JldHVybiBfaGFuZGxlTG9hZGVycy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO30KCgogICAgICAgICAgICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkgewogICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7CiAgICAgICAgICAgIH0gLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleQoKCiAgICAgICAgICAgIGZ1bmN0aW9uIGZldGNoKGtleSwgcm91dGVJZCwgaHJlZiwgb3B0cykgewogICAgICAgICAgICAgIGlmIChpc1NlcnZlcikgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gIiArICJZb3UgYXJlIGxpa2VseSBjYWxsaW5nIGEgdXNlRmV0Y2hlcigpIG1ldGhvZCBpbiB0aGUgYm9keSBvZiB5b3VyIGNvbXBvbmVudC4gIiArICJUcnkgbW92aW5nIGl0IHRvIGEgdXNlRWZmZWN0IG9yIGEgY2FsbGJhY2suIik7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7CiAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBocmVmLCBpbml0LmJhc2VuYW1lKTsKCiAgICAgICAgICAgICAgaWYgKCFtYXRjaGVzKSB7CiAgICAgICAgICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgewogICAgICAgICAgICAgICAgICBwYXRobmFtZTogaHJlZgogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIF9ub3JtYWxpemVOYXZpZ2F0ZU9wdCA9CgoKICAgICAgICAgICAgICAgIG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhocmVmLCBvcHRzLCB0cnVlKSxwYXRoID0gX25vcm1hbGl6ZU5hdmlnYXRlT3B0LnBhdGgsc3VibWlzc2lvbiA9IF9ub3JtYWxpemVOYXZpZ2F0ZU9wdC5zdWJtaXNzaW9uOwogICAgICAgICAgICAgIHZhciBtYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIHBhdGgpOwoKICAgICAgICAgICAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHsKICAgICAgICAgICAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfSAvLyBTdG9yZSBvZmYgdGhlIG1hdGNoIHNvIHdlIGNhbiBjYWxsIGl0J3Mgc2hvdWxkUmV2YWxpZGF0ZSBvbiBzdWJzZXF1ZW50CiAgICAgICAgICAgICAgLy8gcmV2YWxpZGF0aW9ucwoKCiAgICAgICAgICAgICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCBbcGF0aCwgbWF0Y2gsIG1hdGNoZXNdKTsKICAgICAgICAgICAgICBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pOwogICAgICAgICAgICB9IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cywKICAgICAgICAgICAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uCiAgICAgICAgICAgIGZ1bmN0aW9uCgogICAgICAgICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKF94MjIsIF94MjMsIF94MjQsIF94MjUsIF94MjYsIF94MjcpIHtyZXR1cm4gX2hhbmRsZUZldGNoZXJBY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTt9CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAgICAgICAgICAgLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLgogICAgICAgICAgICBmdW5jdGlvbiBfaGFuZGxlRmV0Y2hlckFjdGlvbigpIHtfaGFuZGxlRmV0Y2hlckFjdGlvbiA9IF9hc3luY1RvR2VuZXJhdG9yMiggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUyKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlNyhrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgc3VibWlzc2lvbikge3ZhciBfZXJyb3IyLCBleGlzdGluZ0ZldGNoZXIsIGZldGNoZXIsIGFib3J0Q29udHJvbGxlciwgZmV0Y2hSZXF1ZXN0LCBhY3Rpb25SZXN1bHQsIGxvYWRpbmdGZXRjaGVyLCBuZXh0TG9jYXRpb24sIHJldmFsaWRhdGlvblJlcXVlc3QsIG1hdGNoZXMsIGxvYWRJZCwgbG9hZEZldGNoZXIsIF9nZXRNYXRjaGVzVG9Mb2FkMywgX2dldE1hdGNoZXNUb0xvYWQ0LCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgX3lpZWxkJGNhbGxMb2FkZXJzQW5kMiwgcmVzdWx0cywgbG9hZGVyUmVzdWx0cywgZmV0Y2hlclJlc3VsdHMsIHJlZGlyZWN0LCBfcHJvY2Vzc0xvYWRlckRhdGEyLCBsb2FkZXJEYXRhLCBlcnJvcnMsIGRvbmVGZXRjaGVyLCBkaWRBYm9ydEZldGNoTG9hZHM7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkge2Nhc2UgMDppbnRlcnJ1cHRBY3RpdmVMb2FkcygpO2ZldGNoTG9hZE1hdGNoZXMuZGVsZXRlKGtleSk7aWYgKG1hdGNoLnJvdXRlLmFjdGlvbikge19jb250ZXh0Ny5uZXh0ID0gNjticmVhazt9X2Vycm9yMiA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7IG1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLCBwYXRobmFtZTogcGF0aCwgcm91dGVJZDogcm91dGVJZCB9KTtzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBfZXJyb3IyKTtyZXR1cm4gX2NvbnRleHQ3LmFicnVwdCgicmV0dXJuIik7Y2FzZSA2OiAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlCiAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtmZXRjaGVyID0gX2V4dGVuZHMoeyBzdGF0ZTogInN1Ym1pdHRpbmciIH0sIHN1Ym1pc3Npb24sIHsgZGF0YTogZXhpc3RpbmdGZXRjaGVyICYmIGV4aXN0aW5nRmV0Y2hlci5kYXRhLCAiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nICI6IHRydWUgfSk7c3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7dXBkYXRlU3RhdGUoeyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSk7IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXIKICAgICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtmZXRjaFJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwsIHN1Ym1pc3Npb24pO2ZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtfY29udGV4dDcubmV4dCA9IDE1O3JldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oImFjdGlvbiIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpO2Nhc2UgMTU6YWN0aW9uUmVzdWx0ID0gX2NvbnRleHQ3LnNlbnQ7aWYgKCFmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtfY29udGV4dDcubmV4dCA9IDE5O2JyZWFrO30gLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlcgogICAgICAgICAgICAgICAgICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVycwogICAgICAgICAgICAgICAgICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge2ZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7fXJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iKTtjYXNlIDE5OmlmICghaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7X2NvbnRleHQ3Lm5leHQgPSAyNjticmVhazt9ZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO2xvYWRpbmdGZXRjaGVyID0gX2V4dGVuZHMoeyBzdGF0ZTogImxvYWRpbmciIH0sIHN1Ym1pc3Npb24sIHsgZGF0YTogdW5kZWZpbmVkLCAiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nICI6IHRydWUgfSk7c3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZGluZ0ZldGNoZXIpO3VwZGF0ZVN0YXRlKHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0pO3JldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgYWN0aW9uUmVzdWx0LCB7IGlzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZSB9KSk7Y2FzZSAyNjppZiAoIWlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge19jb250ZXh0Ny5uZXh0ID0gMjk7YnJlYWs7fXNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGFjdGlvblJlc3VsdC5lcnJvcik7cmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMjk6aWYgKCFpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtfY29udGV4dDcubmV4dCA9IDMxO2JyZWFrO310aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwgeyB0eXBlOiAiZGVmZXItYWN0aW9uIiB9KTtjYXNlIDMxOiAvLyBTdGFydCB0aGUgZGF0YSBsb2FkIGZvciBjdXJyZW50IG1hdGNoZXMsIG9yIHRoZSBuZXh0IGxvY2F0aW9uIGlmIHdlJ3JlCiAgICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGUgbWlkZGxlIG9mIGEgbmF2aWdhdGlvbgogICAgICAgICAgICAgICAgICAgICAgbmV4dExvY2F0aW9uID0gc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiB8fCBzdGF0ZS5sb2NhdGlvbjtyZXZhbGlkYXRpb25SZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBuZXh0TG9jYXRpb24sIGFib3J0Q29udHJvbGxlci5zaWduYWwpO21hdGNoZXMgPSBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSAiaWRsZSIgPyBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKSA6IHN0YXRlLm1hdGNoZXM7cm91dGVyX2ludmFyaWFudChtYXRjaGVzLCAiRGlkbid0IGZpbmQgYW55IG1hdGNoZXMgYWZ0ZXIgZmV0Y2hlciBhY3Rpb24iKTtsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO2xvYWRGZXRjaGVyID0gX2V4dGVuZHMoeyBzdGF0ZTogImxvYWRpbmciLCBkYXRhOiBhY3Rpb25SZXN1bHQuZGF0YSB9LCBzdWJtaXNzaW9uLCB7ICIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgIjogdHJ1ZSB9KTtzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7X2dldE1hdGNoZXNUb0xvYWQzID0gZ2V0TWF0Y2hlc1RvTG9hZChpbml0Lmhpc3RvcnksIHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIF9kZWZpbmVQcm9wZXJ0eTIoe30sIG1hdGNoLnJvdXRlLmlkLCBhY3Rpb25SZXN1bHQuZGF0YSksIHVuZGVmaW5lZCwgLy8gTm8gbmVlZCB0byBzZW5kIHRocm91Z2ggZXJyb3JzIHNpbmNlIHdlIHNob3J0IGNpcmN1aXQgYWJvdmUKICAgICAgICAgICAgICAgICAgICAgIGZldGNoTG9hZE1hdGNoZXMpLCBfZ2V0TWF0Y2hlc1RvTG9hZDQgPSBfc2xpY2VkVG9BcnJheTIoX2dldE1hdGNoZXNUb0xvYWQzLCAyKSwgbWF0Y2hlc1RvTG9hZCA9IF9nZXRNYXRjaGVzVG9Mb2FkNFswXSwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBfZ2V0TWF0Y2hlc1RvTG9hZDRbMV07IC8vIFB1dCBhbGwgcmV2YWxpZGF0aW5nIGZldGNoZXJzIGludG8gdGhlIGxvYWRpbmcgc3RhdGUsIGV4Y2VwdCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGZldGNoZXIgd2hpY2ggd2Ugd2FudCB0byBrZWVwIGluIGl0J3MgY3VycmVudCBsb2FkaW5nIHN0YXRlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAvLyBjb250YWlucyBpdCdzIGFjdGlvbiBzdWJtaXNzaW9uIGluZm8gKyBhY3Rpb24gZGF0YQogICAgICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZmlsdGVyKChfcmVmNSkgPT4ge3ZhciBfcmVmMTggPSBfc2xpY2VkVG9BcnJheTIoX3JlZjUsIDEpLHN0YWxlS2V5ID0gX3JlZjE4WzBdO3JldHVybiBzdGFsZUtleSAhPT0ga2V5O30pLmZvckVhY2goKF9yZWY2KSA9PiB7dmFyIF9yZWYxOSA9IF9zbGljZWRUb0FycmF5MihfcmVmNiwgMSksc3RhbGVLZXkgPSBfcmVmMTlbMF07dmFyIGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7dmFyIHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7IHN0YXRlOiAibG9hZGluZyIsIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YSwgZm9ybU1ldGhvZDogdW5kZWZpbmVkLCBmb3JtQWN0aW9uOiB1bmRlZmluZWQsIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsIGZvcm1EYXRhOiB1bmRlZmluZWQsICIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgIjogdHJ1ZSB9O3N0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7ZmV0Y2hDb250cm9sbGVycy5zZXQoc3RhbGVLZXksIGFib3J0Q29udHJvbGxlcik7fSk7dXBkYXRlU3RhdGUoeyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSk7X2NvbnRleHQ3Lm5leHQgPSA0NDtyZXR1cm4gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXZhbGlkYXRpb25SZXF1ZXN0KTtjYXNlIDQ0Ol95aWVsZCRjYWxsTG9hZGVyc0FuZDIgPSBfY29udGV4dDcuc2VudDtyZXN1bHRzID0gX3lpZWxkJGNhbGxMb2FkZXJzQW5kMi5yZXN1bHRzO2xvYWRlclJlc3VsdHMgPSBfeWllbGQkY2FsbExvYWRlcnNBbmQyLmxvYWRlclJlc3VsdHM7ZmV0Y2hlclJlc3VsdHMgPSBfeWllbGQkY2FsbExvYWRlcnNBbmQyLmZldGNoZXJSZXN1bHRzO2lmICghYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7X2NvbnRleHQ3Lm5leHQgPSA1MDticmVhazt9cmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIpO2Nhc2UgNTA6ZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7ZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtyZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKChfcmVmNykgPT4ge3ZhciBfcmVmMjAgPSBfc2xpY2VkVG9BcnJheTIoX3JlZjcsIDEpLHN0YWxlS2V5ID0gX3JlZjIwWzBdO3JldHVybiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShzdGFsZUtleSk7fSk7cmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7aWYgKCFyZWRpcmVjdCkge19jb250ZXh0Ny5uZXh0ID0gNTY7YnJlYWs7fXJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihzdGF0ZSwgcmVkaXJlY3QpKTtjYXNlIDU2OiAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVycwogICAgICAgICAgICAgICAgICAgICAgX3Byb2Nlc3NMb2FkZXJEYXRhMiA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKSwgbG9hZGVyRGF0YSA9IF9wcm9jZXNzTG9hZGVyRGF0YTIubG9hZGVyRGF0YSwgZXJyb3JzID0gX3Byb2Nlc3NMb2FkZXJEYXRhMi5lcnJvcnM7ZG9uZUZldGNoZXIgPSB7IHN0YXRlOiAiaWRsZSIsIGRhdGE6IGFjdGlvblJlc3VsdC5kYXRhLCBmb3JtTWV0aG9kOiB1bmRlZmluZWQsIGZvcm1BY3Rpb246IHVuZGVmaW5lZCwgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCwgZm9ybURhdGE6IHVuZGVmaW5lZCwgIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyAiOiB0cnVlIH07c3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO2RpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7IC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gYSBuYXZpZ2F0aW9uIGxvYWRpbmcgc3RhdGUgYW5kIHRoaXMgZmV0Y2hlciBpcwogICAgICAgICAgICAgICAgICAgICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGUKICAgICAgICAgICAgICAgICAgICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YQogICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09ICJsb2FkaW5nIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge3JvdXRlcl9pbnZhcmlhbnQocGVuZGluZ0FjdGlvbiwgIkV4cGVjdGVkIHBlbmRpbmcgYWN0aW9uIik7cGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO2NvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7IG1hdGNoZXM6IG1hdGNoZXMsIGxvYWRlckRhdGE6IGxvYWRlckRhdGEsIGVycm9yczogZXJyb3JzLCBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSk7fSBlbHNlIHsvLyBvdGhlcndpc2UganVzdCB1cGRhdGUgd2l0aCB0aGUgZmV0Y2hlciBkYXRhLCBwcmVzZXJ2aW5nIGFueSBleGlzdGluZwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFudWFsbHkgbWVyZ2UgaGVyZSBzaW5jZSB3ZSBhcmVuJ3QgZ29pbmcgdGhyb3VnaCBjb21wbGV0ZU5hdmlnYXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoeyBlcnJvcnM6IGVycm9ycywgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykgfSwgZGlkQWJvcnRGZXRjaExvYWRzID8geyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSA6IHt9KSk7aXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO31jYXNlIDYxOmNhc2UgImVuZCI6cmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7fX0sIF9jYWxsZWU3KTt9KSk7cmV0dXJuIF9oYW5kbGVGZXRjaGVyQWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIGhhbmRsZUZldGNoZXJMb2FkZXIoX3gyOCwgX3gyOSwgX3gzMCwgX3gzMSwgX3gzMiwgX3gzMykge3JldHVybiBfaGFuZGxlRmV0Y2hlckxvYWRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO30KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuCiAgICAgICAgICAgICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0ICJyZXBsYWNlcyIgdGhlIG5hdmlnYXRpb24gdGhhdCB0cmlnZ2VyZWQgaXQuICBTbywgZm9yCiAgICAgICAgICAgICAqIGV4YW1wbGU6CiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqICAtIHVzZXIgaXMgb24gL2EKICAgICAgICAgICAgICogIC0gdXNlciBjbGlja3MgYSBsaW5rIHRvIC9iCiAgICAgICAgICAgICAqICAtIGxvYWRlciBmb3IgL2IgcmVkaXJlY3RzIHRvIC9jCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEluIGEgbm9uLUpTIGFwcCB0aGUgYnJvd3NlciB3b3VsZCB0cmFjayB0aGUgaW4tZmxpZ2h0IG5hdmlnYXRpb24gdG8gL2IgYW5kCiAgICAgICAgICAgICAqIHRoZW4gcmVwbGFjZSBpdCB3aXRoIC9jIHdoZW4gaXQgZW5jb3VudGVyZWQgdGhlIHJlZGlyZWN0IHJlc3BvbnNlLiAgSW4KICAgICAgICAgICAgICogdGhlIGVuZCBpdCB3b3VsZCBvbmx5IGV2ZXIgdXBkYXRlIHRoZSBVUkwgYmFyIHdpdGggL2MuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIEluIGNsaWVudC1zaWRlIHJvdXRpbmcgdXNpbmcgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSwgd2UgYWltIHRvIGVtdWxhdGUKICAgICAgICAgICAgICogdGhpcyBiZWhhdmlvciBhbmQgd2UgYWxzbyBkbyBub3QgdXBkYXRlIGhpc3RvcnkgdW50aWwgdGhlIGVuZCBvZiB0aGUKICAgICAgICAgICAgICogbmF2aWdhdGlvbiAoaW5jbHVkaW5nIHByb2Nlc3NlZCByZWRpcmVjdHMpLiAgVGhpcyBtZWFucyB0aGF0IHdlIG5ldmVyCiAgICAgICAgICAgICAqIGFjdHVhbGx5IHRvdWNoIGhpc3RvcnkgdW50aWwgd2UndmUgcHJvY2Vzc2VkIHJlZGlyZWN0cywgc28gd2UganVzdCB1c2UKICAgICAgICAgICAgICogdGhlIGhpc3RvcnkgYWN0aW9uIGZyb20gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb24gKFBVU0ggb3IgUkVQTEFDRSkuCiAgICAgICAgICAgICAqL2Z1bmN0aW9uIF9oYW5kbGVGZXRjaGVyTG9hZGVyKCkge19oYW5kbGVGZXRjaGVyTG9hZGVyID0gX2FzeW5jVG9HZW5lcmF0b3IyKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZTIoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pIHt2YXIgZXhpc3RpbmdGZXRjaGVyLCBsb2FkaW5nRmV0Y2hlciwgYWJvcnRDb250cm9sbGVyLCBmZXRjaFJlcXVlc3QsIHJlc3VsdCwgYm91bmRhcnlNYXRjaCwgZG9uZUZldGNoZXI7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkge2Nhc2UgMDpleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTsgLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3MgbG9hZGluZyBzdGF0ZQogICAgICAgICAgICAgICAgICAgICAgbG9hZGluZ0ZldGNoZXIgPSBfZXh0ZW5kcyh7IHN0YXRlOiAibG9hZGluZyIsIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCwgZm9ybUFjdGlvbjogdW5kZWZpbmVkLCBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLCBmb3JtRGF0YTogdW5kZWZpbmVkIH0sIHN1Ym1pc3Npb24sIHsgZGF0YTogZXhpc3RpbmdGZXRjaGVyICYmIGV4aXN0aW5nRmV0Y2hlci5kYXRhLCAiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nICI6IHRydWUgfSk7c3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZGluZ0ZldGNoZXIpO3VwZGF0ZVN0YXRlKHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0pOyAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaAogICAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO2ZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7ZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO19jb250ZXh0OC5uZXh0ID0gOTtyZXR1cm4gY2FsbExvYWRlck9yQWN0aW9uKCJsb2FkZXIiLCBmZXRjaFJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCByb3V0ZXIuYmFzZW5hbWUpO2Nhc2UgOTpyZXN1bHQgPSBfY29udGV4dDguc2VudDtpZiAoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge19jb250ZXh0OC5uZXh0ID0gMTc7YnJlYWs7fV9jb250ZXh0OC5uZXh0ID0gMTM7cmV0dXJuIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBmZXRjaFJlcXVlc3Quc2lnbmFsLCB0cnVlKTtjYXNlIDEzOl9jb250ZXh0OC50MCA9IF9jb250ZXh0OC5zZW50O2lmIChfY29udGV4dDgudDApIHtfY29udGV4dDgubmV4dCA9IDE2O2JyZWFrO31fY29udGV4dDgudDAgPSByZXN1bHQ7Y2FzZSAxNjpyZXN1bHQgPSBfY29udGV4dDgudDA7Y2FzZSAxNzogLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlcgogICAgICAgICAgICAgICAgICAgICAgLy8gcmUtbG9hZCB3aGljaCB3b3VsZCBoYXZlIHB1dCBfbmV3XyBjb250cm9sbGVyIGlzIGluIGZldGNoQ29udHJvbGxlcnMKICAgICAgICAgICAgICAgICAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO31pZiAoIWZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge19jb250ZXh0OC5uZXh0ID0gMjA7YnJlYWs7fXJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iKTtjYXNlIDIwOmlmICghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7X2NvbnRleHQ4Lm5leHQgPSAyNDticmVhazt9X2NvbnRleHQ4Lm5leHQgPSAyMztyZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCk7Y2FzZSAyMzpyZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIik7Y2FzZSAyNDppZiAoIWlzRXJyb3JSZXN1bHQocmVzdWx0KSkge19jb250ZXh0OC5uZXh0ID0gMjk7YnJlYWs7fWJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIHJvdXRlSWQpO3N0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpOyAvLyBUT0RPOiBJbiByZW1peCwgdGhpcyB3b3VsZCByZXNldCB0byBJRExFX05BVklHQVRJT04gaWYgaXQgd2FzIGEgY2F0Y2ggLQogICAgICAgICAgICAgICAgICAgICAgLy8gZG8gd2UgbmVlZCB0byBiZWhhdmUgYW55IGRpZmZlcmVudGx5IHdpdGggb3VyIG5vbi1yZWRpcmVjdCBlcnJvcnM/CiAgICAgICAgICAgICAgICAgICAgICAvLyBXaGF0IGlmIGl0IHdhcyBhIG5vbi1yZWRpcmVjdCBSZXNwb25zZT8KICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVN0YXRlKHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpLCBlcnJvcnM6IF9kZWZpbmVQcm9wZXJ0eTIoe30sIGJvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdC5lcnJvcikgfSk7cmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIpO2Nhc2UgMjk6cm91dGVyX2ludmFyaWFudCghaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpLCAiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YSIpOyAvLyBQdXQgdGhlIGZldGNoZXIgYmFjayBpbnRvIGFuIGlkbGUgc3RhdGUKICAgICAgICAgICAgICAgICAgICAgIGRvbmVGZXRjaGVyID0geyBzdGF0ZTogImlkbGUiLCBkYXRhOiByZXN1bHQuZGF0YSwgZm9ybU1ldGhvZDogdW5kZWZpbmVkLCBmb3JtQWN0aW9uOiB1bmRlZmluZWQsIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsIGZvcm1EYXRhOiB1bmRlZmluZWQsICIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgIjogdHJ1ZSB9O3N0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTt1cGRhdGVTdGF0ZSh7IGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSB9KTtjYXNlIDMzOmNhc2UgImVuZCI6cmV0dXJuIF9jb250ZXh0OC5zdG9wKCk7fX0sIF9jYWxsZWU4KTt9KSk7cmV0dXJuIF9oYW5kbGVGZXRjaGVyTG9hZGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKF94MzQsIF94MzUsIF94MzYpIHtyZXR1cm4gX3N0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIF9zdGFydFJlZGlyZWN0TmF2aWdhdGlvbigpIHtfc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24gPSBfYXN5bmNUb0dlbmVyYXRvcjIoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lMigpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoc3RhdGUsIHJlZGlyZWN0LCBfdGVtcCkge3ZhciBfd2luZG93LCBfcmVmMjEsIHN1Ym1pc3Npb24sIHJlcGxhY2UsIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdCwgcmVkaXJlY3RMb2NhdGlvbiwgbmV3T3JpZ2luLCByZWRpcmVjdEhpc3RvcnlBY3Rpb24sIF9zdGF0ZSRuYXZpZ2F0aW9uLCBmb3JtTWV0aG9kLCBmb3JtQWN0aW9uLCBmb3JtRW5jVHlwZSwgZm9ybURhdGE7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlOSQoX2NvbnRleHQ5KSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkge2Nhc2UgMDpfcmVmMjEgPQoKICAgICAgICAgICAgICAgICAgICAgIF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLCBzdWJtaXNzaW9uID0gX3JlZjIxLnN1Ym1pc3Npb24sIHJlcGxhY2UgPSBfcmVmMjEucmVwbGFjZSwgaXNGZXRjaEFjdGlvblJlZGlyZWN0ID0gX3JlZjIxLmlzRmV0Y2hBY3Rpb25SZWRpcmVjdDsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHJlZGlyZWN0LmxvY2F0aW9uLCAvLyBUT0RPOiBUaGlzIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgZ2V0IHJpZCBvZiB1c2VUcmFuc2l0aW9uIGluIFJlbWl4IHYyCiAgICAgICAgICAgICAgICAgICAgICBfZXh0ZW5kcyh7CiAgICAgICAgICAgICAgICAgICAgICAgIF9pc1JlZGlyZWN0OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICB9LCBpc0ZldGNoQWN0aW9uUmVkaXJlY3QgPyB7CiAgICAgICAgICAgICAgICAgICAgICAgIF9pc0ZldGNoQWN0aW9uUmVkaXJlY3Q6IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0gOiB7fSkpOwogICAgICAgICAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCAiRXhwZWN0ZWQgYSBsb2NhdGlvbiBvbiB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvbiIpOyAvLyBDaGVjayBpZiB0aGlzIGFuIGV4dGVybmFsIHJlZGlyZWN0IHRoYXQgZ29lcyB0byBhIG5ldyBvcmlnaW4KICAgICAgICAgICAgICAgICAgICAgIGlmICghKAogICAgICAgICAgICAgICAgICAgICAgaXNCcm93c2VyICYmIHR5cGVvZiAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93LmxvY2F0aW9uKSAhPT0gInVuZGVmaW5lZCIpKSB7X2NvbnRleHQ5Lm5leHQgPSA5O2JyZWFrO30KICAgICAgICAgICAgICAgICAgICAgIG5ld09yaWdpbiA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwocmVkaXJlY3QubG9jYXRpb24pLm9yaWdpbjtpZiAoISgKCiAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBuZXdPcmlnaW4pKSB7X2NvbnRleHQ5Lm5leHQgPSA5O2JyZWFrO30KICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0LmxvY2F0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24ocmVkaXJlY3QubG9jYXRpb24pOwogICAgICAgICAgICAgICAgICAgICAgfXJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iKTtjYXNlIDk6CgoKCiAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlCiAgICAgICAgICAgICAgICAgICAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkCgoKICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdEhpc3RvcnlBY3Rpb24gPSByZXBsYWNlID09PSB0cnVlID8gQWN0aW9uLlJlcGxhY2UgOiBBY3Rpb24uUHVzaDsgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpbgogICAgICAgICAgICAgICAgICAgICAgLy8gc3RhdGUubmF2aWdhdGlvbgogICAgICAgICAgICAgICAgICAgICAgX3N0YXRlJG5hdmlnYXRpb24gPQoKCgoKCiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5uYXZpZ2F0aW9uLCBmb3JtTWV0aG9kID0gX3N0YXRlJG5hdmlnYXRpb24uZm9ybU1ldGhvZCwgZm9ybUFjdGlvbiA9IF9zdGF0ZSRuYXZpZ2F0aW9uLmZvcm1BY3Rpb24sIGZvcm1FbmNUeXBlID0gX3N0YXRlJG5hdmlnYXRpb24uZm9ybUVuY1R5cGUsIGZvcm1EYXRhID0gX3N0YXRlJG5hdmlnYXRpb24uZm9ybURhdGE7CgogICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdWJtaXNzaW9uICYmIGZvcm1NZXRob2QgJiYgZm9ybUFjdGlvbiAmJiBmb3JtRGF0YSAmJiBmb3JtRW5jVHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXNzaW9uID0gewogICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1NZXRob2Q6IGZvcm1NZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUFjdGlvbjogZm9ybUFjdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtRW5jVHlwZTogZm9ybUVuY1R5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGE6IGZvcm1EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICB9IC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZAogICAgICAgICAgICAgICAgICAgICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgLy8gcmVkaXJlY3RlZCBsb2NhdGlvbgogICAgICAgICAgICAgICAgICAgICAgaWYgKCEoCgogICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5zdGF0dXMpICYmIHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSkge19jb250ZXh0OS5uZXh0ID0gMTg7YnJlYWs7fV9jb250ZXh0OS5uZXh0ID0gMTY7cmV0dXJuICgKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBzdWJtaXNzaW9uLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQWN0aW9uOiByZWRpcmVjdC5sb2NhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtjYXNlIDE2Ol9jb250ZXh0OS5uZXh0ID0gMjA7YnJlYWs7Y2FzZSAxODpfY29udGV4dDkubmV4dCA9IDIwO3JldHVybiAoCgoKCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZU5hdmlnYXRpb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAibG9hZGluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbjogcmVkaXJlY3RMb2NhdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1NZXRob2QgOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtQWN0aW9uIDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlIDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1EYXRhIDogdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldAogICAgICAgICAgICAgICAgICAgICAgICB9KSk7Y2FzZSAyMDpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDkuc3RvcCgpO319LCBfY2FsbGVlOSk7fSkpO3JldHVybiBfc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24KCgoKICAgICAgICAgICAgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKF94MzcsIF94MzgsIF94MzksIF94NDAsIF94NDEpIHtyZXR1cm4gX2NhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO31mdW5jdGlvbiBfY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKCkge19jYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEgPSBfYXN5bmNUb0dlbmVyYXRvcjIoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lMigpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTEwKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge3ZhciByZXN1bHRzLCBsb2FkZXJSZXN1bHRzLCBmZXRjaGVyUmVzdWx0cztyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZTIoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkge3doaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkge2Nhc2UgMDpfY29udGV4dDEwLm5leHQgPSAyO3JldHVybiAoCgoKCiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkyKG1hdGNoZXNUb0xvYWQubWFwKChtYXRjaCkgPT4gY2FsbExvYWRlck9yQWN0aW9uKCJsb2FkZXIiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKSkpLCBfdG9Db25zdW1hYmxlQXJyYXkyKGZldGNoZXJzVG9Mb2FkLm1hcCgoX3JlZjgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JlZjIyID0gX3NsaWNlZFRvQXJyYXkyKF9yZWY4LCA0KSxocmVmID0gX3JlZjIyWzFdLG1hdGNoID0gX3JlZjIyWzJdLGZldGNoTWF0Y2hlcyA9IF9yZWYyMlszXTsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbExvYWRlck9yQWN0aW9uKCJsb2FkZXIiLCBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGhyZWYsIHJlcXVlc3Quc2lnbmFsKSwgbWF0Y2gsIGZldGNoTWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkpKSkpO2Nhc2UgMjpyZXN1bHRzID0gX2NvbnRleHQxMC5zZW50OwogICAgICAgICAgICAgICAgICAgICAgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtfY29udGV4dDEwLm5leHQgPSA3O3JldHVybiAoCiAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoKF9yZWY5KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWYyMyA9IF9zbGljZWRUb0FycmF5MihfcmVmOSwgMyksbWF0Y2ggPSBfcmVmMjNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoOwogICAgICAgICAgICAgICAgICAgICAgICB9KSwgZmV0Y2hlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCB0cnVlKV0pKTtjYXNlIDc6cmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiByZXN1bHRzLAogICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXJSZXN1bHRzOiBsb2FkZXJSZXN1bHRzLAogICAgICAgICAgICAgICAgICAgICAgICBmZXRjaGVyUmVzdWx0czogZmV0Y2hlclJlc3VsdHMKICAgICAgICAgICAgICAgICAgICAgIH0pO2Nhc2UgODpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDEwLnN0b3AoKTt9fSwgX2NhbGxlZTEwKTt9KSk7cmV0dXJuIF9jYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9CgoKICAgICAgICAgICAgZnVuY3Rpb24gaW50ZXJydXB0QWN0aXZlTG9hZHMoKSB7dmFyIF9jYW5jZWxsZWREZWZlcnJlZFJvdTsKICAgICAgICAgICAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb24KICAgICAgICAgICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTsgLy8gQ2FuY2VsIHBlbmRpbmcgcm91dGUtbGV2ZWwgZGVmZXJyZWRzIGFuZCBtYXJrIGNhbmNlbGxlZCByb3V0ZXMgZm9yCiAgICAgICAgICAgICAgLy8gcmV2YWxpZGF0aW9uCgogICAgICAgICAgICAgIChfY2FuY2VsbGVkRGVmZXJyZWRSb3UgPSBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcykucHVzaC5hcHBseShfY2FuY2VsbGVkRGVmZXJyZWRSb3UsIF90b0NvbnN1bWFibGVBcnJheTIoY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpKTsgLy8gQWJvcnQgaW4tZmxpZ2h0IGZldGNoZXIgbG9hZHMKCiAgICAgICAgICAgICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHsKICAgICAgICAgICAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7CiAgICAgICAgICAgICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7CiAgICAgICAgICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBlcnJvcikgewogICAgICAgICAgICAgIHZhciBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTsKICAgICAgICAgICAgICBkZWxldGVGZXRjaGVyKGtleSk7CiAgICAgICAgICAgICAgdXBkYXRlU3RhdGUoewogICAgICAgICAgICAgICAgZXJyb3JzOiBfZGVmaW5lUHJvcGVydHkyKHt9LAogICAgICAgICAgICAgICAgYm91bmRhcnlNYXRjaC5yb3V0ZS5pZCwgZXJyb3IpLAoKICAgICAgICAgICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkgewogICAgICAgICAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTsKICAgICAgICAgICAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpOwogICAgICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpOwogICAgICAgICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7CiAgICAgICAgICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGFib3J0RmV0Y2hlcihrZXkpIHsKICAgICAgICAgICAgICB2YXIgY29udHJvbGxlciA9IGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSk7CiAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChjb250cm9sbGVyLCAiRXhwZWN0ZWQgZmV0Y2ggY29udHJvbGxlcjogIiArIGtleSk7CiAgICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydCgpOwogICAgICAgICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge3ZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyKAogICAgICAgICAgICAgICAga2V5cyksX3N0ZXA1O3RyeSB7Zm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHt2YXIga2V5ID0gX3N0ZXA1LnZhbHVlOwogICAgICAgICAgICAgICAgICB2YXIgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTsKICAgICAgICAgICAgICAgICAgdmFyIGRvbmVGZXRjaGVyID0gewogICAgICAgICAgICAgICAgICAgIHN0YXRlOiAiaWRsZSIsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogZmV0Y2hlci5kYXRhLAogICAgICAgICAgICAgICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgICIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgIjogdHJ1ZQogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7CiAgICAgICAgICAgICAgICB9fSBjYXRjaCAoZXJyKSB7X2l0ZXJhdG9yNS5lKGVycik7fSBmaW5hbGx5IHtfaXRlcmF0b3I1LmYoKTt9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7CiAgICAgICAgICAgICAgdmFyIGRvbmVLZXlzID0gW107dmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIoCgogICAgICAgICAgICAgICAgZmV0Y2hSZWRpcmVjdElkcyksX3N0ZXA2O3RyeSB7Zm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHt2YXIga2V5ID0gX3N0ZXA2LnZhbHVlOwogICAgICAgICAgICAgICAgICB2YXIgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpOwogICAgICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KGZldGNoZXIsICJFeHBlY3RlZCBmZXRjaGVyOiAiICsga2V5KTsKCiAgICAgICAgICAgICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSAibG9hZGluZyIpIHsKICAgICAgICAgICAgICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpOwogICAgICAgICAgICAgICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfX0gY2F0Y2ggKGVycikge19pdGVyYXRvcjYuZShlcnIpO30gZmluYWxseSB7X2l0ZXJhdG9yNi5mKCk7fQoKICAgICAgICAgICAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYWJvcnRTdGFsZUZldGNoTG9hZHMobGFuZGVkSWQpIHsKICAgICAgICAgICAgICB2YXIgeWVldGVkS2V5cyA9IFtdO3ZhciBfaXRlcmF0b3I3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIyKAoKICAgICAgICAgICAgICAgIGZldGNoUmVsb2FkSWRzKSxfc3RlcDc7dHJ5IHtmb3IgKF9pdGVyYXRvcjcucygpOyAhKF9zdGVwNyA9IF9pdGVyYXRvcjcubigpKS5kb25lOykge3ZhciBfc3RlcDckdmFsdWUgPSBfc2xpY2VkVG9BcnJheTIoX3N0ZXA3LnZhbHVlLCAyKSxrZXkgPSBfc3RlcDckdmFsdWVbMF0saWQgPSBfc3RlcDckdmFsdWVbMV07CiAgICAgICAgICAgICAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTsKICAgICAgICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KGZldGNoZXIsICJFeHBlY3RlZCBmZXRjaGVyOiAiICsga2V5KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09ICJsb2FkaW5nIikgewogICAgICAgICAgICAgICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7CiAgICAgICAgICAgICAgICAgICAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTsKICAgICAgICAgICAgICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfX0gY2F0Y2ggKGVycikge19pdGVyYXRvcjcuZShlcnIpO30gZmluYWxseSB7X2l0ZXJhdG9yNy5mKCk7fQoKICAgICAgICAgICAgICBtYXJrRmV0Y2hlcnNEb25lKHllZXRlZEtleXMpOwogICAgICAgICAgICAgIHJldHVybiB5ZWV0ZWRLZXlzLmxlbmd0aCA+IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikgewogICAgICAgICAgICAgIHZhciBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSOwoKICAgICAgICAgICAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5nZXQoa2V5KSAhPT0gZm4pIHsKICAgICAgICAgICAgICAgIGJsb2NrZXJGdW5jdGlvbnMuc2V0KGtleSwgZm4pOwoKICAgICAgICAgICAgICAgIGlmIChhY3RpdmVCbG9ja2VyID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBub3cgdGhlIGFjdGl2ZSBibG9ja2VyCiAgICAgICAgICAgICAgICAgIGFjdGl2ZUJsb2NrZXIgPSBrZXk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSAhPT0gYWN0aXZlQmxvY2tlcikgewogICAgICAgICAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAiQSByb3V0ZXIgb25seSBzdXBwb3J0cyBvbmUgYmxvY2tlciBhdCBhIHRpbWUiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBibG9ja2VyOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBkZWxldGVCbG9ja2VyKGtleSkgewogICAgICAgICAgICAgIHN0YXRlLmJsb2NrZXJzLmRlbGV0ZShrZXkpOwogICAgICAgICAgICAgIGJsb2NrZXJGdW5jdGlvbnMuZGVsZXRlKGtleSk7CgogICAgICAgICAgICAgIGlmIChhY3RpdmVCbG9ja2VyID09PSBrZXkpIHsKICAgICAgICAgICAgICAgIGFjdGl2ZUJsb2NrZXIgPSBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnMKCgogICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVCbG9ja2VyKGtleSwgbmV3QmxvY2tlcikgewogICAgICAgICAgICAgIHZhciBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSOyAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KQogICAgICAgICAgICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU0KCiAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChibG9ja2VyLnN0YXRlID09PSAidW5ibG9ja2VkIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSAiYmxvY2tlZCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gImJsb2NrZWQiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09ICJibG9ja2VkIiB8fCBibG9ja2VyLnN0YXRlID09PSAiYmxvY2tlZCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gInByb2NlZWRpbmciIHx8IGJsb2NrZXIuc3RhdGUgPT09ICJibG9ja2VkIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSAidW5ibG9ja2VkIiB8fCBibG9ja2VyLnN0YXRlID09PSAicHJvY2VlZGluZyIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gInVuYmxvY2tlZCIsICJJbnZhbGlkIGJsb2NrZXIgc3RhdGUgdHJhbnNpdGlvbjogIiArIGJsb2NrZXIuc3RhdGUgKyAiIC0+ICIgKyBuZXdCbG9ja2VyLnN0YXRlKTsKICAgICAgICAgICAgICBzdGF0ZS5ibG9ja2Vycy5zZXQoa2V5LCBuZXdCbG9ja2VyKTsKICAgICAgICAgICAgICB1cGRhdGVTdGF0ZSh7CiAgICAgICAgICAgICAgICBibG9ja2VyczogbmV3IE1hcChzdGF0ZS5ibG9ja2VycykKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKF9yZWYxMCkgewogICAgICAgICAgICAgIHZhcgogICAgICAgICAgICAgICAgY3VycmVudExvY2F0aW9uID0KCgogICAgICAgICAgICAgICAgX3JlZjEwLmN1cnJlbnRMb2NhdGlvbixuZXh0TG9jYXRpb24gPSBfcmVmMTAubmV4dExvY2F0aW9uLGhpc3RvcnlBY3Rpb24gPSBfcmVmMTAuaGlzdG9yeUFjdGlvbjsKCiAgICAgICAgICAgICAgaWYgKGFjdGl2ZUJsb2NrZXIgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0gLy8gV2Ugb25seSBhbGxvdyBhIHNpbmdsZSBibG9ja2VyIGF0IHRoZSBtb21lbnQuICBUaGlzIHdpbGwgbmVlZCB0byBiZQogICAgICAgICAgICAgIC8vIHVwZGF0ZWQgaWYgd2UgZW5oYW5jZSB0byBzdXBwb3J0IG11bHRpcGxlIGJsb2NrZXJzIGluIHRoZSBmdXR1cmUKCgogICAgICAgICAgICAgIHZhciBibG9ja2VyRnVuY3Rpb24gPSBibG9ja2VyRnVuY3Rpb25zLmdldChhY3RpdmVCbG9ja2VyKTsKICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KGJsb2NrZXJGdW5jdGlvbiwgIkNvdWxkIG5vdCBmaW5kIGEgZnVuY3Rpb24gZm9yIHRoZSBhY3RpdmUgYmxvY2tlciIpOwogICAgICAgICAgICAgIHZhciBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGFjdGl2ZUJsb2NrZXIpOwoKICAgICAgICAgICAgICBpZiAoYmxvY2tlciAmJiBibG9ja2VyLnN0YXRlID09PSAicHJvY2VlZGluZyIpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrCiAgICAgICAgICAgICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWUKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9IC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGUKICAgICAgICAgICAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb24KCgogICAgICAgICAgICAgIGlmIChibG9ja2VyRnVuY3Rpb24oewogICAgICAgICAgICAgICAgY3VycmVudExvY2F0aW9uOiBjdXJyZW50TG9jYXRpb24sCiAgICAgICAgICAgICAgICBuZXh0TG9jYXRpb246IG5leHRMb2NhdGlvbiwKICAgICAgICAgICAgICAgIGhpc3RvcnlBY3Rpb246IGhpc3RvcnlBY3Rpb24KICAgICAgICAgICAgICB9KSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZUJsb2NrZXI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocHJlZGljYXRlKSB7CiAgICAgICAgICAgICAgdmFyIGNhbmNlbGxlZFJvdXRlSWRzID0gW107CiAgICAgICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRmZCwgcm91dGVJZCkgPT4gewogICAgICAgICAgICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHJvdXRlSWQpKSB7CiAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCB0aGUgZGVmZXJyZWQgLSBidXQgZG8gbm90IHJlbW92ZSBmcm9tIGFjdGl2ZURlZmVycmVkcyBoZXJlIC0KICAgICAgICAgICAgICAgICAgLy8gd2UgcmVseSBvbiB0aGUgc3Vic2NyaWJlcnMgdG8gZG8gdGhhdCBzbyBvdXIgdGVzdHMgY2FuIGFzc2VydCBwcm9wZXIKICAgICAgICAgICAgICAgICAgLy8gY2xlYW51cCB2aWEgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzCiAgICAgICAgICAgICAgICAgIGRmZC5jYW5jZWwoKTsKICAgICAgICAgICAgICAgICAgY2FuY2VsbGVkUm91dGVJZHMucHVzaChyb3V0ZUlkKTsKICAgICAgICAgICAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXR1cm4gY2FuY2VsbGVkUm91dGVJZHM7CiAgICAgICAgICAgIH0gLy8gT3B0IGluIHRvIGNhcHR1cmluZyBhbmQgcmVwb3J0aW5nIHNjcm9sbCBwb3NpdGlvbnMgZHVyaW5nIG5hdmlnYXRpb25zLAogICAgICAgICAgICAvLyB1c2VkIGJ5IHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudAoKCiAgICAgICAgICAgIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkgewogICAgICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zOwogICAgICAgICAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247CgogICAgICAgICAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gZ2V0S2V5IHx8ICgobG9jYXRpb24pID0+IGxvY2F0aW9uLmtleSk7IC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uCiAgICAgICAgICAgICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz4KICAgICAgICAgICAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlCgoKICAgICAgICAgICAgICBpZiAoIWluaXRpYWxTY3JvbGxSZXN0b3JlZCAmJiBzdGF0ZS5uYXZpZ2F0aW9uID09PSBJRExFX05BVklHQVRJT04pIHsKICAgICAgICAgICAgICAgIGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB2YXIgeSA9IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpOwoKICAgICAgICAgICAgICAgIGlmICh5ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdGUoewogICAgICAgICAgICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7CiAgICAgICAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7CiAgICAgICAgICAgICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7CiAgICAgICAgICAgICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBtYXRjaGVzKSB7CiAgICAgICAgICAgICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7CiAgICAgICAgICAgICAgICB2YXIgdXNlck1hdGNoZXMgPSBtYXRjaGVzLm1hcCgobSkgPT4gY3JlYXRlVXNlTWF0Y2hlc01hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKTsKICAgICAgICAgICAgICAgIHZhciBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgdXNlck1hdGNoZXMpIHx8IGxvY2F0aW9uLmtleTsKICAgICAgICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSBnZXRTY3JvbGxQb3NpdGlvbigpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykgewogICAgICAgICAgICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikgewogICAgICAgICAgICAgICAgdmFyIHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAoKG0pID0+IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKSk7CiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkobG9jYXRpb24sIHVzZXJNYXRjaGVzKSB8fCBsb2NhdGlvbi5rZXk7CiAgICAgICAgICAgICAgICB2YXIgeSA9IHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV07CgogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB5ID09PSAibnVtYmVyIikgewogICAgICAgICAgICAgICAgICByZXR1cm4geTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICByb3V0ZXIgPSB7CiAgICAgICAgICAgICAgZ2V0IGJhc2VuYW1lKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGluaXQuYmFzZW5hbWU7CiAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgZ2V0IHN0YXRlKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgIGdldCByb3V0ZXMoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVJvdXRlczsKICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICBpbml0aWFsaXplOiBpbml0aWFsaXplLAogICAgICAgICAgICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLAogICAgICAgICAgICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uOiBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbiwKICAgICAgICAgICAgICBuYXZpZ2F0ZTogbmF2aWdhdGUsCiAgICAgICAgICAgICAgZmV0Y2g6IGZldGNoLAogICAgICAgICAgICAgIHJldmFsaWRhdGU6IHJldmFsaWRhdGUsCiAgICAgICAgICAgICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyCiAgICAgICAgICAgICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRocwogICAgICAgICAgICAgIGNyZWF0ZUhyZWY6ICh0bykgPT4gaW5pdC5oaXN0b3J5LmNyZWF0ZUhyZWYodG8pLAogICAgICAgICAgICAgIGVuY29kZUxvY2F0aW9uOiAodG8pID0+IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbih0byksCiAgICAgICAgICAgICAgZ2V0RmV0Y2hlcjogZ2V0RmV0Y2hlciwKICAgICAgICAgICAgICBkZWxldGVGZXRjaGVyOiBkZWxldGVGZXRjaGVyLAogICAgICAgICAgICAgIGRpc3Bvc2U6IGRpc3Bvc2UsCiAgICAgICAgICAgICAgZ2V0QmxvY2tlcjogZ2V0QmxvY2tlciwKICAgICAgICAgICAgICBkZWxldGVCbG9ja2VyOiBkZWxldGVCbG9ja2VyLAogICAgICAgICAgICAgIF9pbnRlcm5hbEZldGNoQ29udHJvbGxlcnM6IGZldGNoQ29udHJvbGxlcnMsCiAgICAgICAgICAgICAgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlcjsKICAgICAgICAgIH0gLy8jZW5kcmVnaW9uCiAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgICAgLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIKICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgICAgICAgdmFyIFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wgPSBTeW1ib2woImRlZmVycmVkIik7CiAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKHJvdXRlcywgb3B0cykgewogICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KHJvdXRlcy5sZW5ndGggPiAwLCAiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlU3RhdGljSGFuZGxlciIpOwogICAgICAgICAgICB2YXIgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzKTsKICAgICAgICAgICAgdmFyIGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgIi8iOwogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogVGhlIHF1ZXJ5KCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciBkb2N1bWVudCByZXF1ZXN0cywgaW4gd2hpY2ggd2Ugd2FudCB0bwogICAgICAgICAgICAgKiBjYWxsIGFuIG9wdGlvbmFsIGFjdGlvbiBhbmQgcG90ZW50aWFsbHkgbXVsdGlwbGUgbG9hZGVycyBmb3IgYWxsIG5lc3RlZAogICAgICAgICAgICAgKiByb3V0ZXMuICBJdCByZXR1cm5zIGEgU3RhdGljSGFuZGxlckNvbnRleHQgb2JqZWN0LCB3aGljaCBpcyB2ZXJ5IHNpbWlsYXIKICAgICAgICAgICAgICogdG8gdGhlIHJvdXRlciBzdGF0ZSAobG9jYXRpb24sIGxvYWRlckRhdGEsIGFjdGlvbkRhdGEsIGVycm9ycywgZXRjLikgYW5kCiAgICAgICAgICAgICAqIGFsc28gYWRkcyBTU1Itc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgc3RhdHVzQ29kZSBhbmQgaGVhZGVycwogICAgICAgICAgICAgKiBmcm9tIGFjdGlvbi9sb2FkZXJzIFJlc3BvbnNlcy4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogSXQgX3Nob3VsZF8gbmV2ZXIgdGhyb3cgYW5kIHNob3VsZCByZXBvcnQgYWxsIGVycm9ycyB0aHJvdWdoIHRoZQogICAgICAgICAgICAgKiByZXR1cm5lZCBjb250ZXh0LmVycm9ycyBvYmplY3QsIHByb3Blcmx5IGFzc29jaWF0aW5nIGVycm9ycyB0byB0aGVpciBlcnJvcgogICAgICAgICAgICAgKiBib3VuZGFyeS4gIEFkZGl0aW9uYWxseSwgaXQgdHJhY2tzIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHdoaWNoIGNhbiBiZQogICAgICAgICAgICAgKiB1c2VkIHRvIGVtdWxhdGUgUmVhY3QgZXJyb3IgYm91bmRhcmllcyBkdXJpbmcgU1NyIGJ5IHBlcmZvcm1pbmcgYSBzZWNvbmQKICAgICAgICAgICAgICogcGFzcyBvbmx5IGRvd24gdG8gdGhlIGJvdW5kYXJ5SWQuCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIFRoZSBvbmUgZXhjZXB0aW9uIHdoZXJlIHdlIGRvIG5vdCByZXR1cm4gYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBpcyB3aGVuIGEKICAgICAgICAgICAgICogcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmV0dXJuZWQgb3IgdGhyb3duIGZyb20gYW55IGFjdGlvbi9sb2FkZXIuICBXZQogICAgICAgICAgICAgKiBwcm9wYWdhdGUgdGhhdCBvdXQgYW5kIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIHNvIHRoZSBIVFRQIHNlcnZlciBjYW4KICAgICAgICAgICAgICogcmV0dXJuIGl0IGRpcmVjdGx5LgogICAgICAgICAgICAgKi9mdW5jdGlvbgoKICAgICAgICAgICAgcXVlcnkoX3g0MiwgX3g0Mykge3JldHVybiBfcXVlcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFRoZSBxdWVyeVJvdXRlKCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciB0YXJnZXRlZCByb3V0ZSByZXF1ZXN0cywgZWl0aGVyCiAgICAgICAgICAgICAqIGZvciBmZXRjaCA/X2RhdGEgcmVxdWVzdHMgb3IgcmVzb3VyY2Ugcm91dGUgcmVxdWVzdHMuICBJbiB0aGlzIGNhc2UsIHdlCiAgICAgICAgICAgICAqIGFyZSBvbmx5IGV2ZXIgY2FsbGluZyBhIHNpbmdsZSBhY3Rpb24gb3IgbG9hZGVyLCBhbmQgd2UgYXJlIHJldHVybmluZyB0aGUKICAgICAgICAgICAgICogcmV0dXJuZWQgdmFsdWUgZGlyZWN0bHkuICBJbiBtb3N0IGNhc2VzLCB0aGlzIHdpbGwgYmUgYSBSZXNwb25zZSByZXR1cm5lZAogICAgICAgICAgICAgKiBmcm9tIHRoZSBhY3Rpb24vbG9hZGVyLCBidXQgaXQgbWF5IGJlIGEgcHJpbWl0aXZlIG9yIG90aGVyIHZhbHVlIGFzIHdlbGwgLQogICAgICAgICAgICAgKiBhbmQgaW4gc3VjaCBjYXNlcyB0aGUgY2FsbGluZyBjb250ZXh0IHNob3VsZCBoYW5kbGUgdGhhdCBhY2NvcmRpbmdseS4KICAgICAgICAgICAgICoKICAgICAgICAgICAgICogV2UgZG8gcmVzcGVjdCB0aGUgdGhyb3cvcmV0dXJuIGRpZmZlcmVudGlhdGlvbiwgc28gaWYgYW4gYWN0aW9uL2xvYWRlcgogICAgICAgICAgICAgKiB0aHJvd3MsIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCB0aHJvdyB0aGUgdmFsdWUuICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZQogICAgICAgICAgICAgKiBjYW4gZG8gcHJvcGVyIGJvdW5kYXJ5IGlkZW50aWZpY2F0aW9uIGluIFJlbWl4IHdoZXJlIGEgdGhyb3duIFJlc3BvbnNlCiAgICAgICAgICAgICAqIG11c3QgZ28gdG8gdGhlIENhdGNoIEJvdW5kYXJ5IGJ1dCBhIHJldHVybmVkIFJlc3BvbnNlIGlzIGhhcHB5LXBhdGguCiAgICAgICAgICAgICAqCiAgICAgICAgICAgICAqIE9uZSB0aGluZyB0byBub3RlIGlzIHRoYXQgYW55IFJvdXRlci1pbml0aWF0ZWQgRXJyb3JzIHRoYXQgbWFrZSBzZW5zZQogICAgICAgICAgICAgKiB0byBhc3NvY2lhdGUgd2l0aCBhIHN0YXR1cyBjb2RlIHdpbGwgYmUgdGhyb3duIGFzIGFuIEVycm9yUmVzcG9uc2UKICAgICAgICAgICAgICogaW5zdGFuY2Ugd2hpY2ggaW5jbHVkZSB0aGUgcmF3IEVycm9yLCBzdWNoIHRoYXQgdGhlIGNhbGxpbmcgY29udGV4dCBjYW4KICAgICAgICAgICAgICogc2VyaWFsaXplIHRoZSBlcnJvciBhcyB0aGV5IHNlZSBmaXQgd2hpbGUgaW5jbHVkaW5nIHRoZSBwcm9wZXIgcmVzcG9uc2UKICAgICAgICAgICAgICogY29kZS4gIEV4YW1wbGVzIGhlcmUgYXJlIDQwNCBhbmQgNDA1IGVycm9ycyB0aGF0IG9jY3VyIHByaW9yIHRvIHJlYWNoaW5nCiAgICAgICAgICAgICAqIGFueSB1c2VyLWRlZmluZWQgbG9hZGVycy4KICAgICAgICAgICAgICovZnVuY3Rpb24gX3F1ZXJ5KCkge19xdWVyeSA9IF9hc3luY1RvR2VuZXJhdG9yMiggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUyKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTEocmVxdWVzdCwgX3RlbXAyKSB7dmFyIF9yZWYyNCwgcmVxdWVzdENvbnRleHQsIHVybCwgbWV0aG9kLCBsb2NhdGlvbiwgbWF0Y2hlcywgZXJyb3IsIF9nZXRTaG9ydENpcmN1aXRNYXRjaDMsIG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLCByb3V0ZSwgX2Vycm9yMywgX2dldFNob3J0Q2lyY3VpdE1hdGNoNCwgbm90Rm91bmRNYXRjaGVzLCBfcm91dGUyLCByZXN1bHQ7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMTEkKF9jb250ZXh0MTEpIHt3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDExLnByZXYgPSBfY29udGV4dDExLm5leHQpIHtjYXNlIDA6X3JlZjI0ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMiwgcmVxdWVzdENvbnRleHQgPSBfcmVmMjQucmVxdWVzdENvbnRleHQ7dXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7bWV0aG9kID0gcmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKTtsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKCIiLCByb3V0ZXJfY3JlYXRlUGF0aCh1cmwpLCBudWxsLCAiZGVmYXVsdCIpO21hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpOyAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndAogICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09ICJoZWFkIikpIHtfY29udGV4dDExLm5leHQgPSAxMTticmVhazt9ZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwgeyBtZXRob2Q6IG1ldGhvZCB9KTtfZ2V0U2hvcnRDaXJjdWl0TWF0Y2gzID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKSwgbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMgPSBfZ2V0U2hvcnRDaXJjdWl0TWF0Y2gzLm1hdGNoZXMsIHJvdXRlID0gX2dldFNob3J0Q2lyY3VpdE1hdGNoMy5yb3V0ZTtyZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIHsgYmFzZW5hbWU6IGJhc2VuYW1lLCBsb2NhdGlvbjogbG9jYXRpb24sIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLCBsb2FkZXJEYXRhOiB7fSwgYWN0aW9uRGF0YTogbnVsbCwgZXJyb3JzOiBfZGVmaW5lUHJvcGVydHkyKHt9LCByb3V0ZS5pZCwgZXJyb3IpLCBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsIGxvYWRlckhlYWRlcnM6IHt9LCBhY3Rpb25IZWFkZXJzOiB7fSwgYWN0aXZlRGVmZXJyZWRzOiBudWxsIH0pO2Nhc2UgMTE6aWYgKG1hdGNoZXMpIHtfY29udGV4dDExLm5leHQgPSAxNTticmVhazt9X2Vycm9yMyA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7IHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSB9KTtfZ2V0U2hvcnRDaXJjdWl0TWF0Y2g0ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKSwgbm90Rm91bmRNYXRjaGVzID0gX2dldFNob3J0Q2lyY3VpdE1hdGNoNC5tYXRjaGVzLCBfcm91dGUyID0gX2dldFNob3J0Q2lyY3VpdE1hdGNoNC5yb3V0ZTtyZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIHsgYmFzZW5hbWU6IGJhc2VuYW1lLCBsb2NhdGlvbjogbG9jYXRpb24sIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcywgbG9hZGVyRGF0YToge30sIGFjdGlvbkRhdGE6IG51bGwsIGVycm9yczogX2RlZmluZVByb3BlcnR5Mih7fSwgX3JvdXRlMi5pZCwgX2Vycm9yMyksIHN0YXR1c0NvZGU6IF9lcnJvcjMuc3RhdHVzLCBsb2FkZXJIZWFkZXJzOiB7fSwgYWN0aW9uSGVhZGVyczoge30sIGFjdGl2ZURlZmVycmVkczogbnVsbCB9KTtjYXNlIDE1Ol9jb250ZXh0MTEubmV4dCA9IDE3O3JldHVybiBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0KTtjYXNlIDE3OnJlc3VsdCA9IF9jb250ZXh0MTEuc2VudDtpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge19jb250ZXh0MTEubmV4dCA9IDIwO2JyZWFrO31yZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIHJlc3VsdCk7Y2FzZSAyMDpyZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIF9leHRlbmRzKHsgbG9jYXRpb246IGxvY2F0aW9uLCBiYXNlbmFtZTogYmFzZW5hbWUgfSwgcmVzdWx0KSk7Y2FzZSAyMTpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDExLnN0b3AoKTt9fSwgX2NhbGxlZTExKTt9KSk7cmV0dXJuIF9xdWVyeS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO31mdW5jdGlvbgoKICAgICAgICAgICAgcXVlcnlSb3V0ZShfeDQ0LCBfeDQ1KSB7cmV0dXJuIF9xdWVyeVJvdXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIF9xdWVyeVJvdXRlKCkge19xdWVyeVJvdXRlID0gX2FzeW5jVG9HZW5lcmF0b3IyKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZTIoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMihyZXF1ZXN0LCBfdGVtcDMpIHt2YXIgX3JlZjI1LCByb3V0ZUlkLCByZXF1ZXN0Q29udGV4dCwgdXJsLCBtZXRob2QsIGxvY2F0aW9uLCBtYXRjaGVzLCBtYXRjaCwgcmVzdWx0LCBlcnJvciwgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlLCBkYXRhO3JldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lMigpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEyJChfY29udGV4dDEyKSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxMi5wcmV2ID0gX2NvbnRleHQxMi5uZXh0KSB7Y2FzZSAwOl9yZWYyNSA9CgoKCiAgICAgICAgICAgICAgICAgICAgICBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzLCByb3V0ZUlkID0gX3JlZjI1LnJvdXRlSWQsIHJlcXVlc3RDb250ZXh0ID0gX3JlZjI1LnJlcXVlc3RDb250ZXh0OwogICAgICAgICAgICAgICAgICAgICAgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7CiAgICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbigiIiwgcm91dGVyX2NyZWF0ZVBhdGgodXJsKSwgbnVsbCwgImRlZmF1bHQiKTsKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpOyAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndAogICAgICAgICAgICAgICAgICAgICAgaWYgKCEoCiAgICAgICAgICAgICAgICAgICAgICAhaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gImhlYWQiICYmIG1ldGhvZCAhPT0gIm9wdGlvbnMiKSkge19jb250ZXh0MTIubmV4dCA9IDk7YnJlYWs7fXRocm93ICgKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZAogICAgICAgICAgICAgICAgICAgICAgICB9KSk7Y2FzZSA5OmlmICgKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXMpIHtfY29udGV4dDEyLm5leHQgPSAxMTticmVhazt9dGhyb3cgKAogICAgICAgICAgICAgICAgICAgICAgICBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZQogICAgICAgICAgICAgICAgICAgICAgICB9KSk7Y2FzZSAxMToKCgogICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSByb3V0ZUlkID8gbWF0Y2hlcy5maW5kKChtKSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSA6IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtpZiAoISgKCiAgICAgICAgICAgICAgICAgICAgICByb3V0ZUlkICYmICFtYXRjaCkpIHtfY29udGV4dDEyLm5leHQgPSAxNjticmVhazt9dGhyb3cgKAogICAgICAgICAgICAgICAgICAgICAgICBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywgewogICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZUlkOiByb3V0ZUlkCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtjYXNlIDE2OmlmICgKICAgICAgICAgICAgICAgICAgICAgIG1hdGNoKSB7X2NvbnRleHQxMi5uZXh0ID0gMTg7YnJlYWs7fXRocm93ICgKCiAgICAgICAgICAgICAgICAgICAgICAgIGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtjYXNlIDE4Ol9jb250ZXh0MTIubmV4dCA9IDIwO3JldHVybiAoCgoKICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgbWF0Y2gpKTtjYXNlIDIwOnJlc3VsdCA9IF9jb250ZXh0MTIuc2VudDtpZiAoIQoKICAgICAgICAgICAgICAgICAgICAgIGlzUmVzcG9uc2UocmVzdWx0KSkge19jb250ZXh0MTIubmV4dCA9IDIzO2JyZWFrO31yZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoInJldHVybiIsCiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQpO2Nhc2UgMjM6CgoKICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7aWYgKCEoCgogICAgICAgICAgICAgICAgICAgICAgZXJyb3IgIT09IHVuZGVmaW5lZCkpIHtfY29udGV4dDEyLm5leHQgPSAyNjticmVhazt9dGhyb3cgKAoKCgoKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IpO2Nhc2UgMjY6aWYgKCEKCgoKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hY3Rpb25EYXRhKSB7X2NvbnRleHQxMi5uZXh0ID0gMjg7YnJlYWs7fXJldHVybiBfY29udGV4dDEyLmFicnVwdCgicmV0dXJuIiwKICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC52YWx1ZXMocmVzdWx0LmFjdGlvbkRhdGEpWzBdKTtjYXNlIDI4OmlmICghCgoKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sb2FkZXJEYXRhKSB7X2NvbnRleHQxMi5uZXh0ID0gMzI7YnJlYWs7fQoKCiAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gT2JqZWN0LnZhbHVlcyhyZXN1bHQubG9hZGVyRGF0YSlbMF07CgogICAgICAgICAgICAgICAgICAgICAgaWYgKChfcmVzdWx0JGFjdGl2ZURlZmVycmUgPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzKSAhPSBudWxsICYmIF9yZXN1bHQkYWN0aXZlRGVmZXJyZVttYXRjaC5yb3V0ZS5pZF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtVTlNBRkVfREVGRVJSRURfU1lNQk9MXSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHNbbWF0Y2gucm91dGUuaWRdOwogICAgICAgICAgICAgICAgICAgICAgfXJldHVybiBfY29udGV4dDEyLmFicnVwdCgicmV0dXJuIiwKCiAgICAgICAgICAgICAgICAgICAgICBkYXRhKTtjYXNlIDMyOnJldHVybiBfY29udGV4dDEyLmFicnVwdCgicmV0dXJuIiwKCgogICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkKTtjYXNlIDMzOmNhc2UgImVuZCI6cmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpO319LCBfY2FsbGVlMTIpO30pKTtyZXR1cm4gX3F1ZXJ5Um91dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24KCgogICAgICAgICAgICBxdWVyeUltcGwoX3g0NiwgX3g0NywgX3g0OCwgX3g0OSwgX3g1MCkge3JldHVybiBfcXVlcnlJbXBsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIF9xdWVyeUltcGwoKSB7X3F1ZXJ5SW1wbCA9IF9hc3luY1RvR2VuZXJhdG9yMiggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUyKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlMTMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSB7dmFyIF9yZXN1bHQsIHJlc3VsdDtyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZTIoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMyQoX2NvbnRleHQxMykge3doaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MTMucHJldiA9IF9jb250ZXh0MTMubmV4dCkge2Nhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgIHJvdXRlcl9pbnZhcmlhbnQocmVxdWVzdC5zaWduYWwsICJxdWVyeSgpL3F1ZXJ5Um91dGUoKSByZXF1ZXN0cyBtdXN0IGNvbnRhaW4gYW4gQWJvcnRDb250cm9sbGVyIHNpZ25hbCIpO19jb250ZXh0MTMucHJldiA9IDE7aWYgKCEKCgogICAgICAgICAgICAgICAgICAgICAgaXNNdXRhdGlvbk1ldGhvZChyZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpKSkge19jb250ZXh0MTMubmV4dCA9IDc7YnJlYWs7fV9jb250ZXh0MTMubmV4dCA9IDU7cmV0dXJuICgKICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2ggfHwgZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pLCByZXF1ZXN0Q29udGV4dCwgcm91dGVNYXRjaCAhPSBudWxsKSk7Y2FzZSA1Ol9yZXN1bHQgPSBfY29udGV4dDEzLnNlbnQ7cmV0dXJuIF9jb250ZXh0MTMuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgX3Jlc3VsdCk7Y2FzZSA3Ol9jb250ZXh0MTMubmV4dCA9IDk7cmV0dXJuICgKCgogICAgICAgICAgICAgICAgICAgICAgICBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoKSk7Y2FzZSA5OnJlc3VsdCA9IF9jb250ZXh0MTMuc2VudDtyZXR1cm4gX2NvbnRleHQxMy5hYnJ1cHQoInJldHVybiIsCiAgICAgICAgICAgICAgICAgICAgICBpc1Jlc3BvbnNlKHJlc3VsdCkgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkRhdGE6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9CiAgICAgICAgICAgICAgICAgICAgICB9KSk7Y2FzZSAxMzpfY29udGV4dDEzLnByZXYgPSAxMztfY29udGV4dDEzLnQwID0gX2NvbnRleHQxM1siY2F0Y2giXSgxKTtpZiAoIQoKCgoKICAgICAgICAgICAgICAgICAgICAgIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKF9jb250ZXh0MTMudDApKSB7X2NvbnRleHQxMy5uZXh0ID0gMTk7YnJlYWs7fWlmICghKAogICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy50MC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yICYmICFpc1JlZGlyZWN0UmVzcG9uc2UoX2NvbnRleHQxMy50MC5yZXNwb25zZSkpKSB7X2NvbnRleHQxMy5uZXh0ID0gMTg7YnJlYWs7fXRocm93ICgKICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy50MC5yZXNwb25zZSk7Y2FzZSAxODpyZXR1cm4gX2NvbnRleHQxMy5hYnJ1cHQoInJldHVybiIsCgoKICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTMudDAucmVzcG9uc2UpO2Nhc2UgMTk6aWYgKCEKCgoKCiAgICAgICAgICAgICAgICAgICAgICBpc1JlZGlyZWN0UmVzcG9uc2UoX2NvbnRleHQxMy50MCkpIHtfY29udGV4dDEzLm5leHQgPSAyMTticmVhazt9cmV0dXJuIF9jb250ZXh0MTMuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDEzLnQwKTtjYXNlIDIxOnRocm93IF9jb250ZXh0MTMudDA7Y2FzZSAyMjpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDEzLnN0b3AoKTt9fSwgX2NhbGxlZTEzLCBudWxsLCBbWzEsIDEzXV0pO30pKTtyZXR1cm4gX3F1ZXJ5SW1wbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO31mdW5jdGlvbgoKCgoKCgoKICAgICAgICAgICAgc3VibWl0KF94NTEsIF94NTIsIF94NTMsIF94NTQsIF94NTUpIHtyZXR1cm4gX3N1Ym1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO31mdW5jdGlvbiBfc3VibWl0KCkge19zdWJtaXQgPSBfYXN5bmNUb0dlbmVyYXRvcjIoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lMigpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE0KHJlcXVlc3QsIG1hdGNoZXMsIGFjdGlvbk1hdGNoLCByZXF1ZXN0Q29udGV4dCwgaXNSb3V0ZVJlcXVlc3QpIHt2YXIgcmVzdWx0LCBlcnJvciwgbWV0aG9kLCBfZXJyb3I0LCBib3VuZGFyeU1hdGNoLCBfY29udGV4dDE0LCBsb2FkZXJSZXF1ZXN0LCBjb250ZXh0O3JldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lMigpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE0JChfY29udGV4dDE1KSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxNS5wcmV2ID0gX2NvbnRleHQxNS5uZXh0KSB7Y2FzZSAwOmlmICgKCgogICAgICAgICAgICAgICAgICAgICAgYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uKSB7X2NvbnRleHQxNS5uZXh0ID0gNzticmVhazt9CiAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWQKICAgICAgICAgICAgICAgICAgICAgIH0pO2lmICghCgogICAgICAgICAgICAgICAgICAgICAgaXNSb3V0ZVJlcXVlc3QpIHtfY29udGV4dDE1Lm5leHQgPSA0O2JyZWFrO310aHJvdyAoCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKTtjYXNlIDQ6CgoKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvciwKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yCiAgICAgICAgICAgICAgICAgICAgICB9O19jb250ZXh0MTUubmV4dCA9IDEzO2JyZWFrO2Nhc2UgNzpfY29udGV4dDE1Lm5leHQgPSA5O3JldHVybiAoCgogICAgICAgICAgICAgICAgICAgICAgICBjYWxsTG9hZGVyT3JBY3Rpb24oImFjdGlvbiIsIHJlcXVlc3QsIGFjdGlvbk1hdGNoLCBtYXRjaGVzLCBiYXNlbmFtZSwgdHJ1ZSwgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0KSk7Y2FzZSA5OnJlc3VsdCA9IF9jb250ZXh0MTUuc2VudDtpZiAoIQoKICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtfY29udGV4dDE1Lm5leHQgPSAxMzticmVhazt9CiAgICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/ICJxdWVyeVJvdXRlIiA6ICJxdWVyeSI7dGhyb3cgKAogICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IobWV0aG9kICsgIigpIGNhbGwgYWJvcnRlZCIpKTtjYXNlIDEzOmlmICghCgoKCiAgICAgICAgICAgICAgICAgICAgICBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtfY29udGV4dDE1Lm5leHQgPSAxNTticmVhazt9dGhyb3cgKAoKCgoKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlc3BvbnNlKG51bGwsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkpO2Nhc2UgMTU6aWYgKCEKCgogICAgICAgICAgICAgICAgICAgICAgaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7X2NvbnRleHQxNS5uZXh0ID0gMjA7YnJlYWs7fQogICAgICAgICAgICAgICAgICAgICAgX2Vycm9yNCA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJkZWZlci1hY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICB9KTtpZiAoIQoKICAgICAgICAgICAgICAgICAgICAgIGlzUm91dGVSZXF1ZXN0KSB7X2NvbnRleHQxNS5uZXh0ID0gMTk7YnJlYWs7fXRocm93ICgKICAgICAgICAgICAgICAgICAgICAgICAgX2Vycm9yNCk7Y2FzZSAxOToKCgogICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLAogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogX2Vycm9yNAogICAgICAgICAgICAgICAgICAgICAgfTtjYXNlIDIwOmlmICghCgoKICAgICAgICAgICAgICAgICAgICAgIGlzUm91dGVSZXF1ZXN0KSB7X2NvbnRleHQxNS5uZXh0ID0gMjQ7YnJlYWs7fWlmICghCgoKICAgICAgICAgICAgICAgICAgICAgIGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge19jb250ZXh0MTUubmV4dCA9IDIzO2JyZWFrO310aHJvdyAoCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJvcik7Y2FzZSAyMzpyZXR1cm4gX2NvbnRleHQxNS5hYnJ1cHQoInJldHVybiIsCgoKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlczogW2FjdGlvbk1hdGNoXSwKICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyRGF0YToge30sCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkRhdGE6IF9kZWZpbmVQcm9wZXJ0eTIoe30sCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk1hdGNoLnJvdXRlLmlkLCByZXN1bHQuZGF0YSksCgogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnM6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IHN0YXR1c0NvZGUgKyBoZWFkZXJzIGFyZSB1bnVzZWQgaGVyZSBzaW5jZSBxdWVyeVJvdXRlIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugb3IgdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLAogICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uSGVhZGVyczoge30sCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbAogICAgICAgICAgICAgICAgICAgICAgfSk7Y2FzZSAyNDppZiAoIQoKCiAgICAgICAgICAgICAgICAgICAgICBpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtfY29udGV4dDE1Lm5leHQgPSAzMDticmVhazt9CiAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnMKICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb24KICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtfY29udGV4dDE1Lm5leHQgPSAyODtyZXR1cm4gKAogICAgICAgICAgICAgICAgICAgICAgICBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bmRlZmluZWQsIF9kZWZpbmVQcm9wZXJ0eTIoe30sCiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5TWF0Y2gucm91dGUuaWQsIHJlc3VsdC5lcnJvcikpKTtjYXNlIDI4Ol9jb250ZXh0MTQgPSBfY29udGV4dDE1LnNlbnQ7cmV0dXJuIF9jb250ZXh0MTUuYWJydXB0KCJyZXR1cm4iLAoKCiAgICAgICAgICAgICAgICAgICAgICBfZXh0ZW5kcyh7fSwgX2NvbnRleHQxNCwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCwKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uRGF0YTogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8gX2RlZmluZVByb3BlcnR5Mih7fSwKICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uTWF0Y2gucm91dGUuaWQsIHJlc3VsdC5oZWFkZXJzKSA6CiAgICAgICAgICAgICAgICAgICAgICAgIHt9KQogICAgICAgICAgICAgICAgICAgICAgfSkpO2Nhc2UgMzA6CiAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnMKCgogICAgICAgICAgICAgICAgICAgICAgbG9hZGVyUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycywKICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6IHJlcXVlc3QucmVkaXJlY3QsCiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWwKICAgICAgICAgICAgICAgICAgICAgIH0pO19jb250ZXh0MTUubmV4dCA9IDMzO3JldHVybiAoCiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRSb3V0ZURhdGEobG9hZGVyUmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQpKTtjYXNlIDMzOmNvbnRleHQgPSBfY29udGV4dDE1LnNlbnQ7cmV0dXJuIF9jb250ZXh0MTUuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgX2V4dGVuZHMoe30sIGNvbnRleHQsIHJlc3VsdC5zdGF0dXNDb2RlID8gewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzQ29kZQogICAgICAgICAgICAgICAgICAgICAgfSA6IHt9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbkRhdGE6IF9kZWZpbmVQcm9wZXJ0eTIoe30sCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbk1hdGNoLnJvdXRlLmlkLCByZXN1bHQuZGF0YSksCgogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyBfZGVmaW5lUHJvcGVydHkyKHt9LAogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25NYXRjaC5yb3V0ZS5pZCwgcmVzdWx0LmhlYWRlcnMpIDoKICAgICAgICAgICAgICAgICAgICAgICAge30pCiAgICAgICAgICAgICAgICAgICAgICB9KSk7Y2FzZSAzNTpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDE1LnN0b3AoKTt9fSwgX2NhbGxlZTE0KTt9KSk7cmV0dXJuIF9zdWJtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24KCgogICAgICAgICAgICBsb2FkUm91dGVEYXRhKF94NTYsIF94NTcsIF94NTgsIF94NTksIF94NjApIHtyZXR1cm4gX2xvYWRSb3V0ZURhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24gX2xvYWRSb3V0ZURhdGEoKSB7X2xvYWRSb3V0ZURhdGEgPSBfYXN5bmNUb0dlbmVyYXRvcjIoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lMigpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE1KHJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoLCBwZW5kaW5nQWN0aW9uRXJyb3IpIHt2YXIgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBtZXRob2QsIGFjdGl2ZURlZmVycmVkcywgY29udGV4dCwgZXhlY3V0ZWRMb2FkZXJzO3JldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lMigpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE1JChfY29udGV4dDE2KSB7d2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQxNi5wcmV2ID0gX2NvbnRleHQxNi5uZXh0KSB7Y2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgaXNSb3V0ZVJlcXVlc3QgPSByb3V0ZU1hdGNoICE9IG51bGw7IC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnlSb3V0ZSgpKQogICAgICAgICAgICAgICAgICAgICAgaWYgKCEoCiAgICAgICAgICAgICAgICAgICAgICBpc1JvdXRlUmVxdWVzdCAmJiAhKHJvdXRlTWF0Y2ggIT0gbnVsbCAmJiByb3V0ZU1hdGNoLnJvdXRlLmxvYWRlcikpKSB7X2NvbnRleHQxNi5uZXh0ID0gMzticmVhazt9dGhyb3cgKAogICAgICAgICAgICAgICAgICAgICAgICBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwgewogICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlSWQ6IHJvdXRlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IHJvdXRlTWF0Y2gucm91dGUuaWQKICAgICAgICAgICAgICAgICAgICAgICAgfSkpO2Nhc2UgMzoKCgogICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE1hdGNoZXMgPSByb3V0ZU1hdGNoID8gW3JvdXRlTWF0Y2hdIDogZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgT2JqZWN0LmtleXMocGVuZGluZ0FjdGlvbkVycm9yIHx8IHt9KVswXSk7CiAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKChtKSA9PiBtLnJvdXRlLmxvYWRlcik7IC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnkoKSkKICAgICAgICAgICAgICAgICAgICAgIGlmICghKAogICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApKSB7X2NvbnRleHQxNi5uZXh0ID0gNzticmVhazt9cmV0dXJuIF9jb250ZXh0MTYuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzOiBtYXRjaGVzLAogICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYSBudWxsIGZvciBhbGwgbWF0Y2hlZCByb3V0ZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudAogICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXJEYXRhOiBtYXRjaGVzLnJlZHVjZSgoYWNjLCBtKSA9PiBPYmplY3QuYXNzaWduKGFjYywgX2RlZmluZVByb3BlcnR5Mih7fSwKICAgICAgICAgICAgICAgICAgICAgICAgbS5yb3V0ZS5pZCwgbnVsbCkpLAogICAgICAgICAgICAgICAgICAgICAgICB7fSksCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvbkVycm9yIHx8IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCwKICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVySGVhZGVyczoge30sCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbAogICAgICAgICAgICAgICAgICAgICAgfSk7Y2FzZSA3Ol9jb250ZXh0MTYubmV4dCA9IDk7cmV0dXJuICgKCgogICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChfdG9Db25zdW1hYmxlQXJyYXkyKG1hdGNoZXNUb0xvYWQubWFwKChtYXRjaCkgPT4gY2FsbExvYWRlck9yQWN0aW9uKCJsb2FkZXIiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgYmFzZW5hbWUsIHRydWUsIGlzUm91dGVSZXF1ZXN0LCByZXF1ZXN0Q29udGV4dCkpKSkpO2Nhc2UgOTpyZXN1bHRzID0gX2NvbnRleHQxNi5zZW50O2lmICghCgogICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge19jb250ZXh0MTYubmV4dCA9IDEzO2JyZWFrO30KICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IGlzUm91dGVSZXF1ZXN0ID8gInF1ZXJ5Um91dGUiIDogInF1ZXJ5Ijt0aHJvdyAoCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcihtZXRob2QgKyAiKCkgY2FsbCBhYm9ydGVkIikpO2Nhc2UgMTM6CiAgICAgICAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVycwoKCiAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7CiAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7IC8vIEFkZCBhIG51bGwgZm9yIGFueSBub24tbG9hZGVyIG1hdGNoZXMgZm9yIHByb3BlciByZXZhbGlkYXRpb24gb24gdGhlIGNsaWVudAoKICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAoKG1hdGNoKSA9PiBtYXRjaC5yb3V0ZS5pZCkpOwogICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5mb3JFYWNoKChtYXRjaCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWV4ZWN1dGVkTG9hZGVycy5oYXMobWF0Y2gucm91dGUuaWQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pO3JldHVybiBfY29udGV4dDE2LmFicnVwdCgicmV0dXJuIiwKICAgICAgICAgICAgICAgICAgICAgIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM6IG1hdGNoZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLnNpemUgPiAwID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpIDogbnVsbAogICAgICAgICAgICAgICAgICAgICAgfSkpO2Nhc2UgMTg6Y2FzZSAiZW5kIjpyZXR1cm4gX2NvbnRleHQxNi5zdG9wKCk7fX0sIF9jYWxsZWUxNSk7fSkpO3JldHVybiBfbG9hZFJvdXRlRGF0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO30KCgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIGRhdGFSb3V0ZXM6IGRhdGFSb3V0ZXMsCiAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LAogICAgICAgICAgICAgIHF1ZXJ5Um91dGU6IHF1ZXJ5Um91dGUKICAgICAgICAgICAgfTsKICAgICAgICAgIH0gLy8jZW5kcmVnaW9uCiAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwogICAgICAgICAgLy8jcmVnaW9uIEhlbHBlcnMKICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLAogICAgICAgICAgICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yKHJvdXRlcywgY29udGV4dCwgZXJyb3IpIHsKICAgICAgICAgICAgdmFyIG5ld0NvbnRleHQgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCwgewogICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDUwMCwKICAgICAgICAgICAgICBlcnJvcnM6IF9kZWZpbmVQcm9wZXJ0eTIoe30sCiAgICAgICAgICAgICAgY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWQsIGVycm9yKQoKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gbmV3Q29udGV4dDsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpIHsKICAgICAgICAgICAgcmV0dXJuIG9wdHMgIT0gbnVsbCAmJiAiZm9ybURhdGEiIGluIG9wdHM7CiAgICAgICAgICB9IC8vIE5vcm1hbGl6ZSBuYXZpZ2F0aW9uIG9wdGlvbnMgYnkgY29udmVydGluZyBmb3JtTWV0aG9kPUdFVCBmb3JtRGF0YSBvYmplY3RzIHRvCiAgICAgICAgICAvLyBVUkxTZWFyY2hQYXJhbXMgc28gdGhleSBiZWhhdmUgaWRlbnRpY2FsbHkgdG8gbGlua3Mgd2l0aCBxdWVyeSBwYXJhbXMKCgogICAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzLCBpc0ZldGNoZXIpIHsKICAgICAgICAgICAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgaXNGZXRjaGVyID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwYXRoID0gdHlwZW9mIHRvID09PSAic3RyaW5nIiA/IHRvIDogcm91dGVyX2NyZWF0ZVBhdGgodG8pOyAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnMKCiAgICAgICAgICAgIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkgewogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9wdHMuZm9ybU1ldGhvZCAmJiAhaXNWYWxpZE1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsCiAgICAgICAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHsKICAgICAgICAgICAgICAgICAgbWV0aG9kOiBvcHRzLmZvcm1NZXRob2QKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSAvLyBDcmVhdGUgYSBTdWJtaXNzaW9uIG9uIG5vbi1HRVQgbmF2aWdhdGlvbnMKCgogICAgICAgICAgICB2YXIgc3VibWlzc2lvbjsKCiAgICAgICAgICAgIGlmIChvcHRzLmZvcm1EYXRhKSB7CiAgICAgICAgICAgICAgc3VibWlzc2lvbiA9IHsKICAgICAgICAgICAgICAgIGZvcm1NZXRob2Q6IG9wdHMuZm9ybU1ldGhvZCB8fCAiZ2V0IiwKICAgICAgICAgICAgICAgIGZvcm1BY3Rpb246IHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpLAogICAgICAgICAgICAgICAgZm9ybUVuY1R5cGU6IG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSB8fCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIiwKICAgICAgICAgICAgICAgIGZvcm1EYXRhOiBvcHRzLmZvcm1EYXRhCiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgaWYgKGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCwKICAgICAgICAgICAgICAgICAgc3VibWlzc2lvbjogc3VibWlzc2lvbgogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnMKCgogICAgICAgICAgICB2YXIgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgdmFyIHNlYXJjaFBhcmFtcyA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKG9wdHMuZm9ybURhdGEpOyAvLyBTaW5jZSBmZXRjaGVyIEdFVCBzdWJtaXNzaW9ucyBvbmx5IHJ1biBhIHNpbmdsZSBsb2FkZXIgKGFzIG9wcG9zZWQgdG8KICAgICAgICAgICAgICAvLyBuYXZpZ2F0aW9uIEdFVCBzdWJtaXNzaW9ucyB3aGljaCBydW4gYWxsIGxvYWRlcnMpLCB3ZSBuZWVkIHRvIHByZXNlcnZlCiAgICAgICAgICAgICAgLy8gYW55IGluY29taW5nID9pbmRleCBwYXJhbXMKCiAgICAgICAgICAgICAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7CiAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKCJpbmRleCIsICIiKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHBhcnNlZFBhdGguc2VhcmNoID0gIj8iICsgc2VhcmNoUGFyYW1zOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsCiAgICAgICAgICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDApCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBwYXRoOiByb3V0ZXJfY3JlYXRlUGF0aChwYXJzZWRQYXRoKSwKICAgICAgICAgICAgICBzdWJtaXNzaW9uOiBzdWJtaXNzaW9uCiAgICAgICAgICAgIH07CiAgICAgICAgICB9IC8vIEZpbHRlciBvdXQgYWxsIHJvdXRlcyBiZWxvdyBhbnkgY2F1Z2h0IGVycm9yIGFzIHRoZXkgYXJlbid0IGdvaW5nIHRvCiAgICAgICAgICAvLyByZW5kZXIgc28gd2UgZG9uJ3QgbmVlZCB0byBsb2FkIHRoZW0KCgogICAgICAgICAgZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkgewogICAgICAgICAgICB2YXIgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlczsKCiAgICAgICAgICAgIGlmIChib3VuZGFyeUlkKSB7CiAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbWF0Y2hlcy5maW5kSW5kZXgoKG0pID0+IG0ucm91dGUuaWQgPT09IGJvdW5kYXJ5SWQpOwoKICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkgewogICAgICAgICAgICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gYm91bmRhcnlNYXRjaGVzOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yLCBmZXRjaExvYWRNYXRjaGVzKSB7CiAgICAgICAgICAgIHZhciBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF0gOiBwZW5kaW5nQWN0aW9uRGF0YSA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdIDogdW5kZWZpbmVkOyAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvbgoKICAgICAgICAgICAgdmFyIGJvdW5kYXJ5SWQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdIDogdW5kZWZpbmVkOwogICAgICAgICAgICB2YXIgYm91bmRhcnlNYXRjaGVzID0gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCk7CiAgICAgICAgICAgIHZhciBuYXZpZ2F0aW9uTWF0Y2hlcyA9IGJvdW5kYXJ5TWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gbWF0Y2gucm91dGUubG9hZGVyICE9IG51bGwgJiYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgLy8gSWYgdGhpcyByb3V0ZSBoYWQgYSBwZW5kaW5nIGRlZmVycmVkIGNhbmNlbGxlZCBpdCBtdXN0IGJlIHJldmFsaWRhdGVkCiAgICAgICAgICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnNvbWUoKGlkKSA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpIHx8IHNob3VsZFJldmFsaWRhdGVMb2FkZXIoaGlzdG9yeSwgc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBzdWJtaXNzaW9uLCBsb2NhdGlvbiwgbWF0Y2gsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGFjdGlvblJlc3VsdCkpKTsgLy8gUGljayBmZXRjaGVyLmxvYWRzIHRoYXQgbmVlZCB0byBiZSByZXZhbGlkYXRlZAoKICAgICAgICAgICAgdmFyIHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107CiAgICAgICAgICAgIGZldGNoTG9hZE1hdGNoZXMgJiYgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfcmVmMTEsIGtleSkgPT4gewogICAgICAgICAgICAgIHZhciBfcmVmMjggPSBfc2xpY2VkVG9BcnJheTIoX3JlZjExLCAzKSxocmVmID0gX3JlZjI4WzBdLG1hdGNoID0gX3JlZjI4WzFdLGZldGNoTWF0Y2hlcyA9IF9yZWYyOFsyXTsKCiAgICAgICAgICAgICAgLy8gVGhpcyBmZXRjaGVyIHdhcyBjYW5jZWxsZWQgZnJvbSBhIHByaW9yIGFjdGlvbiBzdWJtaXNzaW9uIC0gZm9yY2UgcmVsb2FkCiAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7CiAgICAgICAgICAgICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKFtrZXksIGhyZWYsIG1hdGNoLCBmZXRjaE1hdGNoZXNdKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQpIHsKICAgICAgICAgICAgICAgIHZhciBzaG91bGRSZXZhbGlkYXRlID0gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihoaXN0b3J5LCBocmVmLCBtYXRjaCwgc3VibWlzc2lvbiwgaHJlZiwgbWF0Y2gsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGFjdGlvblJlc3VsdCk7CgogICAgICAgICAgICAgICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHsKICAgICAgICAgICAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaChba2V5LCBocmVmLCBtYXRjaCwgZmV0Y2hNYXRjaGVzXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGlzTmV3TG9hZGVyKGN1cnJlbnRMb2FkZXJEYXRhLCBjdXJyZW50TWF0Y2gsIG1hdGNoKSB7CiAgICAgICAgICAgIHZhciBpc05ldyA9IC8vIFthXSAtPiBbYSwgYl0KICAgICAgICAgICAgIWN1cnJlbnRNYXRjaCB8fCAvLyBbYSwgYl0gLT4gW2EsIGNdCiAgICAgICAgICAgIG1hdGNoLnJvdXRlLmlkICE9PSBjdXJyZW50TWF0Y2gucm91dGUuaWQ7IC8vIEhhbmRsZSB0aGUgY2FzZSB0aGF0IHdlIGRvbid0IGhhdmUgZGF0YSBmb3IgYSByZS11c2VkIHJvdXRlLCBwb3RlbnRpYWxseQogICAgICAgICAgICAvLyBmcm9tIGEgcHJpb3IgZXJyb3Igb3IgZnJvbSBhIGNhbmNlbGxlZCBwZW5kaW5nIGRlZmVycmVkCgogICAgICAgICAgICB2YXIgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkOyAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhCgogICAgICAgICAgICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgewogICAgICAgICAgICB2YXIgY3VycmVudFBhdGggPSBjdXJyZW50TWF0Y2gucm91dGUucGF0aDsKICAgICAgICAgICAgcmV0dXJuICgvLyBwYXJhbSBjaGFuZ2UgZm9yIHRoaXMgbWF0Y2gsIC91c2Vycy8xMjMgLT4gL3VzZXJzLzQ1NgogICAgICAgICAgICAgIGN1cnJlbnRNYXRjaC5wYXRobmFtZSAhPT0gbWF0Y2gucGF0aG5hbWUgfHwgLy8gc3BsYXQgcGFyYW0gY2hhbmdlZCwgd2hpY2ggaXMgbm90IHByZXNlbnQgaW4gbWF0Y2gucGF0aAogICAgICAgICAgICAgIC8vIGUuZy4gL2ZpbGVzL2ltYWdlcy9hdmF0YXIuanBnIC0+IGZpbGVzL2ZpbmFuY2VzLnhscwogICAgICAgICAgICAgIGN1cnJlbnRQYXRoICYmIGN1cnJlbnRQYXRoLmVuZHNXaXRoKCIqIikgJiYgY3VycmVudE1hdGNoLnBhcmFtc1siKiJdICE9PSBtYXRjaC5wYXJhbXNbIioiXSk7CgogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHNob3VsZFJldmFsaWRhdGVMb2FkZXIoaGlzdG9yeSwgY3VycmVudExvY2F0aW9uLCBjdXJyZW50TWF0Y2gsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBtYXRjaCwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgYWN0aW9uUmVzdWx0KSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwoY3VycmVudExvY2F0aW9uKTsKICAgICAgICAgICAgdmFyIGN1cnJlbnRQYXJhbXMgPSBjdXJyZW50TWF0Y2gucGFyYW1zOwogICAgICAgICAgICB2YXIgbmV4dFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKGxvY2F0aW9uKTsKICAgICAgICAgICAgdmFyIG5leHRQYXJhbXMgPSBtYXRjaC5wYXJhbXM7IC8vIFRoaXMgaXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gYXMgdG8gd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlCiAgICAgICAgICAgIC8vIHByb3ZpZGVzIGl0J3Mgb3duIGltcGxlbWVudGF0aW9uLCB0aGVuIHdlIGdpdmUgdGhlbSBmdWxsIGNvbnRyb2wgYnV0CiAgICAgICAgICAgIC8vIHByb3ZpZGUgdGhpcyB2YWx1ZSBzbyB0aGV5IGNhbiBsZXZlcmFnZSBpdCBpZiBuZWVkZWQgYWZ0ZXIgdGhleSBjaGVjawogICAgICAgICAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzCiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBmZXRjaGVycyBhbHdheXMgcHJvdmlkZSB0aGUgc2FtZSBjdXJyZW50L25leHQgbG9jYXRpb25zIHNvIHRoZQogICAgICAgICAgICAvLyBVUkwtYmFzZWQgY2hlY2tzIGhlcmUgZG9uJ3QgYXBwbHkgdG8gZmV0Y2hlciBzaG91bGRSZXZhbGlkYXRlIGNhbGxzCgogICAgICAgICAgICB2YXIgZGVmYXVsdFNob3VsZFJldmFsaWRhdGUgPSBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgfHwgLy8gQ2xpY2tlZCB0aGUgc2FtZSBsaW5rLCByZXN1Ym1pdHRlZCBhIEdFVCBmb3JtCiAgICAgICAgICAgIGN1cnJlbnRVcmwudG9TdHJpbmcoKSA9PT0gbmV4dFVybC50b1N0cmluZygpIHx8IC8vIFNlYXJjaCBwYXJhbXMgYWZmZWN0IGFsbCBsb2FkZXJzCiAgICAgICAgICAgIGN1cnJlbnRVcmwuc2VhcmNoICE9PSBuZXh0VXJsLnNlYXJjaCB8fCAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRlLCBvciBYLVJlbWl4LVJldmFsaWRhdGUKICAgICAgICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZDsKCiAgICAgICAgICAgIGlmIChtYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7CiAgICAgICAgICAgICAgdmFyIHJvdXRlQ2hvaWNlID0gbWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShfZXh0ZW5kcyh7CiAgICAgICAgICAgICAgICBjdXJyZW50VXJsOiBjdXJyZW50VXJsLAogICAgICAgICAgICAgICAgY3VycmVudFBhcmFtczogY3VycmVudFBhcmFtcywKICAgICAgICAgICAgICAgIG5leHRVcmw6IG5leHRVcmwsCiAgICAgICAgICAgICAgICBuZXh0UGFyYW1zOiBuZXh0UGFyYW1zCiAgICAgICAgICAgICAgfSwgc3VibWlzc2lvbiwgewogICAgICAgICAgICAgICAgYWN0aW9uUmVzdWx0OiBhY3Rpb25SZXN1bHQsCiAgICAgICAgICAgICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTogZGVmYXVsdFNob3VsZFJldmFsaWRhdGUKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGlmICh0eXBlb2Ygcm91dGVDaG9pY2UgPT09ICJib29sZWFuIikgewogICAgICAgICAgICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOwogICAgICAgICAgfWZ1bmN0aW9uCgogICAgICAgICAgY2FsbExvYWRlck9yQWN0aW9uKF94NjEsIF94NjIsIF94NjMsIF94NjQsIF94NjUsIF94NjYsIF94NjcsIF94NjgpIHtyZXR1cm4gX2NhbGxMb2FkZXJPckFjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO30KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiAgICAgICAgICAvLyBVdGlsaXR5IG1ldGhvZCBmb3IgY3JlYXRpbmcgdGhlIFJlcXVlc3QgaW5zdGFuY2VzIGZvciBsb2FkZXJzL2FjdGlvbnMgZHVyaW5nCiAgICAgICAgICAvLyBjbGllbnQtc2lkZSBuYXZpZ2F0aW9ucyBhbmQgZmV0Y2hlcy4gIER1cmluZyBTU1Igd2Ugd2lsbCBhbHdheXMgaGF2ZSBhCiAgICAgICAgICAvLyBSZXF1ZXN0IGluc3RhbmNlIGZyb20gdGhlIHN0YXRpYyBoYW5kbGVyIChxdWVyeS9xdWVyeVJvdXRlKQogICAgICAgICAgZnVuY3Rpb24gX2NhbGxMb2FkZXJPckFjdGlvbigpIHtfY2FsbExvYWRlck9yQWN0aW9uID0gX2FzeW5jVG9HZW5lcmF0b3IyKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZTIoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgYmFzZW5hbWUsIGlzU3RhdGljUmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0KSB7dmFyIHJlc3VsdFR5cGUsIHJlc3VsdCwgcmVqZWN0LCBhYm9ydFByb21pc2UsIG9uUmVqZWN0LCBoYW5kbGVyLCBzdGF0dXMsIGxvY2F0aW9uLCBpc0Fic29sdXRlLCBhY3RpdmVNYXRjaGVzLCByb3V0ZVBhdGhuYW1lcywgcmVzb2x2ZWRMb2NhdGlvbiwgcGF0aCwgY3VycmVudFVybCwgdXJsLCBkYXRhLCBjb250ZW50VHlwZTtyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZTIoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxNiQoX2NvbnRleHQxNykge3doaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MTcucHJldiA9IF9jb250ZXh0MTcubmV4dCkge2Nhc2UgMDppZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge2Jhc2VuYW1lID0gIi8iO31pZiAoaXNTdGF0aWNSZXF1ZXN0ID09PSB2b2lkIDApIHtpc1N0YXRpY1JlcXVlc3QgPSBmYWxzZTt9aWYgKGlzUm91dGVSZXF1ZXN0ID09PSB2b2lkIDApIHtpc1JvdXRlUmVxdWVzdCA9IGZhbHNlO31hYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7b25SZWplY3QgPSAoKSA9PiByZWplY3QoKTtyZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCJhYm9ydCIsIG9uUmVqZWN0KTtfY29udGV4dDE3LnByZXYgPSA2O2hhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtyb3V0ZXJfaW52YXJpYW50KGhhbmRsZXIsICJDb3VsZCBub3QgZmluZCB0aGUgIiArIHR5cGUgKyAiIHRvIHJ1biBvbiB0aGUgXCIiICsgbWF0Y2gucm91dGUuaWQgKyAiXCIgcm91dGUiKTtfY29udGV4dDE3Lm5leHQgPSAxMTtyZXR1cm4gUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHsgcmVxdWVzdDogcmVxdWVzdCwgcGFyYW1zOiBtYXRjaC5wYXJhbXMsIGNvbnRleHQ6IHJlcXVlc3RDb250ZXh0IH0pLCBhYm9ydFByb21pc2VdKTtjYXNlIDExOnJlc3VsdCA9IF9jb250ZXh0MTcuc2VudDtyb3V0ZXJfaW52YXJpYW50KHJlc3VsdCAhPT0gdW5kZWZpbmVkLCAiWW91IGRlZmluZWQgIiArICh0eXBlID09PSAiYWN0aW9uIiA/ICJhbiBhY3Rpb24iIDogImEgbG9hZGVyIikgKyAiIGZvciByb3V0ZSAiICsgKCJcIiIgKyBtYXRjaC5yb3V0ZS5pZCArICJcIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgYCIgKyB0eXBlICsgImAgIikgKyAiZnVuY3Rpb24uIFBsZWFzZSByZXR1cm4gYSB2YWx1ZSBvciBgbnVsbGAuIik7X2NvbnRleHQxNy5uZXh0ID0gMTk7YnJlYWs7Y2FzZSAxNTpfY29udGV4dDE3LnByZXYgPSAxNTtfY29udGV4dDE3LnQwID0gX2NvbnRleHQxN1siY2F0Y2giXSg2KTtyZXN1bHRUeXBlID0gUmVzdWx0VHlwZS5lcnJvcjtyZXN1bHQgPSBfY29udGV4dDE3LnQwO2Nhc2UgMTk6X2NvbnRleHQxNy5wcmV2ID0gMTk7cmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYWJvcnQiLCBvblJlamVjdCk7cmV0dXJuIF9jb250ZXh0MTcuZmluaXNoKDE5KTtjYXNlIDIyOmlmICghaXNSZXNwb25zZShyZXN1bHQpKSB7X2NvbnRleHQxNy5uZXh0ID0gNDg7YnJlYWs7fXN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7IC8vIFByb2Nlc3MgcmVkaXJlY3RzCiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWRpcmVjdFN0YXR1c0NvZGVzLmhhcyhzdGF0dXMpKSB7X2NvbnRleHQxNy5uZXh0ID0gMzM7YnJlYWs7fWxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KCJMb2NhdGlvbiIpO3JvdXRlcl9pbnZhcmlhbnQobG9jYXRpb24sICJSZWRpcmVjdHMgcmV0dXJuZWQvdGhyb3duIGZyb20gbG9hZGVycy9hY3Rpb25zIG11c3QgaGF2ZSBhIExvY2F0aW9uIGhlYWRlciIpO2lzQWJzb2x1dGUgPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcL1wvKS9pLnRlc3QobG9jYXRpb24pOyAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzCiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0Fic29sdXRlKSB7YWN0aXZlTWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5pbmRleE9mKG1hdGNoKSArIDEpO3JvdXRlUGF0aG5hbWVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMoYWN0aXZlTWF0Y2hlcykubWFwKChtYXRjaCkgPT4gbWF0Y2gucGF0aG5hbWVCYXNlKTtyZXNvbHZlZExvY2F0aW9uID0gcmVzb2x2ZVRvKGxvY2F0aW9uLCByb3V0ZVBhdGhuYW1lcywgbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUpO3JvdXRlcl9pbnZhcmlhbnQocm91dGVyX2NyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksICJVbmFibGUgdG8gcmVzb2x2ZSByZWRpcmVjdCBsb2NhdGlvbjogIiArIGxvY2F0aW9uKTsgLy8gUHJlcGVuZCB0aGUgYmFzZW5hbWUgdG8gdGhlIHJlZGlyZWN0IGxvY2F0aW9uIGlmIHdlIGhhdmUgb25lCiAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZW5hbWUpIHtwYXRoID0gcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZTtyZXNvbHZlZExvY2F0aW9uLnBhdGhuYW1lID0gcGF0aCA9PT0gIi8iID8gYmFzZW5hbWUgOiByb3V0ZXJfam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aF0pO31sb2NhdGlvbiA9IHJvdXRlcl9jcmVhdGVQYXRoKHJlc29sdmVkTG9jYXRpb24pO30gZWxzZSBpZiAoIWlzU3RhdGljUmVxdWVzdCkgey8vIFN0cmlwIG9mZiB0aGUgcHJvdG9jb2wrb3JpZ2luIGZvciBzYW1lLW9yaWdpbiBhYnNvbHV0ZSByZWRpcmVjdHMuCiAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIGEgc3RhdGljIHJlcXVlcywgd2UgY2FuIGxldCBpdCBnbyBiYWNrIHRvIHRoZSBicm93c2VyCiAgICAgICAgICAgICAgICAgICAgICAvLyBhcy1pcwogICAgICAgICAgICAgICAgICAgICAgY3VycmVudFVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO3VybCA9IGxvY2F0aW9uLnN0YXJ0c1dpdGgoIi8vIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBsb2NhdGlvbikgOiBuZXcgVVJMKGxvY2F0aW9uKTtpZiAodXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4pIHtsb2NhdGlvbiA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2ggKyB1cmwuaGFzaDt9fSAvLyBEb24ndCBwcm9jZXNzIHJlZGlyZWN0cyBpbiB0aGUgcm91dGVyIGR1cmluZyBzdGF0aWMgcmVxdWVzdHMgcmVxdWVzdHMuCiAgICAgICAgICAgICAgICAgICAgLy8gSW5zdGVhZCwgdGhyb3cgdGhlIFJlc3BvbnNlIGFuZCBsZXQgdGhlIHNlcnZlciBoYW5kbGUgaXQgd2l0aCBhbiBIVFRQCiAgICAgICAgICAgICAgICAgICAgLy8gcmVkaXJlY3QuICBXZSBhbHNvIHVwZGF0ZSB0aGUgTG9jYXRpb24gaGVhZGVyIGluIHBsYWNlIGluIHRoaXMgZmxvdyBzbwogICAgICAgICAgICAgICAgICAgIC8vIGJhc2VuYW1lIGFuZCByZWxhdGl2ZSByb3V0aW5nIGlzIHRha2VuIGludG8gYWNjb3VudAogICAgICAgICAgICAgICAgICAgIGlmICghaXNTdGF0aWNSZXF1ZXN0KSB7X2NvbnRleHQxNy5uZXh0ID0gMzI7YnJlYWs7fXJlc3VsdC5oZWFkZXJzLnNldCgiTG9jYXRpb24iLCBsb2NhdGlvbik7dGhyb3cgcmVzdWx0O2Nhc2UgMzI6cmV0dXJuIF9jb250ZXh0MTcuYWJydXB0KCJyZXR1cm4iLCB7IHR5cGU6IFJlc3VsdFR5cGUucmVkaXJlY3QsIHN0YXR1czogc3RhdHVzLCBsb2NhdGlvbjogbG9jYXRpb24sIHJldmFsaWRhdGU6IHJlc3VsdC5oZWFkZXJzLmdldCgiWC1SZW1peC1SZXZhbGlkYXRlIikgIT09IG51bGwgfSk7Y2FzZSAzMzppZiAoIWlzUm91dGVSZXF1ZXN0KSB7X2NvbnRleHQxNy5uZXh0ID0gMzU7YnJlYWs7fXRocm93IHsgdHlwZTogcmVzdWx0VHlwZSB8fCBSZXN1bHRUeXBlLmRhdGEsIHJlc3BvbnNlOiByZXN1bHQgfTtjYXNlIDM1OmNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KCJDb250ZW50LVR5cGUiKTsgLy8gQ2hlY2sgYmV0d2VlbiB3b3JkIGJvdW5kYXJpZXMgaW5zdGVhZCBvZiBzdGFydHNXaXRoKCkgZHVlIHRvIHRoZSBsYXN0CiAgICAgICAgICAgICAgICAgICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlCiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY29udGVudFR5cGUgJiYgL1xiYXBwbGljYXRpb25cL2pzb25cYi8udGVzdChjb250ZW50VHlwZSkpKSB7X2NvbnRleHQxNy5uZXh0ID0gNDI7YnJlYWs7fV9jb250ZXh0MTcubmV4dCA9IDM5O3JldHVybiByZXN1bHQuanNvbigpO2Nhc2UgMzk6ZGF0YSA9IF9jb250ZXh0MTcuc2VudDtfY29udGV4dDE3Lm5leHQgPSA0NTticmVhaztjYXNlIDQyOl9jb250ZXh0MTcubmV4dCA9IDQ0O3JldHVybiByZXN1bHQudGV4dCgpO2Nhc2UgNDQ6ZGF0YSA9IF9jb250ZXh0MTcuc2VudDtjYXNlIDQ1OmlmICghKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpKSB7X2NvbnRleHQxNy5uZXh0ID0gNDc7YnJlYWs7fXJldHVybiBfY29udGV4dDE3LmFicnVwdCgicmV0dXJuIiwgeyB0eXBlOiByZXN1bHRUeXBlLCBlcnJvcjogbmV3IHJvdXRlcl9FcnJvclJlc3BvbnNlKHN0YXR1cywgcmVzdWx0LnN0YXR1c1RleHQsIGRhdGEpLCBoZWFkZXJzOiByZXN1bHQuaGVhZGVycyB9KTtjYXNlIDQ3OnJldHVybiBfY29udGV4dDE3LmFicnVwdCgicmV0dXJuIiwgeyB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsIGRhdGE6IGRhdGEsIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzIH0pO2Nhc2UgNDg6aWYgKCEocmVzdWx0VHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikpIHtfY29udGV4dDE3Lm5leHQgPSA1MDticmVhazt9cmV0dXJuIF9jb250ZXh0MTcuYWJydXB0KCJyZXR1cm4iLCB7IHR5cGU6IHJlc3VsdFR5cGUsIGVycm9yOiByZXN1bHQgfSk7Y2FzZSA1MDppZiAoIShyZXN1bHQgaW5zdGFuY2VvZiBEZWZlcnJlZERhdGEpKSB7X2NvbnRleHQxNy5uZXh0ID0gNTI7YnJlYWs7fXJldHVybiBfY29udGV4dDE3LmFicnVwdCgicmV0dXJuIiwgeyB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkLCBkZWZlcnJlZERhdGE6IHJlc3VsdCB9KTtjYXNlIDUyOnJldHVybiBfY29udGV4dDE3LmFicnVwdCgicmV0dXJuIiwgeyB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsIGRhdGE6IHJlc3VsdCB9KTtjYXNlIDUzOmNhc2UgImVuZCI6cmV0dXJuIF9jb250ZXh0MTcuc3RvcCgpO319LCBfY2FsbGVlMTYsIG51bGwsIFtbNiwgMTUsIDE5LCAyMl1dKTt9KSk7cmV0dXJuIF9jYWxsTG9hZGVyT3JBY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaGlzdG9yeSwgbG9jYXRpb24sIHNpZ25hbCwgc3VibWlzc2lvbikge3ZhciB1cmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdHJpcEhhc2hGcm9tUGF0aChsb2NhdGlvbikpLnRvU3RyaW5nKCk7dmFyIGluaXQgPSB7IHNpZ25hbDogc2lnbmFsIH07aWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7dmFyIGZvcm1NZXRob2QgPQogICAgICAgICAgICAgICAgc3VibWlzc2lvbi5mb3JtTWV0aG9kLGZvcm1FbmNUeXBlID0gc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxmb3JtRGF0YSA9IHN1Ym1pc3Npb24uZm9ybURhdGE7CiAgICAgICAgICAgICAgaW5pdC5tZXRob2QgPSBmb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgICAgaW5pdC5ib2R5ID0gZm9ybUVuY1R5cGUgPT09ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiID8gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIDogZm9ybURhdGE7CiAgICAgICAgICAgIH0gLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpCgoKICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHVybCwgaW5pdCk7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHsKICAgICAgICAgICAgdmFyIHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTt2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMigKCiAgICAgICAgICAgICAgZm9ybURhdGEuZW50cmllcygpKSxfc3RlcDg7dHJ5IHtmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykge3ZhciBfc3RlcDgkdmFsdWUgPSBfc2xpY2VkVG9BcnJheTIoX3N0ZXA4LnZhbHVlLCAyKSxrZXkgPSBfc3RlcDgkdmFsdWVbMF0sdmFsdWUgPSBfc3RlcDgkdmFsdWVbMV07CiAgICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KHR5cGVvZiB2YWx1ZSA9PT0gInN0cmluZyIsICdGaWxlIGlucHV0cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIGVuY1R5cGUgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsICcgKyAncGxlYXNlIHVzZSAibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgaW5zdGVhZC4nKTsKICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7CiAgICAgICAgICAgICAgfX0gY2F0Y2ggKGVycikge19pdGVyYXRvcjguZShlcnIpO30gZmluYWxseSB7X2l0ZXJhdG9yOC5mKCk7fQoKICAgICAgICAgICAgcmV0dXJuIHNlYXJjaFBhcmFtczsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKSB7CiAgICAgICAgICAgIC8vIEZpbGwgaW4gbG9hZGVyRGF0YS9lcnJvcnMgZnJvbSBvdXIgbG9hZGVycwogICAgICAgICAgICB2YXIgbG9hZGVyRGF0YSA9IHt9OwogICAgICAgICAgICB2YXIgZXJyb3JzID0gbnVsbDsKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGU7CiAgICAgICAgICAgIHZhciBmb3VuZEVycm9yID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBsb2FkZXJIZWFkZXJzID0ge307IC8vIFByb2Nlc3MgbG9hZGVyIHJlc3VsdHMgaW50byBzdGF0ZS5sb2FkZXJEYXRhL3N0YXRlLmVycm9ycwoKICAgICAgICAgICAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgdmFyIGlkID0gbWF0Y2hlc1RvTG9hZFtpbmRleF0ucm91dGUuaWQ7CiAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCAiQ2Fubm90IGhhbmRsZSByZWRpcmVjdCByZXN1bHRzIGluIHByb2Nlc3NMb2FkZXJEYXRhIik7CgogICAgICAgICAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHsKICAgICAgICAgICAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvcgogICAgICAgICAgICAgICAgLy8gZXJyb3IgYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2gKICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7CiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSByZXN1bHQuZXJyb3I7IC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nIGFjdGlvbiBlcnJvciwgd2UgcmVwb3J0IGl0IGF0IHRoZSBoaWdoZXN0LXJvdXRlCiAgICAgICAgICAgICAgICAvLyB0aGF0IHRocm93cyBhIGxvYWRlciBlcnJvciwgYW5kIHRoZW4gY2xlYXIgaXQgb3V0IHRvIGluZGljYXRlIHRoYXQKICAgICAgICAgICAgICAgIC8vIGl0IHdhcyBjb25zdW1lZAoKICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgZXJyb3IgPSBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF07CiAgICAgICAgICAgICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307IC8vIFByZWZlciBoaWdoZXIgZXJyb3IgdmFsdWVzIGlmIGxvd2VyIGVycm9ycyBidWJibGUgdG8gdGhlIHNhbWUgYm91bmRhcnkKCiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7CiAgICAgICAgICAgICAgICB9IC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlCgoKICAgICAgICAgICAgICAgIGxvYWRlckRhdGFbaWRdID0gdW5kZWZpbmVkOyAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmQKICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmcKCiAgICAgICAgICAgICAgICBpZiAoIWZvdW5kRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgZm91bmRFcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHsKICAgICAgICAgICAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVyczsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkgewogICAgICAgICAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTsKICAgICAgICAgICAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGE7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kYXRhOwogICAgICAgICAgICAgICAgfSAvLyBFcnJvciBzdGF0dXMgY29kZXMgYWx3YXlzIG92ZXJyaWRlIHN1Y2Nlc3Mgc3RhdHVzIGNvZGVzLCBidXQgaWYgYWxsCiAgICAgICAgICAgICAgICAvLyBsb2FkZXJzIGFyZSBzdWNjZXNzZnVsIHdlIHRha2UgdGhlIGRlZXBlc3Qgc3RhdHVzIGNvZGUuCgoKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaGVhZGVycykgewogICAgICAgICAgICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7IC8vIElmIHdlIGRpZG4ndCBjb25zdW1lIHRoZSBwZW5kaW5nIGFjdGlvbiBlcnJvciAoaS5lLiwgYWxsIGxvYWRlcnMKICAgICAgICAgICAgLy8gcmVzb2x2ZWQpLCB0aGVuIGNvbnN1bWUgaXQgaGVyZS4gIEFsc28gY2xlYXIgb3V0IGFueSBsb2FkZXJEYXRhIGZvciB0aGUKICAgICAgICAgICAgLy8gdGhyb3dpbmcgcm91dGUKCiAgICAgICAgICAgIGlmIChwZW5kaW5nRXJyb3IpIHsKICAgICAgICAgICAgICBlcnJvcnMgPSBwZW5kaW5nRXJyb3I7CiAgICAgICAgICAgICAgbG9hZGVyRGF0YVtPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdXSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBsb2FkZXJEYXRhOiBsb2FkZXJEYXRhLAogICAgICAgICAgICAgIGVycm9yczogZXJyb3JzLAogICAgICAgICAgICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUgfHwgMjAwLAogICAgICAgICAgICAgIGxvYWRlckhlYWRlcnM6IGxvYWRlckhlYWRlcnMKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykgewogICAgICAgICAgICB2YXIgX3Byb2Nlc3NSb3V0ZUxvYWRlckRhID0KCgogICAgICAgICAgICAgIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpLGxvYWRlckRhdGEgPSBfcHJvY2Vzc1JvdXRlTG9hZGVyRGEubG9hZGVyRGF0YSxlcnJvcnMgPSBfcHJvY2Vzc1JvdXRlTG9hZGVyRGEuZXJyb3JzOyAvLyBQcm9jZXNzIHJlc3VsdHMgZnJvbSBvdXIgcmV2YWxpZGF0aW5nIGZldGNoZXJzCgogICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgdmFyIF9yZXZhbGlkYXRpbmdGZXRjaGVycyA9IF9zbGljZWRUb0FycmF5MihyZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF0sIDMpLGtleSA9IF9yZXZhbGlkYXRpbmdGZXRjaGVyc1swXSxtYXRjaCA9IF9yZXZhbGlkYXRpbmdGZXRjaGVyc1syXTsKICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsICJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdCIpOwogICAgICAgICAgICAgIHZhciByZXN1bHQgPSBmZXRjaGVyUmVzdWx0c1tpbmRleF07IC8vIFByb2Nlc3MgZmV0Y2hlciBub24tcmVkaXJlY3QgZXJyb3JzCgogICAgICAgICAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHsKICAgICAgICAgICAgICAgIHZhciBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaC5yb3V0ZS5pZCk7CgogICAgICAgICAgICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHsKICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX2V4dGVuZHMoe30sIGVycm9ycywgX2RlZmluZVByb3BlcnR5Mih7fSwKICAgICAgICAgICAgICAgICAgYm91bmRhcnlNYXRjaC5yb3V0ZS5pZCwgcmVzdWx0LmVycm9yKSk7CgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7CiAgICAgICAgICAgICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlCiAgICAgICAgICAgICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZQogICAgICAgICAgICAgICAgcm91dGVyX2ludmFyaWFudChmYWxzZSwgIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdCIpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7CiAgICAgICAgICAgICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGRlZmVycmVkIGRhdGEgc2hvdWxkIGJlIGF3YWl0ZWQgZm9yIGZldGNoZXJzCiAgICAgICAgICAgICAgICAvLyBpbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzCiAgICAgICAgICAgICAgICByb3V0ZXJfaW52YXJpYW50KGZhbHNlLCAiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YSIpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgZG9uZUZldGNoZXIgPSB7CiAgICAgICAgICAgICAgICAgIHN0YXRlOiAiaWRsZSIsCiAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLAogICAgICAgICAgICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyAiOiB0cnVlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBsb2FkZXJEYXRhOiBsb2FkZXJEYXRhLAogICAgICAgICAgICAgIGVycm9yczogZXJyb3JzCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykgewogICAgICAgICAgICB2YXIgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTt2YXIgX2l0ZXJhdG9yOSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMigKCiAgICAgICAgICAgICAgbWF0Y2hlcyksX3N0ZXA5O3RyeSB7Zm9yIChfaXRlcmF0b3I5LnMoKTsgIShfc3RlcDkgPSBfaXRlcmF0b3I5Lm4oKSkuZG9uZTspIHt2YXIgbWF0Y2ggPSBfc3RlcDkudmFsdWU7CiAgICAgICAgICAgICAgICB2YXIgaWQgPSBtYXRjaC5yb3V0ZS5pZDsKCiAgICAgICAgICAgICAgICBpZiAobmV3TG9hZGVyRGF0YS5oYXNPd25Qcm9wZXJ0eShpZCkpIHsKICAgICAgICAgICAgICAgICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBsb2FkZXJEYXRhW2lkXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHsKICAgICAgICAgICAgICAgICAgLy8gRG9uJ3Qga2VlcCBhbnkgbG9hZGVyIGRhdGEgYmVsb3cgdGhlIGJvdW5kYXJ5CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH19IGNhdGNoIChlcnIpIHtfaXRlcmF0b3I5LmUoZXJyKTt9IGZpbmFsbHkge19pdGVyYXRvcjkuZigpO30KCiAgICAgICAgICAgIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhOwogICAgICAgICAgfSAvLyBGaW5kIHRoZSBuZWFyZXN0IGVycm9yIGJvdW5kYXJ5LCBsb29raW5nIHVwd2FyZHMgZnJvbSB0aGUgbGVhZiByb3V0ZSAob3IgdGhlCiAgICAgICAgICAvLyByb3V0ZSBzcGVjaWZpZWQgYnkgcm91dGVJZCkgZm9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIGVycm9yIGJvdW5kYXJ5LAogICAgICAgICAgLy8gZGVmYXVsdGluZyB0byB0aGUgcm9vdCBtYXRjaAoKCiAgICAgICAgICBmdW5jdGlvbiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIHJvdXRlSWQpIHsKICAgICAgICAgICAgdmFyIGVsaWdpYmxlTWF0Y2hlcyA9IHJvdXRlSWQgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KChtKSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogX3RvQ29uc3VtYWJsZUFycmF5MihtYXRjaGVzKTsKICAgICAgICAgICAgcmV0dXJuIGVsaWdpYmxlTWF0Y2hlcy5yZXZlcnNlKCkuZmluZCgobSkgPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzKSB7CiAgICAgICAgICAgIC8vIFByZWZlciBhIHJvb3QgbGF5b3V0IHJvdXRlIGlmIHByZXNlbnQsIG90aGVyd2lzZSBzaGltIGluIGEgcm91dGUgb2JqZWN0CiAgICAgICAgICAgIHZhciByb3V0ZSA9IHJvdXRlcy5maW5kKChyKSA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSAiLyIpIHx8IHsKICAgICAgICAgICAgICBpZDogIl9fc2hpbS1lcnJvci1yb3V0ZV9fIgogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIG1hdGNoZXM6IFt7CiAgICAgICAgICAgICAgICBwYXJhbXM6IHt9LAogICAgICAgICAgICAgICAgcGF0aG5hbWU6ICIiLAogICAgICAgICAgICAgICAgcGF0aG5hbWVCYXNlOiAiIiwKICAgICAgICAgICAgICAgIHJvdXRlOiByb3V0ZQogICAgICAgICAgICAgIH1dLAogICAgICAgICAgICAgIHJvdXRlOiByb3V0ZQogICAgICAgICAgICB9OwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3Ioc3RhdHVzLCBfdGVtcDQpIHsKICAgICAgICAgICAgdmFyIF9yZWYyOSA9CgoKCgogICAgICAgICAgICAgIF90ZW1wNCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDQscGF0aG5hbWUgPSBfcmVmMjkucGF0aG5hbWUscm91dGVJZCA9IF9yZWYyOS5yb3V0ZUlkLG1ldGhvZCA9IF9yZWYyOS5tZXRob2QsdHlwZSA9IF9yZWYyOS50eXBlOwogICAgICAgICAgICB2YXIgc3RhdHVzVGV4dCA9ICJVbmtub3duIFNlcnZlciBFcnJvciI7CiAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSAiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvciI7CgogICAgICAgICAgICBpZiAoc3RhdHVzID09PSA0MDApIHsKICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gIkJhZCBSZXF1ZXN0IjsKCiAgICAgICAgICAgICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7CiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAiWW91IG1hZGUgYSAiICsgbWV0aG9kICsgIiByZXF1ZXN0IHRvIFwiIiArIHBhdGhuYW1lICsgIlwiIGJ1dCAiICsgKCJkaWQgbm90IHByb3ZpZGUgYSBgbG9hZGVyYCBmb3Igcm91dGUgXCIiICsgcm91dGVJZCArICJcIiwgIikgKyAic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC4iOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gImRlZmVyLWFjdGlvbiIpIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9ucyI7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJDYW5ub3Qgc3VibWl0IGJpbmFyeSBmb3JtIGRhdGEgdXNpbmcgR0VUIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDMpIHsKICAgICAgICAgICAgICBzdGF0dXNUZXh0ID0gIkZvcmJpZGRlbiI7CiAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gIlJvdXRlIFwiIiArIHJvdXRlSWQgKyAiXCIgZG9lcyBub3QgbWF0Y2ggVVJMIFwiIiArIHBhdGhuYW1lICsgIlwiIjsKICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkgewogICAgICAgICAgICAgIHN0YXR1c1RleHQgPSAiTm90IEZvdW5kIjsKICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSAiTm8gcm91dGUgbWF0Y2hlcyBVUkwgXCIiICsgcGF0aG5hbWUgKyAiXCIiOwogICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7CiAgICAgICAgICAgICAgc3RhdHVzVGV4dCA9ICJNZXRob2QgTm90IEFsbG93ZWQiOwoKICAgICAgICAgICAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJZb3UgbWFkZSBhICIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArICIgcmVxdWVzdCB0byBcIiIgKyBwYXRobmFtZSArICJcIiBidXQgIiArICgiZGlkIG5vdCBwcm92aWRlIGFuIGBhY3Rpb25gIGZvciByb3V0ZSBcIiIgKyByb3V0ZUlkICsgIlwiLCAiKSArICJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LiI7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRob2QpIHsKICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9ICJJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFwiIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgIlwiIjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBuZXcgcm91dGVyX0Vycm9yUmVzcG9uc2Uoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpOwogICAgICAgICAgfSAvLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaAoKCiAgICAgICAgICBmdW5jdGlvbiBmaW5kUmVkaXJlY3QocmVzdWx0cykgewogICAgICAgICAgICBmb3IgKHZhciBpID0gcmVzdWx0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZXN1bHRzW2ldOwoKICAgICAgICAgICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHsKICAgICAgICAgICAgdmFyIHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gInN0cmluZyIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoOwogICAgICAgICAgICByZXR1cm4gcm91dGVyX2NyZWF0ZVBhdGgoX2V4dGVuZHMoe30sIHBhcnNlZFBhdGgsIHsKICAgICAgICAgICAgICBoYXNoOiAiIgogICAgICAgICAgICB9KSk7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggIT09IGIuaGFzaDsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgewogICAgICAgICAgICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiAocmVzdWx0ICYmIHJlc3VsdC50eXBlKSA9PT0gUmVzdWx0VHlwZS5yZWRpcmVjdDsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlKSB7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09ICJudW1iZXIiICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSAic3RyaW5nIiAmJiB0eXBlb2YgdmFsdWUuaGVhZGVycyA9PT0gIm9iamVjdCIgJiYgdHlwZW9mIHZhbHVlLmJvZHkgIT09ICJ1bmRlZmluZWQiOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHsKICAgICAgICAgICAgaWYgKCFpc1Jlc3BvbnNlKHJlc3VsdCkpIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzdGF0dXMgPSByZXN1bHQuc3RhdHVzOwogICAgICAgICAgICB2YXIgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoIkxvY2F0aW9uIik7CiAgICAgICAgICAgIHJldHVybiBzdGF0dXMgPj0gMzAwICYmIHN0YXR1cyA8PSAzOTkgJiYgbG9jYXRpb24gIT0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBpc1F1ZXJ5Um91dGVSZXNwb25zZShvYmopIHsKICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBpc1Jlc3BvbnNlKG9iai5yZXNwb25zZSkgJiYgKG9iai50eXBlID09PSBSZXN1bHRUeXBlLmRhdGEgfHwgUmVzdWx0VHlwZS5lcnJvcik7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gaXNWYWxpZE1ldGhvZChtZXRob2QpIHsKICAgICAgICAgICAgcmV0dXJuIHZhbGlkUmVxdWVzdE1ldGhvZHMuaGFzKG1ldGhvZCk7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHsKICAgICAgICAgICAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QpOwogICAgICAgICAgfWZ1bmN0aW9uCgogICAgICAgICAgcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhfeDY5LCBfeDcwLCBfeDcxLCBfeDcyLCBfeDczLCBfeDc0KSB7cmV0dXJuIF9yZXNvbHZlRGVmZXJyZWRSZXN1bHRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIF9yZXNvbHZlRGVmZXJyZWRSZXN1bHRzKCkge19yZXNvbHZlRGVmZXJyZWRSZXN1bHRzID0gX2FzeW5jVG9HZW5lcmF0b3IyKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZTIoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgc2lnbmFsLCBpc0ZldGNoZXIsIGN1cnJlbnRMb2FkZXJEYXRhKSB7dmFyIF9sb29wMiwgaW5kZXg7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMTckKF9jb250ZXh0MTkpIHt3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDE5LnByZXYgPSBfY29udGV4dDE5Lm5leHQpIHtjYXNlIDA6X2xvb3AyID0gLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUyKCkubWFyayhmdW5jdGlvbiBfbG9vcDIoaW5kZXgpIHt2YXIgcmVzdWx0LCBtYXRjaCwgY3VycmVudE1hdGNoLCBpc1JldmFsaWRhdGluZ0xvYWRlcjtyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZTIoKS53cmFwKGZ1bmN0aW9uIF9sb29wMiQoX2NvbnRleHQxOCkge3doaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0MTgucHJldiA9IF9jb250ZXh0MTgubmV4dCkge2Nhc2UgMDoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHRzW2luZGV4XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlc1RvTG9hZFtpbmRleF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKChtKSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtpZiAoISgKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpKSB7X2NvbnRleHQxOC5uZXh0ID0gNzticmVhazt9X2NvbnRleHQxOC5uZXh0ID0gNztyZXR1cm4gKAoKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCBpc0ZldGNoZXIpLnRoZW4oKHJlc3VsdCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gcmVzdWx0IHx8IHJlc3VsdHNbaW5kZXhdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO2Nhc2UgNzpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDE4LnN0b3AoKTt9fSwgX2xvb3AyKTt9KTtpbmRleCA9IDA7Y2FzZSAyOmlmICghKGluZGV4IDwgcmVzdWx0cy5sZW5ndGgpKSB7X2NvbnRleHQxOS5uZXh0ID0gNzticmVhazt9cmV0dXJuIF9jb250ZXh0MTkuZGVsZWdhdGVZaWVsZChfbG9vcDIoaW5kZXgpLCAidDAiLCA0KTtjYXNlIDQ6aW5kZXgrKztfY29udGV4dDE5Lm5leHQgPSAyO2JyZWFrO2Nhc2UgNzpjYXNlICJlbmQiOnJldHVybiBfY29udGV4dDE5LnN0b3AoKTt9fSwgX2NhbGxlZTE3KTt9KSk7cmV0dXJuIF9yZXNvbHZlRGVmZXJyZWRSZXN1bHRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uCgoKCgogICAgICAgICAgcmVzb2x2ZURlZmVycmVkRGF0YShfeDc1LCBfeDc2LCBfeDc3KSB7cmV0dXJuIF9yZXNvbHZlRGVmZXJyZWREYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fWZ1bmN0aW9uIF9yZXNvbHZlRGVmZXJyZWREYXRhKCkge19yZXNvbHZlRGVmZXJyZWREYXRhID0gX2FzeW5jVG9HZW5lcmF0b3IyKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZTIoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxOChyZXN1bHQsIHNpZ25hbCwgdW53cmFwKSB7dmFyIGFib3J0ZWQ7cmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUyKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMTgkKF9jb250ZXh0MjApIHt3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIwLnByZXYgPSBfY29udGV4dDIwLm5leHQpIHtjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgaWYgKHVud3JhcCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICB1bndyYXAgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9X2NvbnRleHQyMC5uZXh0ID0gMztyZXR1cm4gKAoKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKSk7Y2FzZSAzOmFib3J0ZWQgPSBfY29udGV4dDIwLnNlbnQ7aWYgKCEKCiAgICAgICAgICAgICAgICAgICAgYWJvcnRlZCkge19jb250ZXh0MjAubmV4dCA9IDY7YnJlYWs7fXJldHVybiBfY29udGV4dDIwLmFicnVwdCgicmV0dXJuIik7Y2FzZSA2OmlmICghCgoKCiAgICAgICAgICAgICAgICAgICAgdW53cmFwKSB7X2NvbnRleHQyMC5uZXh0ID0gMTQ7YnJlYWs7fV9jb250ZXh0MjAucHJldiA9IDc7cmV0dXJuIF9jb250ZXh0MjAuYWJydXB0KCJyZXR1cm4iLAoKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsCiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLnVud3JhcHBlZERhdGEKICAgICAgICAgICAgICAgICAgICB9KTtjYXNlIDExOl9jb250ZXh0MjAucHJldiA9IDExO19jb250ZXh0MjAudDAgPSBfY29udGV4dDIwWyJjYXRjaCJdKDcpO3JldHVybiBfY29udGV4dDIwLmFicnVwdCgicmV0dXJuIiwKCgogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsCiAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogX2NvbnRleHQyMC50MAogICAgICAgICAgICAgICAgICAgIH0pO2Nhc2UgMTQ6cmV0dXJuIF9jb250ZXh0MjAuYWJydXB0KCJyZXR1cm4iLAoKCgogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSwKICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YQogICAgICAgICAgICAgICAgICAgIH0pO2Nhc2UgMTU6Y2FzZSAiZW5kIjpyZXR1cm4gX2NvbnRleHQyMC5zdG9wKCk7fX0sIF9jYWxsZWUxOCwgbnVsbCwgW1s3LCAxMV1dKTt9KSk7cmV0dXJuIF9yZXNvbHZlRGVmZXJyZWREYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fQoKCiAgICAgICAgICBmdW5jdGlvbiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCkuZ2V0QWxsKCJpbmRleCIpLnNvbWUoKHYpID0+IHYgPT09ICIiKTsKICAgICAgICAgIH0gLy8gTm90ZTogVGhpcyBzaG91bGQgbWF0Y2ggdGhlIGZvcm1hdCBleHBvcnRlZCBieSB1c2VNYXRjaGVzLCBzbyBpZiB5b3UgY2hhbmdlCiAgICAgICAgICAvLyB0aGlzIHBsZWFzZSBhbHNvIGNoYW5nZSB0aGF0IDopICBFdmVudHVhbGx5IHdlJ2xsIERSWSB0aGlzIHVwCgoKICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkgewogICAgICAgICAgICB2YXIKICAgICAgICAgICAgICByb3V0ZSA9CgoKICAgICAgICAgICAgICBtYXRjaC5yb3V0ZSxwYXRobmFtZSA9IG1hdGNoLnBhdGhuYW1lLHBhcmFtcyA9IG1hdGNoLnBhcmFtczsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICBpZDogcm91dGUuaWQsCiAgICAgICAgICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lLAogICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLAogICAgICAgICAgICAgIGRhdGE6IGxvYWRlckRhdGFbcm91dGUuaWRdLAogICAgICAgICAgICAgIGhhbmRsZTogcm91dGUuaGFuZGxlCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pIHsKICAgICAgICAgICAgdmFyIHNlYXJjaCA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gInN0cmluZyIgPyBwYXJzZVBhdGgobG9jYXRpb24pLnNlYXJjaCA6IGxvY2F0aW9uLnNlYXJjaDsKCiAgICAgICAgICAgIGlmIChtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuaW5kZXggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCB8fCAiIikpIHsKICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50CiAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgfSAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCAicGF0aCBjb250cmlidXRpbmciIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmQKICAgICAgICAgICAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcykKCgogICAgICAgICAgICB2YXIgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTsKICAgICAgICAgICAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdOwogICAgICAgICAgfSAvLyNlbmRyZWdpb24KCgoKCiAgICAgICAgICAvLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzCiAgICAgICAgICB2YXIgcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5NCk7CiAgICAgICAgICB2YXIgcmVhY3RfbmFtZXNwYWNlT2JqZWN0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18udChyZWFjdCwgMik7CiAgICAgICAgICA7IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9kaXN0L2luZGV4LmpzCiAgICAgICAgICAvKioKICAgICAgICAgICAqIFJlYWN0IFJvdXRlciB2Ni43LjAKICAgICAgICAgICAqCiAgICAgICAgICAgKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICAgICAgICAgICAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAbGljZW5zZSBNSVQKICAgICAgICAgICAqLwoKCgoKICAgICAgICAgIGZ1bmN0aW9uIGRpc3RfZXh0ZW5kcygpIHsKICAgICAgICAgICAgZGlzdF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgewogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOwoKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsKICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsKICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0OwogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gZGlzdF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICAgICAgICAgICAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KICAgICAgICAgICAqLwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duCiAgICAgICAgICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXMKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIGlzUG9seWZpbGwoeCwgeSkgewogICAgICAgICAgICByZXR1cm4geCA9PT0geSAmJiAoeCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkpIHx8IHggIT09IHggJiYgeSAhPT0geSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZQogICAgICAgICAgICA7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGlzID0gdHlwZW9mIE9iamVjdC5pcyA9PT0gImZ1bmN0aW9uIiA/IE9iamVjdC5pcyA6IGlzUG9seWZpbGw7IC8vIEludGVudGlvbmFsbHkgbm90IHVzaW5nIG5hbWVkIGltcG9ydHMgYmVjYXVzZSBSb2xsdXAgdXNlcyBkeW5hbWljCiAgICAgICAgICAvLyBkaXNwYXRjaCBmb3IgQ29tbW9uSlMgaW50ZXJvcCBuYW1lZCBpbXBvcnRzLgoKICAgICAgICAgIHZhcgogICAgICAgICAgICB1c2VTdGF0ZSA9CgoKCiAgICAgICAgICAgIHJlYWN0X25hbWVzcGFjZU9iamVjdC51c2VTdGF0ZSx1c2VFZmZlY3QgPSByZWFjdF9uYW1lc3BhY2VPYmplY3QudXNlRWZmZWN0LHVzZUxheW91dEVmZmVjdCA9IHJlYWN0X25hbWVzcGFjZU9iamVjdC51c2VMYXlvdXRFZmZlY3QsdXNlRGVidWdWYWx1ZSA9IHJlYWN0X25hbWVzcGFjZU9iamVjdC51c2VEZWJ1Z1ZhbHVlOwogICAgICAgICAgdmFyIGRpZFdhcm5PbGQxOEFscGhhID0gZmFsc2U7CiAgICAgICAgICB2YXIgZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3QgPSBmYWxzZTsgLy8gRGlzY2xhaW1lcjogVGhpcyBzaGltIGJyZWFrcyBtYW55IG9mIHRoZSBydWxlcyBvZiBSZWFjdCwgYW5kIG9ubHkgd29ya3MKICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgYSB2ZXJ5IHBhcnRpY3VsYXIgc2V0IG9mIGltcGxlbWVudGF0aW9uIGRldGFpbHMgYW5kIGFzc3VtcHRpb25zCiAgICAgICAgICAvLyAtLSBjaGFuZ2UgYW55IG9uZSBvZiB0aGVtIGFuZCBpdCB3aWxsIGJyZWFrLiBUaGUgbW9zdCBpbXBvcnRhbnQgYXNzdW1wdGlvbgogICAgICAgICAgLy8gaXMgdGhhdCB1cGRhdGVzIGFyZSBhbHdheXMgc3luY2hyb25vdXMsIGJlY2F1c2UgY29uY3VycmVudCByZW5kZXJpbmcgaXMKICAgICAgICAgIC8vIG9ubHkgYXZhaWxhYmxlIGluIHZlcnNpb25zIG9mIFJlYWN0IHRoYXQgYWxzbyBoYXZlIGEgYnVpbHQtaW4KICAgICAgICAgIC8vIHVzZVN5bmNFeHRlcm5hbFN0b3JlIEFQSS4gQW5kIHdlIG9ubHkgdXNlIHRoaXMgc2hpbSB3aGVuIHRoZSBidWlsdC1pbiBBUEkKICAgICAgICAgIC8vIGRvZXMgbm90IGV4aXN0LgogICAgICAgICAgLy8KICAgICAgICAgIC8vIERvIG5vdCBhc3N1bWUgdGhhdCB0aGUgY2xldmVyIGhhY2tzIHVzZWQgYnkgdGhpcyBob29rIGFsc28gd29yayBpbiBnZW5lcmFsLgogICAgICAgICAgLy8gVGhlIHBvaW50IG9mIHRoaXMgc2hpbSBpcyB0byByZXBsYWNlIHRoZSBuZWVkIGZvciBoYWNrcyBieSBvdGhlciBsaWJyYXJpZXMuCgogICAgICAgICAgZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUkMihzdWJzY3JpYmUsIGdldFNuYXBzaG90LCAvLyBOb3RlOiBUaGUgc2hpbSBkb2VzIG5vdCB1c2UgZ2V0U2VydmVyU25hcHNob3QsIGJlY2F1c2UgcHJlLTE4IHZlcnNpb25zIG9mCiAgICAgICAgICAvLyBSZWFjdCBkbyBub3QgZXhwb3NlIGEgd2F5IHRvIGNoZWNrIGlmIHdlJ3JlIGh5ZHJhdGluZy4gU28gdXNlcnMgb2YgdGhlIHNoaW0KICAgICAgICAgIC8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZQogICAgICAgICAgLy8gZnJvbSBgZ2V0U25hcHNob3RgLgogICAgICAgICAgZ2V0U2VydmVyU25hcHNob3QpIHsKICAgICAgICAgICAgaWYgKGZhbHNlKSB7fSAvLyBSZWFkIHRoZSBjdXJyZW50IHNuYXBzaG90IGZyb20gdGhlIHN0b3JlIG9uIGV2ZXJ5IHJlbmRlci4gQWdhaW4sIHRoaXMKICAgICAgICAgICAgLy8gYnJlYWtzIHRoZSBydWxlcyBvZiBSZWFjdCwgYW5kIG9ubHkgd29ya3MgaGVyZSBiZWNhdXNlIG9mIHNwZWNpZmljCiAgICAgICAgICAgIC8vIGltcGxlbWVudGF0aW9uIGRldGFpbHMsIG1vc3QgaW1wb3J0YW50bHkgdGhhdCB1cGRhdGVzIGFyZQogICAgICAgICAgICAvLyBhbHdheXMgc3luY2hyb25vdXMuCgoKICAgICAgICAgICAgdmFyIHZhbHVlID0gZ2V0U25hcHNob3QoKTsKCiAgICAgICAgICAgIGlmIChmYWxzZSkge30gLy8gQmVjYXVzZSB1cGRhdGVzIGFyZSBzeW5jaHJvbm91cywgd2UgZG9uJ3QgcXVldWUgdGhlbS4gSW5zdGVhZCB3ZSBmb3JjZSBhCiAgICAgICAgICAgIC8vIHJlLXJlbmRlciB3aGVuZXZlciB0aGUgc3Vic2NyaWJlZCBzdGF0ZSBjaGFuZ2VzIGJ5IHVwZGF0aW5nIGFuIHNvbWUKICAgICAgICAgICAgLy8gYXJiaXRyYXJ5IHVzZVN0YXRlIGhvb2suIFRoZW4sIGR1cmluZyByZW5kZXIsIHdlIGNhbGwgZ2V0U25hcHNob3QgdG8gcmVhZAogICAgICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZS4KICAgICAgICAgICAgLy8KICAgICAgICAgICAgLy8gQmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB1c2UgdGhlIHN0YXRlIHJldHVybmVkIGJ5IHRoZSB1c2VTdGF0ZSBob29rLCB3ZQogICAgICAgICAgICAvLyBjYW4gc2F2ZSBhIGJpdCBvZiBtZW1vcnkgYnkgc3RvcmluZyBvdGhlciBzdHVmZiBpbiB0aGF0IHNsb3QuCiAgICAgICAgICAgIC8vCiAgICAgICAgICAgIC8vIFRvIGltcGxlbWVudCB0aGUgZWFybHkgYmFpbG91dCwgd2UgbmVlZCB0byB0cmFjayBzb21lIHRoaW5ncyBvbiBhIG11dGFibGUKICAgICAgICAgICAgLy8gb2JqZWN0LiBVc3VhbGx5LCB3ZSB3b3VsZCBwdXQgdGhhdCBpbiBhIHVzZVJlZiBob29rLCBidXQgd2UgY2FuIHN0YXNoIGl0IGluCiAgICAgICAgICAgIC8vIG91ciB1c2VTdGF0ZSBob29rIGluc3RlYWQuCiAgICAgICAgICAgIC8vCiAgICAgICAgICAgIC8vIFRvIGZvcmNlIGEgcmUtcmVuZGVyLCB3ZSBjYWxsIGZvcmNlVXBkYXRlKHtpbnN0fSkuIFRoYXQgd29ya3MgYmVjYXVzZSB0aGUKICAgICAgICAgICAgLy8gbmV3IG9iamVjdCBhbHdheXMgZmFpbHMgYW4gZXF1YWxpdHkgY2hlY2suCgoKICAgICAgICAgICAgdmFyIF91c2VTdGF0ZTE1ID0KCiAgICAgICAgICAgICAgdXNlU3RhdGUoewogICAgICAgICAgICAgICAgaW5zdDogewogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgICAgICAgIGdldFNuYXBzaG90OiBnZXRTbmFwc2hvdAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLF91c2VTdGF0ZTE2ID0gX3NsaWNlZFRvQXJyYXkyKF91c2VTdGF0ZTE1LCAyKSxpbnN0ID0gX3VzZVN0YXRlMTZbMF0uaW5zdCxmb3JjZVVwZGF0ZSA9IF91c2VTdGF0ZTE2WzFdOyAvLyBUcmFjayB0aGUgbGF0ZXN0IGdldFNuYXBzaG90IGZ1bmN0aW9uIHdpdGggYSByZWYuIFRoaXMgbmVlZHMgdG8gYmUgdXBkYXRlZAogICAgICAgICAgICAvLyBpbiB0aGUgbGF5b3V0IHBoYXNlIHNvIHdlIGNhbiBhY2Nlc3MgaXQgZHVyaW5nIHRoZSB0ZWFyaW5nIGNoZWNrIHRoYXQKICAgICAgICAgICAgLy8gaGFwcGVucyBvbiBzdWJzY3JpYmUuCgogICAgICAgICAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gewogICAgICAgICAgICAgIGluc3QudmFsdWUgPSB2YWx1ZTsKICAgICAgICAgICAgICBpbnN0LmdldFNuYXBzaG90ID0gZ2V0U25hcHNob3Q7IC8vIFdoZW5ldmVyIGdldFNuYXBzaG90IG9yIHN1YnNjcmliZSBjaGFuZ2VzLCB3ZSBuZWVkIHRvIGNoZWNrIGluIHRoZQogICAgICAgICAgICAgIC8vIGNvbW1pdCBwaGFzZSBpZiB0aGVyZSB3YXMgYW4gaW50ZXJsZWF2ZWQgbXV0YXRpb24uIEluIGNvbmN1cnJlbnQgbW9kZQogICAgICAgICAgICAgIC8vIHRoaXMgY2FuIGhhcHBlbiBhbGwgdGhlIHRpbWUsIGJ1dCBldmVuIGluIHN5bmNocm9ub3VzIG1vZGUsIGFuIGVhcmxpZXIKICAgICAgICAgICAgICAvLyBlZmZlY3QgbWF5IGhhdmUgbXV0YXRlZCB0aGUgc3RvcmUuCgogICAgICAgICAgICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7CiAgICAgICAgICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci4KICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHsKICAgICAgICAgICAgICAgICAgaW5zdDogaW5zdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzCgogICAgICAgICAgICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTsKICAgICAgICAgICAgdXNlRWZmZWN0KCgpID0+IHsKICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyByaWdodCBiZWZvcmUgc3Vic2NyaWJpbmcuIFN1YnNlcXVlbnQgY2hhbmdlcyB3aWxsIGJlCiAgICAgICAgICAgICAgLy8gZGV0ZWN0ZWQgaW4gdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyLgogICAgICAgICAgICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7CiAgICAgICAgICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci4KICAgICAgICAgICAgICAgIGZvcmNlVXBkYXRlKHsKICAgICAgICAgICAgICAgICAgaW5zdDogaW5zdAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgaGFuZGxlU3RvcmVDaGFuZ2UgPSAoKSA9PiB7CiAgICAgICAgICAgICAgICAvLyBUT0RPOiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNyb3NzLXJlbmRlcmVyIEFQSSBmb3IgYmF0Y2hpbmcgdXBkYXRlcywgaXQncwogICAgICAgICAgICAgICAgLy8gdXAgdG8gdGhlIGNvbnN1bWVyIG9mIHRoaXMgbGlicmFyeSB0byB3cmFwIHRoZWlyIHN1YnNjcmlwdGlvbiBldmVudAogICAgICAgICAgICAgICAgLy8gd2l0aCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcy4gU2hvdWxkIHdlIHRyeSB0byBkZXRlY3Qgd2hlbiB0aGlzIGlzbid0CiAgICAgICAgICAgICAgICAvLyB0aGUgY2FzZSBhbmQgcHJpbnQgYSB3YXJuaW5nIGluIGRldmVsb3BtZW50PwogICAgICAgICAgICAgICAgLy8gVGhlIHN0b3JlIGNoYW5nZWQuIENoZWNrIGlmIHRoZSBzbmFwc2hvdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgd2UKICAgICAgICAgICAgICAgIC8vIHJlYWQgZnJvbSB0aGUgc3RvcmUuCiAgICAgICAgICAgICAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkgewogICAgICAgICAgICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci4KICAgICAgICAgICAgICAgICAgZm9yY2VVcGRhdGUoewogICAgICAgICAgICAgICAgICAgIGluc3Q6IGluc3QKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsgLy8gU3Vic2NyaWJlIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIGEgY2xlYW4tdXAgZnVuY3Rpb24uCgoKICAgICAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlKGhhbmRsZVN0b3JlQ2hhbmdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcwogICAgICAgICAgICB9LCBbc3Vic2NyaWJlXSk7CiAgICAgICAgICAgIHVzZURlYnVnVmFsdWUodmFsdWUpOwogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSB7CiAgICAgICAgICAgIHZhciBsYXRlc3RHZXRTbmFwc2hvdCA9IGluc3QuZ2V0U25hcHNob3Q7CiAgICAgICAgICAgIHZhciBwcmV2VmFsdWUgPSBpbnN0LnZhbHVlOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gbGF0ZXN0R2V0U25hcHNob3QoKTsKICAgICAgICAgICAgICByZXR1cm4gIWlzKHByZXZWYWx1ZSwgbmV4dFZhbHVlKTsKICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuCiAgICAgICAgICAgKgogICAgICAgICAgICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiAgICAgICAgICAgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAgICAgICAgICAgKgogICAgICAgICAgICogQGZsb3cKICAgICAgICAgICAqLwogICAgICAgICAgZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUkMShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkgewogICAgICAgICAgICAvLyBOb3RlOiBUaGUgc2hpbSBkb2VzIG5vdCB1c2UgZ2V0U2VydmVyU25hcHNob3QsIGJlY2F1c2UgcHJlLTE4IHZlcnNpb25zIG9mCiAgICAgICAgICAgIC8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbQogICAgICAgICAgICAvLyB3aWxsIG5lZWQgdG8gdHJhY2sgdGhhdCB0aGVtc2VsdmVzIGFuZCByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWUKICAgICAgICAgICAgLy8gZnJvbSBgZ2V0U25hcHNob3RgLgogICAgICAgICAgICByZXR1cm4gZ2V0U25hcHNob3QoKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvKioKICAgICAgICAgICAqIElubGluZWQgaW50byB0aGUgcmVhY3Qtcm91dGVyIHJlcG8gc2luY2UgdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgZG9lcyBub3QKICAgICAgICAgICAqIHByb3ZpZGUgYSBVTUQtY29tcGF0aWJsZSBwYWNrYWdlLCBzbyB3ZSBuZWVkIHRoaXMgdG8gYmUgYWJsZSB0byBkaXN0cmlidXRlCiAgICAgICAgICAgKiBVTUQgcmVhY3Qtcm91dGVyIGJ1bmRsZXMKICAgICAgICAgICAqLwogICAgICAgICAgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICJ1bmRlZmluZWQiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gInVuZGVmaW5lZCIpOwogICAgICAgICAgdmFyIGlzU2VydmVyRW52aXJvbm1lbnQgPSAhY2FuVXNlRE9NOwogICAgICAgICAgdmFyIHNoaW0gPSBpc1NlcnZlckVudmlyb25tZW50ID8gdXNlU3luY0V4dGVybmFsU3RvcmUkMSA6IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDI7CiAgICAgICAgICB2YXIgdXNlU3luY0V4dGVybmFsU3RvcmUgPSB0cnVlID8gKChtb2R1bGUpID0+IG1vZHVsZS51c2VTeW5jRXh0ZXJuYWxTdG9yZSkocmVhY3RfbmFtZXNwYWNlT2JqZWN0KSA6IHNoaW07CgogICAgICAgICAgdmFyIERhdGFSb3V0ZXJDb250ZXh0ID0gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7CgogICAgICAgICAgaWYgKGZhbHNlKSB7fQoKICAgICAgICAgIHZhciBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7CgogICAgICAgICAgaWYgKGZhbHNlKSB7fQoKICAgICAgICAgIHZhciBBd2FpdENvbnRleHQgPSAvKiNfX1BVUkVfXyovIC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi9udWxsICYmIFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7CgogICAgICAgICAgaWYgKGZhbHNlKSB7fQoKICAgICAgICAgIHZhciBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOwoKICAgICAgICAgIGlmIChmYWxzZSkge30KCiAgICAgICAgICB2YXIgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7CgogICAgICAgICAgaWYgKGZhbHNlKSB7fQoKICAgICAgICAgIHZhciBSb3V0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlQ29udGV4dCh7CiAgICAgICAgICAgIG91dGxldDogbnVsbCwKICAgICAgICAgICAgbWF0Y2hlczogW10KICAgICAgICAgIH0pOwoKICAgICAgICAgIGlmIChmYWxzZSkge30KCiAgICAgICAgICB2YXIgUm91dGVFcnJvckNvbnRleHQgPSAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsKCiAgICAgICAgICBpZiAoZmFsc2UpIHt9CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiAidG8iIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmcKICAgICAgICAgICAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLgogICAgICAgICAgICoKICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWhyZWYKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7CiAgICAgICAgICAgIHZhciBfcmVmMzAgPQoKICAgICAgICAgICAgICBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxyZWxhdGl2ZSA9IF9yZWYzMC5yZWxhdGl2ZTsKICAgICAgICAgICAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gZmFsc2UgPyAwIDogcm91dGVyX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgIHZhciBfcmVhY3QkdXNlQ29udGV4dCA9CgoKICAgICAgICAgICAgICByZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KSxiYXNlbmFtZSA9IF9yZWFjdCR1c2VDb250ZXh0LmJhc2VuYW1lLG5hdmlnYXRvciA9IF9yZWFjdCR1c2VDb250ZXh0Lm5hdmlnYXRvcjsKICAgICAgICAgICAgdmFyIF9kaXN0X3VzZVJlc29sdmVkUGF0aCA9CgoKCiAgICAgICAgICAgICAgZGlzdF91c2VSZXNvbHZlZFBhdGgodG8sIHsKICAgICAgICAgICAgICAgIHJlbGF0aXZlOiByZWxhdGl2ZQogICAgICAgICAgICAgIH0pLGhhc2ggPSBfZGlzdF91c2VSZXNvbHZlZFBhdGguaGFzaCxwYXRobmFtZSA9IF9kaXN0X3VzZVJlc29sdmVkUGF0aC5wYXRobmFtZSxzZWFyY2ggPSBfZGlzdF91c2VSZXNvbHZlZFBhdGguc2VhcmNoOwogICAgICAgICAgICB2YXIgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvcgogICAgICAgICAgICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhdwogICAgICAgICAgICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlCiAgICAgICAgICAgIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rcwoKICAgICAgICAgICAgaWYgKGJhc2VuYW1lICE9PSAiLyIpIHsKICAgICAgICAgICAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSAiLyIgPyBiYXNlbmFtZSA6IHJvdXRlcl9qb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRobmFtZV0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoewogICAgICAgICAgICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSwKICAgICAgICAgICAgICBzZWFyY2g6IHNlYXJjaCwKICAgICAgICAgICAgICBoYXNoOiBoYXNoCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHQKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHsKICAgICAgICAgICAgcmV0dXJuIHJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViCiAgICAgICAgICAgKiBicm93c2Vycy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93bgogICAgICAgICAgICogInJvdXRpbmciIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXkKICAgICAgICAgICAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb24KICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIGRpc3RfdXNlTG9jYXRpb24oKSB7CiAgICAgICAgICAgICF1c2VJblJvdXRlckNvbnRleHQoKSA/IGZhbHNlID8gMCA6IHJvdXRlcl9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOwogICAgICAgICAgICByZXR1cm4gcmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gYWN0aW9uIHdoaWNoIGRlc2NyaWJlcyBob3cgdGhlIHJvdXRlciBjYW1lIHRvCiAgICAgICAgICAgKiB0aGUgY3VycmVudCBsb2NhdGlvbiwgZWl0aGVyIGJ5IGEgcG9wLCBwdXNoLCBvciByZXBsYWNlIG9uIHRoZSBoaXN0b3J5IHN0YWNrLgogICAgICAgICAgICoKICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRpb24tdHlwZQogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7CiAgICAgICAgICAgIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLgogICAgICAgICAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgImFjdGl2ZSIgc3RhdGUsIGUuZy4KICAgICAgICAgICAqIDxOYXZMaW5rPi4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaAogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikgewogICAgICAgICAgICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBmYWxzZSA/IDAgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOwogICAgICAgICAgICB2YXIgX2Rpc3RfdXNlTG9jYXRpb24gPQoKICAgICAgICAgICAgICBkaXN0X3VzZUxvY2F0aW9uKCkscGF0aG5hbWUgPSBfZGlzdF91c2VMb2NhdGlvbi5wYXRobmFtZTsKICAgICAgICAgICAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFRoZSBpbnRlcmZhY2UgZm9yIHRoZSBuYXZpZ2F0ZSgpIGZ1bmN0aW9uIHJldHVybmVkIGZyb20gdXNlTmF2aWdhdGUoKS4KICAgICAgICAgICAqLwoKICAgICAgICAgIC8qKgogICAgICAgICAgICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dAogICAgICAgICAgICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLgogICAgICAgICAgICoKICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRlCiAgICAgICAgICAgKi8KICAgICAgICAgIGZ1bmN0aW9uIGRpc3RfdXNlTmF2aWdhdGUoKSB7CiAgICAgICAgICAgICF1c2VJblJvdXRlckNvbnRleHQoKSA/IGZhbHNlID8gMCA6IHJvdXRlcl9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOwogICAgICAgICAgICB2YXIgX3JlYWN0JHVzZUNvbnRleHQyID0KCgogICAgICAgICAgICAgIHJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLGJhc2VuYW1lID0gX3JlYWN0JHVzZUNvbnRleHQyLmJhc2VuYW1lLG5hdmlnYXRvciA9IF9yZWFjdCR1c2VDb250ZXh0Mi5uYXZpZ2F0b3I7CiAgICAgICAgICAgIHZhciBfcmVhY3QkdXNlQ29udGV4dDMgPQoKICAgICAgICAgICAgICByZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCksbWF0Y2hlcyA9IF9yZWFjdCR1c2VDb250ZXh0My5tYXRjaGVzOwogICAgICAgICAgICB2YXIgX2Rpc3RfdXNlTG9jYXRpb24yID0KCiAgICAgICAgICAgICAgZGlzdF91c2VMb2NhdGlvbigpLGxvY2F0aW9uUGF0aG5hbWUgPSBfZGlzdF91c2VMb2NhdGlvbjIucGF0aG5hbWU7CiAgICAgICAgICAgIHZhciByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAoKG1hdGNoKSA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTsKICAgICAgICAgICAgdmFyIGFjdGl2ZVJlZiA9IHJlYWN0LnVzZVJlZihmYWxzZSk7CiAgICAgICAgICAgIHJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7CiAgICAgICAgICAgICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIG5hdmlnYXRlID0gcmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7CiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9OwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZmFsc2UgPyAwIDogdm9pZCAwOwogICAgICAgICAgICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjsKCiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gIm51bWJlciIpIHsKICAgICAgICAgICAgICAgIG5hdmlnYXRvci5nbyh0byk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgcGF0aCA9IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCBvcHRpb25zLnJlbGF0aXZlID09PSAicGF0aCIpOyAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yCiAgICAgICAgICAgICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeS4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UKICAgICAgICAgICAgICAvLyBuYXZpZ2F0ZSB0byB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsCiAgICAgICAgICAgICAgLy8gY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3MKCiAgICAgICAgICAgICAgaWYgKGJhc2VuYW1lICE9PSAiLyIpIHsKICAgICAgICAgICAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSAiLyIgPyBiYXNlbmFtZSA6IHJvdXRlcl9qb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTsKICAgICAgICAgICAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pOwogICAgICAgICAgICByZXR1cm4gbmF2aWdhdGU7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBjb250ZXh0IChpZiBwcm92aWRlZCkgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZQogICAgICAgICAgICogaGllcmFyY2h5LgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0LWNvbnRleHQKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7CiAgICAgICAgICAgIHJldHVybiBSZWFjdC51c2VDb250ZXh0KE91dGxldENvbnRleHQpOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGUKICAgICAgICAgICAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0CiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkgewogICAgICAgICAgICB2YXIgb3V0bGV0ID0gcmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDsKCiAgICAgICAgICAgIGlmIChvdXRsZXQpIHsKICAgICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwgewogICAgICAgICAgICAgICAgdmFsdWU6IGNvbnRleHQKICAgICAgICAgICAgICB9LCBvdXRsZXQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gb3V0bGV0OwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnMgb2YgdGhlIGR5bmFtaWMgcGFyYW1zIGZyb20gdGhlIGN1cnJlbnQKICAgICAgICAgICAqIFVSTCB0aGF0IHdlcmUgbWF0Y2hlZCBieSB0aGUgcm91dGUgcGF0aC4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1wYXJhbXMKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZVBhcmFtcygpIHsKICAgICAgICAgICAgdmFyIF9SZWFjdCR1c2VDb250ZXh0ID0KCiAgICAgICAgICAgICAgUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLG1hdGNoZXMgPSBfUmVhY3QkdXNlQ29udGV4dC5tYXRjaGVzOwogICAgICAgICAgICB2YXIgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9OwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yZXNvbHZlZC1wYXRoCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiBkaXN0X3VzZVJlc29sdmVkUGF0aCh0bywgX3RlbXAyKSB7CiAgICAgICAgICAgIHZhciBfcmVmMzEgPQoKICAgICAgICAgICAgICBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyLHJlbGF0aXZlID0gX3JlZjMxLnJlbGF0aXZlOwogICAgICAgICAgICB2YXIgX3JlYWN0JHVzZUNvbnRleHQ0ID0KCiAgICAgICAgICAgICAgcmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLG1hdGNoZXMgPSBfcmVhY3QkdXNlQ29udGV4dDQubWF0Y2hlczsKICAgICAgICAgICAgdmFyIF9kaXN0X3VzZUxvY2F0aW9uMyA9CgogICAgICAgICAgICAgIGRpc3RfdXNlTG9jYXRpb24oKSxsb2NhdGlvblBhdGhuYW1lID0gX2Rpc3RfdXNlTG9jYXRpb24zLnBhdGhuYW1lOwogICAgICAgICAgICB2YXIgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKChtYXRjaCkgPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7CiAgICAgICAgICAgIHJldHVybiByZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gInBhdGgiKSwgW3RvLCByb3V0ZVBhdGhuYW1lc0pzb24sIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlXSk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWQKICAgICAgICAgICAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGUKICAgICAgICAgICAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIDxPdXRsZXQ+IHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzCiAgICAgICAgICAgKiBlbGVtZW50LgogICAgICAgICAgICoKICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlcwogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcpIHsKICAgICAgICAgICAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gZmFsc2UgPyAwIDogcm91dGVyX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgIHZhciBfcmVhY3QkdXNlQ29udGV4dDUgPQoKICAgICAgICAgICAgICByZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KSxuYXZpZ2F0b3IgPSBfcmVhY3QkdXNlQ29udGV4dDUubmF2aWdhdG9yOwogICAgICAgICAgICB2YXIgZGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IHJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7CiAgICAgICAgICAgIHZhciBfcmVhY3QkdXNlQ29udGV4dDYgPQoKICAgICAgICAgICAgICByZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkscGFyZW50TWF0Y2hlcyA9IF9yZWFjdCR1c2VDb250ZXh0Ni5tYXRjaGVzOwogICAgICAgICAgICB2YXIgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTsKICAgICAgICAgICAgdmFyIHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9OwogICAgICAgICAgICB2YXIgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6ICIvIjsKICAgICAgICAgICAgdmFyIHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6ICIvIjsKICAgICAgICAgICAgdmFyIHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlOwoKICAgICAgICAgICAgaWYgKGZhbHNlKSB7fQoKICAgICAgICAgICAgdmFyIGxvY2F0aW9uRnJvbUNvbnRleHQgPSBkaXN0X3VzZUxvY2F0aW9uKCk7CiAgICAgICAgICAgIHZhciBsb2NhdGlvbjsKCiAgICAgICAgICAgIGlmIChsb2NhdGlvbkFyZykgewogICAgICAgICAgICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7CgogICAgICAgICAgICAgIHZhciBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gInN0cmluZyIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7CiAgICAgICAgICAgICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09ICIvIiB8fCAoKF9wYXJzZWRMb2NhdGlvbkFyZyRwYSA9IHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lKSA9PSBudWxsID8gdm9pZCAwIDogX3BhcnNlZExvY2F0aW9uQXJnJHBhLnN0YXJ0c1dpdGgocGFyZW50UGF0aG5hbWVCYXNlKSkpID8gZmFsc2UgPyAwIDogcm91dGVyX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8ICIvIjsKICAgICAgICAgICAgdmFyIHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSAiLyIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8ICIvIjsKICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHsKICAgICAgICAgICAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWUKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoZmFsc2UpIHt9CgogICAgICAgICAgICB2YXIgcmVuZGVyZWRNYXRjaGVzID0gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcCgobWF0Y2gpID0+IE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7CiAgICAgICAgICAgICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksCiAgICAgICAgICAgICAgcGF0aG5hbWU6IHJvdXRlcl9qb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXMKICAgICAgICAgICAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWUpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVdKSwKICAgICAgICAgICAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gIi8iID8gcGFyZW50UGF0aG5hbWVCYXNlIDogcm91dGVyX2pvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlcwogICAgICAgICAgICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSkKICAgICAgICAgICAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGVDb250ZXh0IHx8IHVuZGVmaW5lZCk7IC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvCiAgICAgICAgICAgIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmAKICAgICAgICAgICAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLgoKCiAgICAgICAgICAgIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHsKICAgICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7CiAgICAgICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgICAgICBsb2NhdGlvbjogZGlzdF9leHRlbmRzKHsKICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogIi8iLAogICAgICAgICAgICAgICAgICAgIHNlYXJjaDogIiIsCiAgICAgICAgICAgICAgICAgICAgaGFzaDogIiIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IG51bGwsCiAgICAgICAgICAgICAgICAgICAga2V5OiAiZGVmYXVsdCIKICAgICAgICAgICAgICAgICAgfSwgbG9jYXRpb24pLAogICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogQWN0aW9uLlBvcAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIHJlbmRlcmVkTWF0Y2hlcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZW5kZXJlZE1hdGNoZXM7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gRGVmYXVsdEVycm9yRWxlbWVudCgpIHsKICAgICAgICAgICAgdmFyIGVycm9yID0gdXNlUm91dGVFcnJvcigpOwogICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSA/IGVycm9yLnN0YXR1cyArICIgIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTsKICAgICAgICAgICAgdmFyIHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDsKICAgICAgICAgICAgdmFyIGxpZ2h0Z3JleSA9ICJyZ2JhKDIwMCwyMDAsMjAwLCAwLjUpIjsKICAgICAgICAgICAgdmFyIHByZVN0eWxlcyA9IHsKICAgICAgICAgICAgICBwYWRkaW5nOiAiMC41cmVtIiwKICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleQogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgY29kZVN0eWxlcyA9IHsKICAgICAgICAgICAgICBwYWRkaW5nOiAiMnB4IDRweCIsCiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudCgiaDIiLCBudWxsLCAiVW5oYW5kbGVkIFRocm93biBFcnJvciEiKSwgLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoImgzIiwgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBmb250U3R5bGU6ICJpdGFsaWMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudCgicHJlIiwgewogICAgICAgICAgICAgIHN0eWxlOiBwcmVTdHlsZXMKICAgICAgICAgICAgfSwgc3RhY2spIDogbnVsbCwgLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCAiXHVEODNEXHVEQ0JGIEhleSBkZXZlbG9wZXIgXHVEODNEXHVEQzRCIiksIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgIllvdSBjYW4gcHJvdmlkZSBhIHdheSBiZXR0ZXIgVVggdGhhbiB0aGlzIHdoZW4geW91ciBhcHAgdGhyb3dzIGVycm9ycyBieSBwcm92aWRpbmcgeW91ciBvd25ceEEwIiwgLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoImNvZGUiLCB7CiAgICAgICAgICAgICAgc3R5bGU6IGNvZGVTdHlsZXMKICAgICAgICAgICAgfSwgImVycm9yRWxlbWVudCIpLCAiIHByb3BzIG9uXHhBMCIsIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KCJjb2RlIiwgewogICAgICAgICAgICAgIHN0eWxlOiBjb2RlU3R5bGVzCiAgICAgICAgICAgIH0sICI8Um91dGU+IikpKTsKICAgICAgICAgIH12YXIKCiAgICAgICAgICBSZW5kZXJFcnJvckJvdW5kYXJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfcmVhY3QkQ29tcG9uZW50KSB7X2luaGVyaXRzKFJlbmRlckVycm9yQm91bmRhcnksIF9yZWFjdCRDb21wb25lbnQpO3ZhciBfc3VwZXIyID0gX2NyZWF0ZVN1cGVyKFJlbmRlckVycm9yQm91bmRhcnkpOwogICAgICAgICAgICBmdW5jdGlvbiBSZW5kZXJFcnJvckJvdW5kYXJ5KHByb3BzKSB7dmFyIF90aGlzO19jbGFzc0NhbGxDaGVjazIodGhpcywgUmVuZGVyRXJyb3JCb3VuZGFyeSk7CiAgICAgICAgICAgICAgX3RoaXMgPSBfc3VwZXIyLmNhbGwodGhpcywgcHJvcHMpOwogICAgICAgICAgICAgIF90aGlzLnN0YXRlID0gewogICAgICAgICAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLAogICAgICAgICAgICAgICAgZXJyb3I6IHByb3BzLmVycm9yCiAgICAgICAgICAgICAgfTtyZXR1cm4gX3RoaXM7CiAgICAgICAgICAgIH1fY3JlYXRlQ2xhc3MyKFJlbmRlckVycm9yQm91bmRhcnksIFt7IGtleTogImNvbXBvbmVudERpZENhdGNoIiwgdmFsdWU6CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykgewogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigiUmVhY3QgUm91dGVyIGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXIiLCBlcnJvciwgZXJyb3JJbmZvKTsKICAgICAgICAgICAgICB9IH0sIHsga2V5OiAicmVuZGVyIiwgdmFsdWU6CgogICAgICAgICAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmVycm9yID8gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJvdXRlQ29udGV4dAogICAgICAgICAgICAgICAgfSwgLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVFcnJvckNvbnRleHQuUHJvdmlkZXIsIHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZXJyb3IsCiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudAogICAgICAgICAgICAgICAgfSkpIDogdGhpcy5wcm9wcy5jaGlsZHJlbjsKICAgICAgICAgICAgICB9IH1dLCBbeyBrZXk6ICJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7cmV0dXJuIHsgZXJyb3I6IGVycm9yIH07fSB9LCB7IGtleTogImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7Ly8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgImJhY2siIHRvIHRoZQogICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZQogICAgICAgICAgICAgICAgLy8gYXBwbGljYXRpb24sIHRoYXQgd2lsbCBoYXZlIG5vIGVmZmVjdC0tdGhlIGVycm9yIHBhZ2UgY29udGludWVzIHRvIGRpc3BsYXkuCiAgICAgICAgICAgICAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy4KICAgICAgICAgICAgICAgIC8vCiAgICAgICAgICAgICAgICAvLyBXaGV0aGVyIHdlJ3JlIGluIGFuIGVycm9yIHN0YXRlIG9yIG5vdCwgd2UgdXBkYXRlIHRoZSBsb2NhdGlvbiBpbiBzdGF0ZQogICAgICAgICAgICAgICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uCiAgICAgICAgICAgICAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuCiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubG9jYXRpb24gIT09IHByb3BzLmxvY2F0aW9uKSB7cmV0dXJuIHsgZXJyb3I6IHByb3BzLmVycm9yLCBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24gfTt9IC8vIElmIHdlJ3JlIG5vdCBjaGFuZ2luZyBsb2NhdGlvbnMsIHByZXNlcnZlIHRoZSBsb2NhdGlvbiBidXQgc3RpbGwgc3VyZmFjZQogICAgICAgICAgICAgICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkbwogICAgICAgICAgICAgICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dAogICAgICAgICAgICAgICAgLy8gdGhlIGxvY2F0aW9uIGNoYW5naW5nLgogICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IHByb3BzLmVycm9yIHx8IHN0YXRlLmVycm9yLCBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24gfTt9IH1dKTtyZXR1cm4gUmVuZGVyRXJyb3JCb3VuZGFyeTt9KHJlYWN0LkNvbXBvbmVudCk7ZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZShfcmVmKSB7dmFyIHJvdXRlQ29udGV4dCA9IF9yZWYucm91dGVDb250ZXh0LG1hdGNoID0gX3JlZi5tYXRjaCxjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47dmFyIGRhdGFSb3V0ZXJDb250ZXh0ID0gcmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7IC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2gKICAgICAgICAgICAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyCiAgICAgICAgICAgIGlmIChkYXRhUm91dGVyQ29udGV4dCAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dCAmJiBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQpIHtkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHsKICAgICAgICAgICAgICB2YWx1ZTogcm91dGVDb250ZXh0CiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUpIHsKICAgICAgICAgICAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIHBhcmVudE1hdGNoZXMgPSBbXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG1hdGNoZXMgPT0gbnVsbCkgewogICAgICAgICAgICAgIGlmIChkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCAmJiBkYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7CiAgICAgICAgICAgICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGUKICAgICAgICAgICAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlcwogICAgICAgICAgICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzOyAvLyBJZiB3ZSBoYXZlIGRhdGEgZXJyb3JzLCB0cmltIG1hdGNoZXMgdG8gdGhlIGhpZ2hlc3QgZXJyb3IgYm91bmRhcnkKCiAgICAgICAgICAgIHZhciBlcnJvcnMgPSBkYXRhUm91dGVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGFSb3V0ZXJTdGF0ZS5lcnJvcnM7CgogICAgICAgICAgICBpZiAoZXJyb3JzICE9IG51bGwpIHsKICAgICAgICAgICAgICB2YXIgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgoKG0pID0+IG0ucm91dGUuaWQgJiYgKGVycm9ycyA9PSBudWxsID8gdm9pZCAwIDogZXJyb3JzW20ucm91dGUuaWRdKSk7CiAgICAgICAgICAgICAgIShlcnJvckluZGV4ID49IDApID8gZmFsc2UgPyAwIDogcm91dGVyX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiByZW5kZXJlZE1hdGNoZXMucmVkdWNlUmlnaHQoKG91dGxldCwgbWF0Y2gsIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgdmFyIGVycm9yID0gbWF0Y2gucm91dGUuaWQgPyBlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gOiBudWxsOyAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzCgogICAgICAgICAgICAgIHZhciBlcnJvckVsZW1lbnQgPSBkYXRhUm91dGVyU3RhdGUgPyBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoRGVmYXVsdEVycm9yRWxlbWVudCwgbnVsbCkgOiBudWxsOwogICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gcGFyZW50TWF0Y2hlcy5jb25jYXQocmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIGluZGV4ICsgMSkpOwoKICAgICAgICAgICAgICB2YXIgZ2V0Q2hpbGRyZW4gPSAoKSA9PiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7CiAgICAgICAgICAgICAgICBtYXRjaDogbWF0Y2gsCiAgICAgICAgICAgICAgICByb3V0ZUNvbnRleHQ6IHsKICAgICAgICAgICAgICAgICAgb3V0bGV0OiBvdXRsZXQsCiAgICAgICAgICAgICAgICAgIG1hdGNoZXM6IG1hdGNoZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LCBlcnJvciA/IGVycm9yRWxlbWVudCA6IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiBvdXRsZXQpOyAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW4KICAgICAgICAgICAgICAvLyBlcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvIGFuIGFuY2VzdG9yCiAgICAgICAgICAgICAgLy8gZXJyb3JFbGVtZW50CgoKICAgICAgICAgICAgICByZXR1cm4gZGF0YVJvdXRlclN0YXRlICYmIChtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgaW5kZXggPT09IDApID8gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyRXJyb3JCb3VuZGFyeSwgewogICAgICAgICAgICAgICAgbG9jYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5sb2NhdGlvbiwKICAgICAgICAgICAgICAgIGNvbXBvbmVudDogZXJyb3JFbGVtZW50LAogICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLAogICAgICAgICAgICAgICAgY2hpbGRyZW46IGdldENoaWxkcmVuKCksCiAgICAgICAgICAgICAgICByb3V0ZUNvbnRleHQ6IHsKICAgICAgICAgICAgICAgICAgb3V0bGV0OiBudWxsLAogICAgICAgICAgICAgICAgICBtYXRjaGVzOiBtYXRjaGVzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkgOiBnZXRDaGlsZHJlbigpOwogICAgICAgICAgICB9LCBudWxsKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBEYXRhUm91dGVySG9vazsKCiAgICAgICAgICAoZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7CiAgICAgICAgICAgIERhdGFSb3V0ZXJIb29rWyJVc2VCbG9ja2VyIl0gPSAidXNlQmxvY2tlciI7CiAgICAgICAgICAgIERhdGFSb3V0ZXJIb29rWyJVc2VSZXZhbGlkYXRvciJdID0gInVzZVJldmFsaWRhdG9yIjsKICAgICAgICAgIH0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7CgogICAgICAgICAgdmFyIERhdGFSb3V0ZXJTdGF0ZUhvb2s7CgogICAgICAgICAgKGZ1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7CiAgICAgICAgICAgIERhdGFSb3V0ZXJTdGF0ZUhvb2tbIlVzZUxvYWRlckRhdGEiXSA9ICJ1c2VMb2FkZXJEYXRhIjsKICAgICAgICAgICAgRGF0YVJvdXRlclN0YXRlSG9va1siVXNlQWN0aW9uRGF0YSJdID0gInVzZUFjdGlvbkRhdGEiOwogICAgICAgICAgICBEYXRhUm91dGVyU3RhdGVIb29rWyJVc2VSb3V0ZUVycm9yIl0gPSAidXNlUm91dGVFcnJvciI7CiAgICAgICAgICAgIERhdGFSb3V0ZXJTdGF0ZUhvb2tbIlVzZU5hdmlnYXRpb24iXSA9ICJ1c2VOYXZpZ2F0aW9uIjsKICAgICAgICAgICAgRGF0YVJvdXRlclN0YXRlSG9va1siVXNlUm91dGVMb2FkZXJEYXRhIl0gPSAidXNlUm91dGVMb2FkZXJEYXRhIjsKICAgICAgICAgICAgRGF0YVJvdXRlclN0YXRlSG9va1siVXNlTWF0Y2hlcyJdID0gInVzZU1hdGNoZXMiOwogICAgICAgICAgICBEYXRhUm91dGVyU3RhdGVIb29rWyJVc2VSZXZhbGlkYXRvciJdID0gInVzZVJldmFsaWRhdG9yIjsKICAgICAgICAgIH0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpOwoKICAgICAgICAgIGZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIGhvb2tOYW1lICsgIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLiI7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHsKICAgICAgICAgICAgdmFyIGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpOwogICAgICAgICAgICAhY3R4ID8gZmFsc2UgPyAwIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsKICAgICAgICAgICAgcmV0dXJuIGN0eDsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHsKICAgICAgICAgICAgdmFyIHN0YXRlID0gcmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTsKICAgICAgICAgICAgIXN0YXRlID8gZmFsc2UgPyAwIDogcm91dGVyX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpIHsKICAgICAgICAgICAgdmFyIHJvdXRlID0gcmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpOwogICAgICAgICAgICAhcm91dGUgPyBmYWxzZSA/IDAgOiByb3V0ZXJfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lKSB7CiAgICAgICAgICAgIHZhciByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7CiAgICAgICAgICAgIHZhciB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07CiAgICAgICAgICAgICF0aGlzUm91dGUucm91dGUuaWQgPyBmYWxzZSA/IDAgOiByb3V0ZXJfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsKICAgICAgICAgICAgcmV0dXJuIHRoaXNSb3V0ZS5yb3V0ZS5pZDsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uLCBkZWZhdWx0aW5nIHRvIGFuICJpZGxlIiBuYXZpZ2F0aW9uIHdoZW4KICAgICAgICAgICAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3MKICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBkaXN0X3VzZU5hdmlnYXRpb24oKSB7CiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pOwogICAgICAgICAgICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsCiAgICAgICAgICAgKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnMKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZVJldmFsaWRhdG9yKCkgewogICAgICAgICAgICB2YXIgZGF0YVJvdXRlckNvbnRleHQgPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VSZXZhbGlkYXRvcik7CiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJldmFsaWRhdG9yKTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICByZXZhbGlkYXRlOiBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSwKICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUucmV2YWxpZGF0aW9uCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFJldHVybnMgdGhlIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLCB1c2VmdWwgZm9yIGFjY2Vzc2luZyBsb2FkZXJEYXRhIGZvcgogICAgICAgICAgICogcGFyZW50L2NoaWxkIHJvdXRlcyBvciB0aGUgcm91dGUgImhhbmRsZSIgcHJvcGVydHkKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIGRpc3RfdXNlTWF0Y2hlcygpIHsKICAgICAgICAgICAgdmFyIF91c2VEYXRhUm91dGVyU3RhdGUgPQoKCiAgICAgICAgICAgICAgdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyksbWF0Y2hlcyA9IF91c2VEYXRhUm91dGVyU3RhdGUubWF0Y2hlcyxsb2FkZXJEYXRhID0gX3VzZURhdGFSb3V0ZXJTdGF0ZS5sb2FkZXJEYXRhOwogICAgICAgICAgICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaGVzLm1hcCgobWF0Y2gpID0+IHsKICAgICAgICAgICAgICB2YXIKICAgICAgICAgICAgICAgIHBhdGhuYW1lID0KCiAgICAgICAgICAgICAgICBtYXRjaC5wYXRobmFtZSxwYXJhbXMgPSBtYXRjaC5wYXJhbXM7IC8vIE5vdGU6IFRoaXMgc3RydWN0dXJlIG1hdGNoZXMgdGhhdCBjcmVhdGVkIGJ5IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaAogICAgICAgICAgICAgIC8vIGluIHRoZSBAcmVtaXgtcnVuL3JvdXRlciAsIHNvIGlmIHlvdSBjaGFuZ2UgdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UKICAgICAgICAgICAgICAvLyB0aGF0IDopICBFdmVudHVhbGx5IHdlJ2xsIERSWSB0aGlzIHVwCgogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBpZDogbWF0Y2gucm91dGUuaWQsCiAgICAgICAgICAgICAgICBwYXRobmFtZTogcGF0aG5hbWUsCiAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcywKICAgICAgICAgICAgICAgIGRhdGE6IGxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdLAogICAgICAgICAgICAgICAgaGFuZGxlOiBtYXRjaC5yb3V0ZS5oYW5kbGUKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KSwgW21hdGNoZXMsIGxvYWRlckRhdGFdKTsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogUmV0dXJucyB0aGUgbG9hZGVyIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGxvYWRlcgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHsKICAgICAgICAgICAgdmFyIHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7CiAgICAgICAgICAgIHZhciByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTsKCiAgICAgICAgICAgIGlmIChzdGF0ZS5lcnJvcnMgJiYgc3RhdGUuZXJyb3JzW3JvdXRlSWRdICE9IG51bGwpIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCJZb3UgY2Fubm90IGB1c2VMb2FkZXJEYXRhYCBpbiBhbiBlcnJvckVsZW1lbnQgKHJvdXRlSWQ6ICIgKyByb3V0ZUlkICsgIikiKTsKICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWQKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZVJvdXRlTG9hZGVyRGF0YShyb3V0ZUlkKSB7CiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlTG9hZGVyRGF0YSk7CiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBhY3Rpb24gZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgYWN0aW9uCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiB1c2VBY3Rpb25EYXRhKCkgewogICAgICAgICAgICB2YXIgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VBY3Rpb25EYXRhKTsKICAgICAgICAgICAgdmFyIHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpOwogICAgICAgICAgICAhcm91dGUgPyBmYWxzZSA/IDAgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOwogICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uCiAgICAgICAgICAgKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91cgogICAgICAgICAgICogZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS4KICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7CiAgICAgICAgICAgIHZhciBfc3RhdGUkZXJyb3JzOwoKICAgICAgICAgICAgdmFyIGVycm9yID0gcmVhY3QudXNlQ29udGV4dChSb3V0ZUVycm9yQ29udGV4dCk7CiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpOwogICAgICAgICAgICB2YXIgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7IC8vIElmIHRoaXMgd2FzIGEgcmVuZGVyIGVycm9yLCB3ZSBwdXQgaXQgaW4gYSBSb3V0ZUVycm9yIGNvbnRleHQgaW5zaWRlCiAgICAgICAgICAgIC8vIG9mIFJlbmRlckVycm9yQm91bmRhcnkKCiAgICAgICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfSAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlCgoKICAgICAgICAgICAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1tyb3V0ZUlkXTsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogUmV0dXJucyB0aGUgaGFwcHktcGF0aCBkYXRhIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkgewogICAgICAgICAgICB2YXIgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiB1c2VBc3luY0Vycm9yKCkgewogICAgICAgICAgICB2YXIgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2Vycm9yOwogICAgICAgICAgfSAvLyB1c2VCbG9ja2VyKCkgaXMgYSBzaW5nbGV0b24gZm9yIG5vdyBzaW5jZSB3ZSBkb24ndCBoYXZlIGFueSBjb21wZWxsaW5nIHVzZQogICAgICAgICAgLy8gY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0CgogICAgICAgICAgdmFyIGJsb2NrZXJLZXkgPSAiYmxvY2tlci1zaW5nbGV0b24iOwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlCiAgICAgICAgICAgKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWQKICAgICAgICAgICAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvcgogICAgICAgICAgICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gdXNlQmxvY2tlcihzaG91bGRCbG9jaykgewogICAgICAgICAgICB2YXIgX3VzZURhdGFSb3V0ZXJDb250ZXh0ID0KCiAgICAgICAgICAgICAgdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlQmxvY2tlcikscm91dGVyID0gX3VzZURhdGFSb3V0ZXJDb250ZXh0LnJvdXRlcjsKICAgICAgICAgICAgdmFyIGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKChhcmdzKSA9PiB7CiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzaG91bGRCbG9jayA9PT0gImZ1bmN0aW9uIiA/ICEhc2hvdWxkQmxvY2soYXJncykgOiAhIXNob3VsZEJsb2NrOwogICAgICAgICAgICB9LCBbc2hvdWxkQmxvY2tdKTsKICAgICAgICAgICAgdmFyIGJsb2NrZXIgPSByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pOyAvLyBDbGVhbnVwIG9uIHVubW91bnQKCiAgICAgICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihibG9ja2VyS2V5KSwgW3JvdXRlcl0pOwogICAgICAgICAgICByZXR1cm4gYmxvY2tlcjsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBhbHJlYWR5V2FybmVkID0ge307CgogICAgICAgICAgZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7CiAgICAgICAgICAgIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7CiAgICAgICAgICAgICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTsKICAgICAgICAgICAgICBmYWxzZSA/IDAgOiB2b2lkIDA7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvKioKICAgICAgICAgICAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJCiAgICAgICAgICAgKi8KICAgICAgICAgIGZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHsKICAgICAgICAgICAgdmFyCiAgICAgICAgICAgICAgZmFsbGJhY2tFbGVtZW50ID0KCiAgICAgICAgICAgICAgX3JlZi5mYWxsYmFja0VsZW1lbnQscm91dGVyID0gX3JlZi5yb3V0ZXI7CiAgICAgICAgICAgIC8vIFN5bmMgcm91dGVyIHN0YXRlIHRvIG91ciBjb21wb25lbnQgc3RhdGUgdG8gZm9yY2UgcmUtcmVuZGVycwogICAgICAgICAgICB2YXIgc3RhdGUgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZShyb3V0ZXIuc3Vic2NyaWJlLCAoKSA9PiByb3V0ZXIuc3RhdGUsIC8vIFdlIGhhdmUgdG8gcHJvdmlkZSB0aGlzIHNvIFJlYWN0QDE4IGRvZXNuJ3QgY29tcGxhaW4gZHVyaW5nIGh5ZHJhdGlvbiwKICAgICAgICAgICAgLy8gYnV0IHdlIHBhc3Mgb3VyIHNlcmlhbGl6ZWQgaHlkcmF0aW9uIGRhdGEgaW50byB0aGUgcm91dGVyIHNvIHN0YXRlIGhlcmUKICAgICAgICAgICAgLy8gaXMgYWxyZWFkeSBzeW5jZWQgd2l0aCB3aGF0IHRoZSBzZXJ2ZXIgc2F3CiAgICAgICAgICAgICgpID0+IHJvdXRlci5zdGF0ZSk7CiAgICAgICAgICAgIHZhciBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsCiAgICAgICAgICAgICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLAogICAgICAgICAgICAgICAgZ286IChuKSA9PiByb3V0ZXIubmF2aWdhdGUobiksCiAgICAgICAgICAgICAgICBwdXNoOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHsKICAgICAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLAogICAgICAgICAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywgewogICAgICAgICAgICAgICAgICByZXBsYWNlOiB0cnVlLAogICAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSwgW3JvdXRlcl0pOwogICAgICAgICAgICB2YXIgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgIi8iOyAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzCiAgICAgICAgICAgIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlCiAgICAgICAgICAgIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLgogICAgICAgICAgICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3MKICAgICAgICAgICAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoCiAgICAgICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZwoKICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciwgewogICAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICByb3V0ZXI6IHJvdXRlciwKICAgICAgICAgICAgICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLAogICAgICAgICAgICAgICAgc3RhdGljOiBmYWxzZSwKICAgICAgICAgICAgICAgIC8vIERvIHdlIG5lZWQgdGhpcz8KICAgICAgICAgICAgICAgIGJhc2VuYW1lOiBiYXNlbmFtZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwgewogICAgICAgICAgICAgIHZhbHVlOiBzdGF0ZQogICAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChkaXN0X1JvdXRlciwgewogICAgICAgICAgICAgIGJhc2VuYW1lOiByb3V0ZXIuYmFzZW5hbWUsCiAgICAgICAgICAgICAgbG9jYXRpb246IHJvdXRlci5zdGF0ZS5sb2NhdGlvbiwKICAgICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogcm91dGVyLnN0YXRlLmhpc3RvcnlBY3Rpb24sCiAgICAgICAgICAgICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3IKICAgICAgICAgICAgfSwgcm91dGVyLnN0YXRlLmluaXRpYWxpemVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVzLCBudWxsKSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7CiAgICAgICAgICB9CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXIKICAgICAgICAgICAqLwogICAgICAgICAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYyKSB7CiAgICAgICAgICAgIHZhcgogICAgICAgICAgICAgIGJhc2VuYW1lID0KCgoKICAgICAgICAgICAgICBfcmVmMi5iYXNlbmFtZSxjaGlsZHJlbiA9IF9yZWYyLmNoaWxkcmVuLGluaXRpYWxFbnRyaWVzID0gX3JlZjIuaW5pdGlhbEVudHJpZXMsaW5pdGlhbEluZGV4ID0gX3JlZjIuaW5pdGlhbEluZGV4OwogICAgICAgICAgICB2YXIgaGlzdG9yeVJlZiA9IHJlYWN0LnVzZVJlZigpOwoKICAgICAgICAgICAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gcm91dGVyX2NyZWF0ZU1lbW9yeUhpc3RvcnkoewogICAgICAgICAgICAgICAgaW5pdGlhbEVudHJpZXM6IGluaXRpYWxFbnRyaWVzLAogICAgICAgICAgICAgICAgaW5pdGlhbEluZGV4OiBpbml0aWFsSW5kZXgsCiAgICAgICAgICAgICAgICB2NUNvbXBhdDogdHJ1ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDsKICAgICAgICAgICAgdmFyIF9yZWFjdCR1c2VTdGF0ZSA9IHJlYWN0LnVzZVN0YXRlKHsKICAgICAgICAgICAgICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sCiAgICAgICAgICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbgogICAgICAgICAgICAgIH0pLF9yZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheTIoX3JlYWN0JHVzZVN0YXRlLCAyKSxzdGF0ZSA9IF9yZWFjdCR1c2VTdGF0ZTJbMF0sc2V0U3RhdGUgPSBfcmVhY3QkdXNlU3RhdGUyWzFdOwogICAgICAgICAgICByZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pOwogICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoZGlzdF9Sb3V0ZXIsIHsKICAgICAgICAgICAgICBiYXNlbmFtZTogYmFzZW5hbWUsCiAgICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLAogICAgICAgICAgICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbiwKICAgICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLAogICAgICAgICAgICAgIG5hdmlnYXRvcjogaGlzdG9yeQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KCiAgICAgICAgICAvKioKICAgICAgICAgICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uCiAgICAgICAgICAgKgogICAgICAgICAgICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3QKICAgICAgICAgICAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZQogICAgICAgICAgICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL25hdmlnYXRlCiAgICAgICAgICAgKi8KICAgICAgICAgIGZ1bmN0aW9uIE5hdmlnYXRlKF9yZWYzKSB7CiAgICAgICAgICAgIHZhcgogICAgICAgICAgICAgIHRvID0KCgoKICAgICAgICAgICAgICBfcmVmMy50byxyZXBsYWNlID0gX3JlZjMucmVwbGFjZSxzdGF0ZSA9IF9yZWYzLnN0YXRlLHJlbGF0aXZlID0gX3JlZjMucmVsYXRpdmU7CiAgICAgICAgICAgICF1c2VJblJvdXRlckNvbnRleHQoKSA/IGZhbHNlID8gMCA6IHJvdXRlcl9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOwogICAgICAgICAgICBmYWxzZSA/IDAgOiB2b2lkIDA7CiAgICAgICAgICAgIHZhciBkYXRhUm91dGVyU3RhdGUgPSByZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpOwogICAgICAgICAgICB2YXIgbmF2aWdhdGUgPSBkaXN0X3VzZU5hdmlnYXRlKCk7CiAgICAgICAgICAgIHJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7CiAgICAgICAgICAgICAgLy8gQXZvaWQga2lja2luZyBvZmYgbXVsdGlwbGUgbmF2aWdhdGlvbnMgaWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhCiAgICAgICAgICAgICAgLy8gZGF0YS1yb3V0ZXIgbmF2aWdhdGlvbiwgc2luY2UgY29tcG9uZW50cyBnZXQgcmUtcmVuZGVyZWQgd2hlbiB3ZSBlbnRlcgogICAgICAgICAgICAgIC8vIGEgc3VibWl0dGluZy9sb2FkaW5nIHN0YXRlCiAgICAgICAgICAgICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSAmJiBkYXRhUm91dGVyU3RhdGUubmF2aWdhdGlvbi5zdGF0ZSAhPT0gImlkbGUiKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBuYXZpZ2F0ZSh0bywgewogICAgICAgICAgICAgICAgcmVwbGFjZTogcmVwbGFjZSwKICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICAgICAgICAgIHJlbGF0aXZlOiByZWxhdGl2ZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvb3V0bGV0CiAgICAgICAgICAgKi8KICAgICAgICAgIGZ1bmN0aW9uIE91dGxldChwcm9wcykgewogICAgICAgICAgICByZXR1cm4gdXNlT3V0bGV0KHByb3BzLmNvbnRleHQpOwogICAgICAgICAgfQoKICAgICAgICAgIC8qKgogICAgICAgICAgICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlCiAgICAgICAgICAgKi8KICAgICAgICAgIGZ1bmN0aW9uIFJvdXRlKF9wcm9wcykgewogICAgICAgICAgICBmYWxzZSA/IDAgOiByb3V0ZXJfaW52YXJpYW50KGZhbHNlKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvKioKICAgICAgICAgICAqIFByb3ZpZGVzIGxvY2F0aW9uIGNvbnRleHQgZm9yIHRoZSByZXN0IG9mIHRoZSBhcHAuCiAgICAgICAgICAgKgogICAgICAgICAgICogTm90ZTogWW91IHVzdWFsbHkgd29uJ3QgcmVuZGVyIGEgPFJvdXRlcj4gZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYQogICAgICAgICAgICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSA8QnJvd3NlclJvdXRlcj4KICAgICAgICAgICAqIGluIHdlYiBicm93c2VycyBvciBhIDxTdGF0aWNSb3V0ZXI+IGZvciBzZXJ2ZXIgcmVuZGVyaW5nLgogICAgICAgICAgICoKICAgICAgICAgICAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVyLWNvbXBvbmVudHMvcm91dGVyCiAgICAgICAgICAgKi8KICAgICAgICAgIGZ1bmN0aW9uIGRpc3RfUm91dGVyKF9yZWY0KSB7CiAgICAgICAgICAgIHZhciBfcmVmNCRiYXNlbmFtZSA9CgoKCgoKCiAgICAgICAgICAgICAgX3JlZjQuYmFzZW5hbWUsYmFzZW5hbWVQcm9wID0gX3JlZjQkYmFzZW5hbWUgPT09IHZvaWQgMCA/ICIvIiA6IF9yZWY0JGJhc2VuYW1lLF9yZWY0JGNoaWxkcmVuID0gX3JlZjQuY2hpbGRyZW4sY2hpbGRyZW4gPSBfcmVmNCRjaGlsZHJlbiA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY0JGNoaWxkcmVuLGxvY2F0aW9uUHJvcCA9IF9yZWY0LmxvY2F0aW9uLF9yZWY0JG5hdmlnYXRpb25UeXBlID0gX3JlZjQubmF2aWdhdGlvblR5cGUsbmF2aWdhdGlvblR5cGUgPSBfcmVmNCRuYXZpZ2F0aW9uVHlwZSA9PT0gdm9pZCAwID8gQWN0aW9uLlBvcCA6IF9yZWY0JG5hdmlnYXRpb25UeXBlLG5hdmlnYXRvciA9IF9yZWY0Lm5hdmlnYXRvcixfcmVmNCRzdGF0aWMgPSBfcmVmNC5zdGF0aWMsc3RhdGljUHJvcCA9IF9yZWY0JHN0YXRpYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNCRzdGF0aWM7CiAgICAgICAgICAgICEhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBmYWxzZSA/IDAgOiByb3V0ZXJfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sCiAgICAgICAgICAgIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcAoKICAgICAgICAgICAgdmFyIGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cLyovLCAiLyIpOwogICAgICAgICAgICB2YXIgbmF2aWdhdGlvbkNvbnRleHQgPSByZWFjdC51c2VNZW1vKCgpID0+ICh7CiAgICAgICAgICAgICAgYmFzZW5hbWU6IGJhc2VuYW1lLAogICAgICAgICAgICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLAogICAgICAgICAgICAgIHN0YXRpYzogc3RhdGljUHJvcAogICAgICAgICAgICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgbG9jYXRpb25Qcm9wID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgX2xvY2F0aW9uUHJvcCA9CgoKCgoKICAgICAgICAgICAgICBsb2NhdGlvblByb3AsX2xvY2F0aW9uUHJvcCRwYXRobmFtID0gX2xvY2F0aW9uUHJvcC5wYXRobmFtZSxwYXRobmFtZSA9IF9sb2NhdGlvblByb3AkcGF0aG5hbSA9PT0gdm9pZCAwID8gIi8iIDogX2xvY2F0aW9uUHJvcCRwYXRobmFtLF9sb2NhdGlvblByb3Akc2VhcmNoID0gX2xvY2F0aW9uUHJvcC5zZWFyY2gsc2VhcmNoID0gX2xvY2F0aW9uUHJvcCRzZWFyY2ggPT09IHZvaWQgMCA/ICIiIDogX2xvY2F0aW9uUHJvcCRzZWFyY2gsX2xvY2F0aW9uUHJvcCRoYXNoID0gX2xvY2F0aW9uUHJvcC5oYXNoLGhhc2ggPSBfbG9jYXRpb25Qcm9wJGhhc2ggPT09IHZvaWQgMCA/ICIiIDogX2xvY2F0aW9uUHJvcCRoYXNoLF9sb2NhdGlvblByb3Akc3RhdGUgPSBfbG9jYXRpb25Qcm9wLnN0YXRlLHN0YXRlID0gX2xvY2F0aW9uUHJvcCRzdGF0ZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9sb2NhdGlvblByb3Akc3RhdGUsX2xvY2F0aW9uUHJvcCRrZXkgPSBfbG9jYXRpb25Qcm9wLmtleSxrZXkgPSBfbG9jYXRpb25Qcm9wJGtleSA9PT0gdm9pZCAwID8gImRlZmF1bHQiIDogX2xvY2F0aW9uUHJvcCRrZXk7CiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHJlYWN0LnVzZU1lbW8oKCkgPT4gewogICAgICAgICAgICAgIHZhciB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpOwoKICAgICAgICAgICAgICBpZiAodHJhaWxpbmdQYXRobmFtZSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSwKICAgICAgICAgICAgICAgIHNlYXJjaDogc2VhcmNoLAogICAgICAgICAgICAgICAgaGFzaDogaGFzaCwKICAgICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSwKICAgICAgICAgICAgICAgIGtleToga2V5CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5XSk7CiAgICAgICAgICAgIGZhbHNlID8gMCA6IHZvaWQgMDsKCiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PSBudWxsKSB7CiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwgewogICAgICAgICAgICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dAogICAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHsKICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sCiAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbiwKICAgICAgICAgICAgICAgIG5hdmlnYXRpb25UeXBlOiBuYXZpZ2F0aW9uVHlwZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwogICAgICAgICAgfQoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaAogICAgICAgICAgICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlcwogICAgICAgICAgICovCiAgICAgICAgICBmdW5jdGlvbiBSb3V0ZXMoX3JlZjUpIHsKICAgICAgICAgICAgdmFyCiAgICAgICAgICAgICAgY2hpbGRyZW4gPQoKICAgICAgICAgICAgICBfcmVmNS5jaGlsZHJlbixsb2NhdGlvbiA9IF9yZWY1LmxvY2F0aW9uOwogICAgICAgICAgICB2YXIgZGF0YVJvdXRlckNvbnRleHQgPSByZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTsgLy8gV2hlbiBpbiBhIERhdGFSb3V0ZXJDb250ZXh0IF93aXRob3V0XyBjaGlsZHJlbiwgd2UgdXNlIHRoZSByb3V0ZXIgcm91dGVzCiAgICAgICAgICAgIC8vIGRpcmVjdGx5LiAgSWYgd2UgaGF2ZSBjaGlsZHJlbiwgdGhlbiB3ZSdyZSBpbiBhIGRlc2NlbmRhbnQgdHJlZSBhbmQgd2UKICAgICAgICAgICAgLy8gbmVlZCB0byB1c2UgY2hpbGQgcm91dGVzLgoKICAgICAgICAgICAgdmFyIHJvdXRlcyA9IGRhdGFSb3V0ZXJDb250ZXh0ICYmICFjaGlsZHJlbiA/IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yb3V0ZXMgOiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pOwogICAgICAgICAgICByZXR1cm4gdXNlUm91dGVzKHJvdXRlcywgbG9jYXRpb24pOwogICAgICAgICAgfQoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpCiAgICAgICAgICAgKiBpbiBhIGxvYWRlciBmdW5jdGlvbgogICAgICAgICAgICovCiAgICAgICAgICBmdW5jdGlvbiBBd2FpdChfcmVmNikgewogICAgICAgICAgICB2YXIKICAgICAgICAgICAgICBjaGlsZHJlbiA9CgoKICAgICAgICAgICAgICBfcmVmNi5jaGlsZHJlbixlcnJvckVsZW1lbnQgPSBfcmVmNi5lcnJvckVsZW1lbnQscmVzb2x2ZSA9IF9yZWY2LnJlc29sdmU7CiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHsKICAgICAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLAogICAgICAgICAgICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50CiAgICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTsKICAgICAgICAgIH0KICAgICAgICAgIHZhciBBd2FpdFJlbmRlclN0YXR1czsKCiAgICAgICAgICAoZnVuY3Rpb24gKEF3YWl0UmVuZGVyU3RhdHVzKSB7CiAgICAgICAgICAgIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzWyJwZW5kaW5nIl0gPSAwXSA9ICJwZW5kaW5nIjsKICAgICAgICAgICAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbInN1Y2Nlc3MiXSA9IDFdID0gInN1Y2Nlc3MiOwogICAgICAgICAgICBBd2FpdFJlbmRlclN0YXR1c1tBd2FpdFJlbmRlclN0YXR1c1siZXJyb3IiXSA9IDJdID0gImVycm9yIjsKICAgICAgICAgIH0pKEF3YWl0UmVuZGVyU3RhdHVzIHx8IChBd2FpdFJlbmRlclN0YXR1cyA9IHt9KSk7CgogICAgICAgICAgdmFyIG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7dmFyCgogICAgICAgICAgQXdhaXRFcnJvckJvdW5kYXJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfcmVhY3QkQ29tcG9uZW50Mikge19pbmhlcml0cyhBd2FpdEVycm9yQm91bmRhcnksIF9yZWFjdCRDb21wb25lbnQyKTt2YXIgX3N1cGVyMyA9IF9jcmVhdGVTdXBlcihBd2FpdEVycm9yQm91bmRhcnkpOwogICAgICAgICAgICBmdW5jdGlvbiBBd2FpdEVycm9yQm91bmRhcnkocHJvcHMpIHt2YXIgX3RoaXMyO19jbGFzc0NhbGxDaGVjazIodGhpcywgQXdhaXRFcnJvckJvdW5kYXJ5KTsKICAgICAgICAgICAgICBfdGhpczIgPSBfc3VwZXIzLmNhbGwodGhpcywgcHJvcHMpOwogICAgICAgICAgICAgIF90aGlzMi5zdGF0ZSA9IHsKICAgICAgICAgICAgICAgIGVycm9yOiBudWxsCiAgICAgICAgICAgICAgfTtyZXR1cm4gX3RoaXMyOwogICAgICAgICAgICB9X2NyZWF0ZUNsYXNzMihBd2FpdEVycm9yQm91bmRhcnksIFt7IGtleTogImNvbXBvbmVudERpZENhdGNoIiwgdmFsdWU6CgoKCgoKCgogICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlciIsIGVycm9yLCBlcnJvckluZm8pOwogICAgICAgICAgICAgIH0gfSwgeyBrZXk6ICJyZW5kZXIiLCB2YWx1ZToKCiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICAgICAgICAgICAgdmFyIF90aGlzJHByb3BzID0KCgoKICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcyxjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLGVycm9yRWxlbWVudCA9IF90aGlzJHByb3BzLmVycm9yRWxlbWVudCxyZXNvbHZlID0gX3RoaXMkcHJvcHMucmVzb2x2ZTsKICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gbnVsbDsKICAgICAgICAgICAgICAgIHZhciBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nOwoKICAgICAgICAgICAgICAgIGlmICghKHJlc29sdmUgaW5zdGFuY2VvZiBQcm9taXNlKSkgewogICAgICAgICAgICAgICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlCiAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3M7CiAgICAgICAgICAgICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsICJfdHJhY2tlZCIsIHsKICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHRydWUKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCAiX2RhdGEiLCB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiByZXNvbHZlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7CiAgICAgICAgICAgICAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2UKICAgICAgICAgICAgICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3I7CiAgICAgICAgICAgICAgICAgIHZhciByZW5kZXJFcnJvciA9IHRoaXMuc3RhdGUuZXJyb3I7CiAgICAgICAgICAgICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5ncwoKICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsICJfdHJhY2tlZCIsIHsKICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHRydWUKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCAiX2Vycm9yIiwgewogICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gcmVuZGVyRXJyb3IKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmUuX3RyYWNrZWQpIHsKICAgICAgICAgICAgICAgICAgLy8gQWxyZWFkeSB0cmFja2VkIHByb21pc2UgLSBjaGVjayBjb250ZW50cwogICAgICAgICAgICAgICAgICBwcm9taXNlID0gcmVzb2x2ZTsKICAgICAgICAgICAgICAgICAgc3RhdHVzID0gcHJvbWlzZS5fZXJyb3IgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogcHJvbWlzZS5fZGF0YSAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcyA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAvLyBSYXcgKHVudHJhY2tlZCkgcHJvbWlzZSAtIHRyYWNrIGl0CiAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7CiAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCAiX3RyYWNrZWQiLCB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB0cnVlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICBwcm9taXNlID0gcmVzb2x2ZS50aGVuKChkYXRhKSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgIl9kYXRhIiwgewogICAgICAgICAgICAgICAgICAgIGdldDogKCkgPT4gZGF0YQogICAgICAgICAgICAgICAgICB9KSwgKGVycm9yKSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgIl9lcnJvciIsIHsKICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGVycm9yCiAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJiBwcm9taXNlLl9lcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yKSB7CiAgICAgICAgICAgICAgICAgIC8vIEZyZWV6ZSB0aGUgVUkgYnkgdGhyb3dpbmcgYSBuZXZlciByZXNvbHZlZCBwcm9taXNlCiAgICAgICAgICAgICAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgIWVycm9yRWxlbWVudCkgewogICAgICAgICAgICAgICAgICAvLyBObyBlcnJvckVsZW1lbnQsIHRocm93IHRvIHRoZSBuZWFyZXN0IHJvdXRlLWxldmVsIGVycm9yIGJvdW5kYXJ5CiAgICAgICAgICAgICAgICAgIHRocm93IHByb21pc2UuX2Vycm9yOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yKSB7CiAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudAogICAgICAgICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHByb21pc2UsCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGVycm9yRWxlbWVudAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciBjaGlsZHJlbiB3aXRoIHJlc29sdmVkIHZhbHVlCiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcHJvbWlzZSwKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IC8vIFRocm93IHRvIHRoZSBzdXNwZW5zZSBib3VuZGFyeQoKCiAgICAgICAgICAgICAgICB0aHJvdyBwcm9taXNlOwogICAgICAgICAgICAgIH0gfV0sIFt7IGtleTogImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtyZXR1cm4geyBlcnJvcjogZXJyb3IgfTt9IH1dKTtyZXR1cm4gQXdhaXRFcnJvckJvdW5kYXJ5O30ocmVhY3QuQ29tcG9uZW50KTsKCgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAcHJpdmF0ZQogICAgICAgICAgICogSW5kaXJlY3Rpb24gdG8gbGV2ZXJhZ2UgdXNlQXN5bmNWYWx1ZSBmb3IgYSByZW5kZXItcHJvcCBBUEkgb24gPEF3YWl0PgogICAgICAgICAgICovCgoKICAgICAgICAgIGZ1bmN0aW9uIFJlc29sdmVBd2FpdChfcmVmNykgewogICAgICAgICAgICB2YXIKICAgICAgICAgICAgY2hpbGRyZW4gPQogICAgICAgICAgICBfcmVmNy5jaGlsZHJlbjsKICAgICAgICAgICAgdmFyIGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7CiAgICAgICAgICAgIHZhciB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gImZ1bmN0aW9uIiA/IGNoaWxkcmVuKGRhdGEpIDogY2hpbGRyZW47CiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgdG9SZW5kZXIpOwogICAgICAgICAgfSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgICAvLyBVVElMUwogICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQ3JlYXRlcyBhIHJvdXRlIGNvbmZpZyBmcm9tIGEgUmVhY3QgImNoaWxkcmVuIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHkKICAgICAgICAgICAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieQogICAgICAgICAgICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uCiAgICAgICAgICAgKgogICAgICAgICAgICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW4KICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4sIHBhcmVudFBhdGgpIHsKICAgICAgICAgICAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIHBhcmVudFBhdGggPSBbXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHJvdXRlcyA9IFtdOwogICAgICAgICAgICByZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHsKICAgICAgICAgICAgICBpZiAoISAvKiNfX1BVUkVfXyovcmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHsKICAgICAgICAgICAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmUKICAgICAgICAgICAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSByZWFjdC5GcmFnbWVudCkgewogICAgICAgICAgICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uCiAgICAgICAgICAgICAgICByb3V0ZXMucHVzaC5hcHBseShyb3V0ZXMsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCBwYXJlbnRQYXRoKSk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAhKGVsZW1lbnQudHlwZSA9PT0gUm91dGUpID8gZmFsc2UgPyAwIDogcm91dGVyX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgICAgISghZWxlbWVudC5wcm9wcy5pbmRleCB8fCAhZWxlbWVudC5wcm9wcy5jaGlsZHJlbikgPyBmYWxzZSA/IDAgOiByb3V0ZXJfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsKICAgICAgICAgICAgICB2YXIgdHJlZVBhdGggPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5MihwYXJlbnRQYXRoKSwgW2luZGV4XSk7CiAgICAgICAgICAgICAgdmFyIHJvdXRlID0gewogICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQucHJvcHMuaWQgfHwgdHJlZVBhdGguam9pbigiLSIpLAogICAgICAgICAgICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLAogICAgICAgICAgICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LAogICAgICAgICAgICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsCiAgICAgICAgICAgICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsCiAgICAgICAgICAgICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLAogICAgICAgICAgICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbiwKICAgICAgICAgICAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsCiAgICAgICAgICAgICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLAogICAgICAgICAgICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLAogICAgICAgICAgICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZQogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7CiAgICAgICAgICAgICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByb3V0ZXMucHVzaChyb3V0ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gcm91dGVzOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7CiAgICAgICAgICAgIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogQHByaXZhdGUKICAgICAgICAgICAqIFdhbGsgdGhlIHJvdXRlIHRyZWUgYW5kIGFkZCBoYXNFcnJvckJvdW5kYXJ5IGlmIGl0J3Mgbm90IHByb3ZpZGVkLCBzbyB0aGF0CiAgICAgICAgICAgKiB1c2VycyBwcm92aWRpbmcgbWFudWFsIHJvdXRlIGFycmF5cyBjYW4ganVzdCBzcGVjaWZ5IGVycm9yRWxlbWVudAogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpIHsKICAgICAgICAgICAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlKSA9PiB7CiAgICAgICAgICAgICAgdmFyIHJvdXRlQ2xvbmUgPSBkaXN0X2V4dGVuZHMoe30sIHJvdXRlKTsKCiAgICAgICAgICAgICAgaWYgKHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICByb3V0ZUNsb25lLmhhc0Vycm9yQm91bmRhcnkgPSByb3V0ZUNsb25lLmVycm9yRWxlbWVudCAhPSBudWxsOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKHJvdXRlQ2xvbmUuY2hpbGRyZW4pIHsKICAgICAgICAgICAgICAgIHJvdXRlQ2xvbmUuY2hpbGRyZW4gPSBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlQ2xvbmUuY2hpbGRyZW4pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIHJvdXRlQ2xvbmU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHsKICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7CiAgICAgICAgICAgICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsCiAgICAgICAgICAgICAgaGlzdG9yeTogY3JlYXRlTWVtb3J5SGlzdG9yeSh7CiAgICAgICAgICAgICAgICBpbml0aWFsRW50cmllczogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsRW50cmllcywKICAgICAgICAgICAgICAgIGluaXRpYWxJbmRleDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsSW5kZXgKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBoeWRyYXRpb25EYXRhOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEsCiAgICAgICAgICAgICAgcm91dGVzOiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcykKICAgICAgICAgICAgfSkuaW5pdGlhbGl6ZSgpOwogICAgICAgICAgfSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKCgogICAgICAgICAgOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMKICAgICAgICAgIC8qKgogICAgICAgICAgICogUmVhY3QgUm91dGVyIERPTSB2Ni43LjAKICAgICAgICAgICAqCiAgICAgICAgICAgKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICAgICAgICAgICAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBAbGljZW5zZSBNSVQKICAgICAgICAgICAqLwoKCgoKCiAgICAgICAgICBmdW5jdGlvbiByZWFjdF9yb3V0ZXJfZG9tX2Rpc3RfZXh0ZW5kcygpIHsKICAgICAgICAgICAgcmVhY3Rfcm91dGVyX2RvbV9kaXN0X2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgewogICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHJldHVybiByZWFjdF9yb3V0ZXJfZG9tX2Rpc3RfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsKICAgICAgICAgICAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307CiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB7fTsKICAgICAgICAgICAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOwogICAgICAgICAgICB2YXIga2V5LCBpOwoKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBrZXkgPSBzb3VyY2VLZXlzW2ldOwogICAgICAgICAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7CiAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRhcmdldDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgZGVmYXVsdE1ldGhvZCA9ICJnZXQiOwogICAgICAgICAgdmFyIGRlZmF1bHRFbmNUeXBlID0gImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCI7CiAgICAgICAgICBmdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkgewogICAgICAgICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSAic3RyaW5nIjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGlzQnV0dG9uRWxlbWVudChvYmplY3QpIHsKICAgICAgICAgICAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAiYnV0dG9uIjsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGlzRm9ybUVsZW1lbnQob2JqZWN0KSB7CiAgICAgICAgICAgIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gImZvcm0iOwogICAgICAgICAgfQogICAgICAgICAgZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7CiAgICAgICAgICAgIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gImlucHV0IjsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHNob3VsZFByb2Nlc3NMaW5rQ2xpY2soZXZlbnQsIHRhcmdldCkgewogICAgICAgICAgICByZXR1cm4gZXZlbnQuYnV0dG9uID09PSAwICYmICggLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzCiAgICAgICAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSAiX3NlbGYiKSAmJiAvLyBMZXQgYnJvd3NlciBoYW5kbGUgInRhcmdldD1fYmxhbmsiIGV0Yy4KICAgICAgICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gSWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXMKICAgICAgICAgICAgOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuCiAgICAgICAgICAgKgogICAgICAgICAgICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvCiAgICAgICAgICAgKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXIKICAgICAgICAgICAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZQogICAgICAgICAgICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLgogICAgICAgICAgICoKICAgICAgICAgICAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOgogICAgICAgICAgICoKICAgICAgICAgICAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoWwogICAgICAgICAgICogICAgIFsnc29ydCcsICduYW1lJ10sCiAgICAgICAgICAgKiAgICAgWydzb3J0JywgJ3ByaWNlJ10KICAgICAgICAgICAqICAgXSk7CiAgICAgICAgICAgKgogICAgICAgICAgICogeW91IGNhbiBkbzoKICAgICAgICAgICAqCiAgICAgICAgICAgKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoewogICAgICAgICAgICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddCiAgICAgICAgICAgKiAgIH0pOwogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHsKICAgICAgICAgICAgaWYgKGluaXQgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgIGluaXQgPSAiIjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09ICJzdHJpbmciIHx8IEFycmF5LmlzQXJyYXkoaW5pdCkgfHwgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/IGluaXQgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4gewogICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGluaXRba2V5XTsKICAgICAgICAgICAgICByZXR1cm4gbWVtby5jb25jYXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAoKHYpID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTsKICAgICAgICAgICAgfSwgW10pKTsKICAgICAgICAgIH0KICAgICAgICAgIGZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7CiAgICAgICAgICAgIHZhciBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO3ZhciBfaXRlcmF0b3IxMCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyMigKCiAgICAgICAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5rZXlzKCkpLF9zdGVwMTA7dHJ5IHt2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHt2YXIga2V5ID0gX3N0ZXAxMC52YWx1ZTsKICAgICAgICAgICAgICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRTZWFyY2hQYXJhbXMuZ2V0QWxsKGtleSkuZm9yRWFjaCgodmFsdWUpID0+IHsKICAgICAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9O2ZvciAoX2l0ZXJhdG9yMTAucygpOyAhKF9zdGVwMTAgPSBfaXRlcmF0b3IxMC5uKCkpLmRvbmU7KSB7X2xvb3AoKTt9fSBjYXRjaCAoZXJyKSB7X2l0ZXJhdG9yMTAuZShlcnIpO30gZmluYWxseSB7X2l0ZXJhdG9yMTAuZigpO30KCiAgICAgICAgICAgIHJldHVybiBzZWFyY2hQYXJhbXM7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBkZWZhdWx0QWN0aW9uLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBtZXRob2Q7CiAgICAgICAgICAgIHZhciBhY3Rpb247CiAgICAgICAgICAgIHZhciBlbmNUeXBlOwogICAgICAgICAgICB2YXIgZm9ybURhdGE7CgogICAgICAgICAgICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7CiAgICAgICAgICAgICAgdmFyIHN1Ym1pc3Npb25UcmlnZ2VyID0gb3B0aW9ucy5zdWJtaXNzaW9uVHJpZ2dlcjsKICAgICAgICAgICAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKCJtZXRob2QiKSB8fCBkZWZhdWx0TWV0aG9kOwogICAgICAgICAgICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoImFjdGlvbiIpIHx8IGRlZmF1bHRBY3Rpb247CiAgICAgICAgICAgICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKCJlbmN0eXBlIikgfHwgZGVmYXVsdEVuY1R5cGU7CiAgICAgICAgICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGFyZ2V0KTsKCiAgICAgICAgICAgICAgaWYgKHN1Ym1pc3Npb25UcmlnZ2VyICYmIHN1Ym1pc3Npb25UcmlnZ2VyLm5hbWUpIHsKICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXNzaW9uVHJpZ2dlci5uYW1lLCBzdWJtaXNzaW9uVHJpZ2dlci52YWx1ZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8IGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiYgKHRhcmdldC50eXBlID09PSAic3VibWl0IiB8fCB0YXJnZXQudHlwZSA9PT0gImltYWdlIikpIHsKICAgICAgICAgICAgICB2YXIgZm9ybSA9IHRhcmdldC5mb3JtOwoKICAgICAgICAgICAgICBpZiAoZm9ybSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkNhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiB3aXRob3V0IGEgPGZvcm0+Iik7CiAgICAgICAgICAgICAgfSAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT0ic3VibWl0Ij4gbWF5IG92ZXJyaWRlIGF0dHJpYnV0ZXMgb2YgPGZvcm0+CgoKICAgICAgICAgICAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKCJmb3JtbWV0aG9kIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoIm1ldGhvZCIpIHx8IGRlZmF1bHRNZXRob2Q7CiAgICAgICAgICAgICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZSgiZm9ybWFjdGlvbiIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKCJhY3Rpb24iKSB8fCBkZWZhdWx0QWN0aW9uOwogICAgICAgICAgICAgIGVuY1R5cGUgPSBvcHRpb25zLmVuY1R5cGUgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZSgiZm9ybWVuY3R5cGUiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZSgiZW5jdHlwZSIpIHx8IGRlZmF1bHRFbmNUeXBlOwogICAgICAgICAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pOyAvLyBJbmNsdWRlIG5hbWUgKyB2YWx1ZSBmcm9tIGEgPGJ1dHRvbj4sIGFwcGVuZGluZyBpbiBjYXNlIHRoZSBidXR0b24gbmFtZQogICAgICAgICAgICAgIC8vIG1hdGNoZXMgYW4gZXhpc3RpbmcgaW5wdXQgbmFtZQoKICAgICAgICAgICAgICBpZiAodGFyZ2V0Lm5hbWUpIHsKICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCh0YXJnZXQubmFtZSwgdGFyZ2V0LnZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNIdG1sRWxlbWVudCh0YXJnZXQpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgIiArICI8aW5wdXQgdHlwZT1cInN1Ym1pdHxpbWFnZVwiPiIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IGRlZmF1bHRNZXRob2Q7CiAgICAgICAgICAgICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgZGVmYXVsdEFjdGlvbjsKICAgICAgICAgICAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IGRlZmF1bHRFbmNUeXBlOwoKICAgICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRm9ybURhdGEpIHsKICAgICAgICAgICAgICAgIGZvcm1EYXRhID0gdGFyZ2V0OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwoKICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHt2YXIgX2l0ZXJhdG9yMTEgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcjIoCiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0KSxfc3RlcDExO3RyeSB7Zm9yIChfaXRlcmF0b3IxMS5zKCk7ICEoX3N0ZXAxMSA9IF9pdGVyYXRvcjExLm4oKSkuZG9uZTspIHt2YXIgX3N0ZXAxMSR2YWx1ZSA9IF9zbGljZWRUb0FycmF5Mihfc3RlcDExLnZhbHVlLCAyKSxuYW1lID0gX3N0ZXAxMSR2YWx1ZVswXSx2YWx1ZSA9IF9zdGVwMTEkdmFsdWVbMV07CiAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpOwogICAgICAgICAgICAgICAgICAgIH19IGNhdGNoIChlcnIpIHtfaXRlcmF0b3IxMS5lKGVycik7fSBmaW5hbGx5IHtfaXRlcmF0b3IxMS5mKCk7fQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpOyBfaTMgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaTMrKykge3ZhciBfbmFtZSA9IF9PYmplY3Qka2V5c1tfaTNdOwogICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChfbmFtZSwgdGFyZ2V0W19uYW1lXSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBfd2luZG93JGxvY2F0aW9uMiA9CgoKICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24scHJvdG9jb2wgPSBfd2luZG93JGxvY2F0aW9uMi5wcm90b2NvbCxob3N0ID0gX3dpbmRvdyRsb2NhdGlvbjIuaG9zdDsKICAgICAgICAgICAgdmFyIHVybCA9IG5ldyBVUkwoYWN0aW9uLCBwcm90b2NvbCArICIvLyIgKyBob3N0KTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZC50b0xvd2VyQ2FzZSgpLAogICAgICAgICAgICAgIGVuY1R5cGU6IGVuY1R5cGUsCiAgICAgICAgICAgICAgZm9ybURhdGE6IGZvcm1EYXRhCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIF9leGNsdWRlZCA9IFsib25DbGljayIsICJyZWxhdGl2ZSIsICJyZWxvYWREb2N1bWVudCIsICJyZXBsYWNlIiwgInN0YXRlIiwgInRhcmdldCIsICJ0byIsICJwcmV2ZW50U2Nyb2xsUmVzZXQiXSwKICAgICAgICAgICAgX2V4Y2x1ZGVkMiA9IFsiYXJpYS1jdXJyZW50IiwgImNhc2VTZW5zaXRpdmUiLCAiY2xhc3NOYW1lIiwgImVuZCIsICJzdHlsZSIsICJ0byIsICJjaGlsZHJlbiJdLAogICAgICAgICAgICBfZXhjbHVkZWQzID0gLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqL251bGwgJiYgWyJyZWxvYWREb2N1bWVudCIsICJyZXBsYWNlIiwgIm1ldGhvZCIsICJhY3Rpb24iLCAib25TdWJtaXQiLCAiZmV0Y2hlcktleSIsICJyb3V0ZUlkIiwgInJlbGF0aXZlIiwgInByZXZlbnRTY3JvbGxSZXNldCJdOwogICAgICAgICAgLy8jcmVnaW9uIFJvdXRlcnMKICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQnJvd3NlclJvdXRlcihyb3V0ZXMsIG9wdHMpIHsKICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7CiAgICAgICAgICAgICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsCiAgICAgICAgICAgICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3RvcnkoewogICAgICAgICAgICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvdwogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLAogICAgICAgICAgICAgIHJvdXRlczogVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVzKQogICAgICAgICAgICB9KS5pbml0aWFsaXplKCk7CiAgICAgICAgICB9CiAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVIYXNoUm91dGVyKHJvdXRlcywgb3B0cykgewogICAgICAgICAgICByZXR1cm4gY3JlYXRlUm91dGVyKHsKICAgICAgICAgICAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSwKICAgICAgICAgICAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7CiAgICAgICAgICAgICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksCiAgICAgICAgICAgICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpCiAgICAgICAgICAgIH0pLmluaXRpYWxpemUoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7CiAgICAgICAgICAgIHZhciBfd2luZG93OwoKICAgICAgICAgICAgdmFyIHN0YXRlID0gKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93Ll9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YTsKCiAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHsKICAgICAgICAgICAgICBzdGF0ZSA9IHJlYWN0X3JvdXRlcl9kb21fZGlzdF9leHRlbmRzKHt9LCBzdGF0ZSwgewogICAgICAgICAgICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBmdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9ycyhlcnJvcnMpIHsKICAgICAgICAgICAgaWYgKCFlcnJvcnMpIHJldHVybiBudWxsOwogICAgICAgICAgICB2YXIgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVycm9ycyk7CiAgICAgICAgICAgIHZhciBzZXJpYWxpemVkID0ge307CgogICAgICAgICAgICBmb3IgKHZhciBfaTQgPSAwLCBfZW50cmllcyA9IGVudHJpZXM7IF9pNCA8IF9lbnRyaWVzLmxlbmd0aDsgX2k0KyspIHt2YXIgX2VudHJpZXMkX2kgPSBfc2xpY2VkVG9BcnJheTIoX2VudHJpZXNbX2k0XSwgMiksa2V5ID0gX2VudHJpZXMkX2lbMF0sdmFsID0gX2VudHJpZXMkX2lbMV07CiAgICAgICAgICAgICAgLy8gSGV5IHlvdSEgIElmIHlvdSBjaGFuZ2UgdGhpcywgcGxlYXNlIGNoYW5nZSB0aGUgY29ycmVzcG9uZGluZyBsb2dpYyBpbgogICAgICAgICAgICAgIC8vIHNlcmlhbGl6ZUVycm9ycyBpbiByZWFjdC1yb3V0ZXItZG9tL3NlcnZlci50c3ggOikKICAgICAgICAgICAgICBpZiAodmFsICYmIHZhbC5fX3R5cGUgPT09ICJSb3V0ZUVycm9yUmVzcG9uc2UiKSB7CiAgICAgICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgRXJyb3JSZXNwb25zZSh2YWwuc3RhdHVzLCB2YWwuc3RhdHVzVGV4dCwgdmFsLmRhdGEsIHZhbC5pbnRlcm5hbCA9PT0gdHJ1ZSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gIkVycm9yIikgewogICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKHZhbC5tZXNzYWdlKTsgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoCiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zCgogICAgICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSAiIjsKICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzZXJpYWxpemVkW2tleV0gPSB2YWw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplZDsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy4KICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWYpIHsKICAgICAgICAgICAgdmFyCiAgICAgICAgICAgICAgYmFzZW5hbWUgPQoKCiAgICAgICAgICAgICAgX3JlZi5iYXNlbmFtZSxjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sd2luZG93ID0gX3JlZi53aW5kb3c7CiAgICAgICAgICAgIHZhciBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7CgogICAgICAgICAgICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHsKICAgICAgICAgICAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7CiAgICAgICAgICAgICAgICB3aW5kb3c6IHdpbmRvdywKICAgICAgICAgICAgICAgIHY1Q29tcGF0OiB0cnVlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50OwogICAgICAgICAgICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKHsKICAgICAgICAgICAgICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sCiAgICAgICAgICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbgogICAgICAgICAgICAgIH0pLF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheTIoX1JlYWN0JHVzZVN0YXRlMywgMiksc3RhdGUgPSBfUmVhY3QkdXNlU3RhdGU0WzBdLHNldFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlNFsxXTsKICAgICAgICAgICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTsKICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgewogICAgICAgICAgICAgIGJhc2VuYW1lOiBiYXNlbmFtZSwKICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sCiAgICAgICAgICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLAogICAgICAgICAgICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sCiAgICAgICAgICAgICAgbmF2aWdhdG9yOiBoaXN0b3J5CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2gKICAgICAgICAgICAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmMikgewogICAgICAgICAgICB2YXIKICAgICAgICAgICAgICBiYXNlbmFtZSA9CgoKICAgICAgICAgICAgICBfcmVmMi5iYXNlbmFtZSxjaGlsZHJlbiA9IF9yZWYyLmNoaWxkcmVuLHdpbmRvdyA9IF9yZWYyLndpbmRvdzsKICAgICAgICAgICAgdmFyIGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTsKCiAgICAgICAgICAgIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkgewogICAgICAgICAgICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHsKICAgICAgICAgICAgICAgIHdpbmRvdzogd2luZG93LAogICAgICAgICAgICAgICAgdjVDb21wYXQ6IHRydWUKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7CiAgICAgICAgICAgIHZhciBfUmVhY3QkdXNlU3RhdGU1ID0gUmVhY3QudXNlU3RhdGUoewogICAgICAgICAgICAgICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbiwKICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uCiAgICAgICAgICAgICAgfSksX1JlYWN0JHVzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5MihfUmVhY3QkdXNlU3RhdGU1LCAyKSxzdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTZbMF0sc2V0U3RhdGUgPSBfUmVhY3QkdXNlU3RhdGU2WzFdOwogICAgICAgICAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pOwogICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7CiAgICAgICAgICAgICAgYmFzZW5hbWU6IGJhc2VuYW1lLAogICAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbiwKICAgICAgICAgICAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sCiAgICAgICAgICAgICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbiwKICAgICAgICAgICAgICBuYXZpZ2F0b3I6IGhpc3RvcnkKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIEEgYDxSb3V0ZXI+YCB0aGF0IGFjY2VwdHMgYSBwcmUtaW5zdGFudGlhdGVkIGhpc3Rvcnkgb2JqZWN0LiBJdCdzIGltcG9ydGFudAogICAgICAgICAgICogdG8gbm90ZSB0aGF0IHVzaW5nIHlvdXIgb3duIGhpc3Rvcnkgb2JqZWN0IGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBhbmQgbWF5IGFkZAogICAgICAgICAgICogdHdvIHZlcnNpb25zIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdG8geW91ciBidW5kbGVzIHVubGVzcyB5b3UgdXNlIHRoZSBzYW1lCiAgICAgICAgICAgKiB2ZXJzaW9uIG9mIHRoZSBoaXN0b3J5IGxpYnJhcnkgdGhhdCBSZWFjdCBSb3V0ZXIgdXNlcyBpbnRlcm5hbGx5LgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykgewogICAgICAgICAgICB2YXIKICAgICAgICAgICAgICBiYXNlbmFtZSA9CgoKICAgICAgICAgICAgICBfcmVmMy5iYXNlbmFtZSxjaGlsZHJlbiA9IF9yZWYzLmNoaWxkcmVuLGhpc3RvcnkgPSBfcmVmMy5oaXN0b3J5OwogICAgICAgICAgICB2YXIgX1JlYWN0JHVzZVN0YXRlNyA9IFJlYWN0LnVzZVN0YXRlKHsKICAgICAgICAgICAgICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sCiAgICAgICAgICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbgogICAgICAgICAgICAgIH0pLF9SZWFjdCR1c2VTdGF0ZTggPSBfc2xpY2VkVG9BcnJheTIoX1JlYWN0JHVzZVN0YXRlNywgMiksc3RhdGUgPSBfUmVhY3QkdXNlU3RhdGU4WzBdLHNldFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlOFsxXTsKICAgICAgICAgICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTsKICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgewogICAgICAgICAgICAgIGJhc2VuYW1lOiBiYXNlbmFtZSwKICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sCiAgICAgICAgICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLAogICAgICAgICAgICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sCiAgICAgICAgICAgICAgbmF2aWdhdG9yOiBoaXN0b3J5CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChmYWxzZSkge30KICAgICAgICAgIC8qKgogICAgICAgICAgICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LgogICAgICAgICAgICovCgogICAgICAgICAgdmFyIExpbmsgPSAvKiNfX1BVUkVfXyovcmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5rV2l0aFJlZihfcmVmNCwgcmVmKSB7CiAgICAgICAgICAgIHZhcgogICAgICAgICAgICAgIG9uQ2xpY2sgPQoKCgoKCgoKICAgICAgICAgICAgICBfcmVmNC5vbkNsaWNrLHJlbGF0aXZlID0gX3JlZjQucmVsYXRpdmUscmVsb2FkRG9jdW1lbnQgPSBfcmVmNC5yZWxvYWREb2N1bWVudCxyZXBsYWNlID0gX3JlZjQucmVwbGFjZSxzdGF0ZSA9IF9yZWY0LnN0YXRlLHRhcmdldCA9IF9yZWY0LnRhcmdldCx0byA9IF9yZWY0LnRvLHByZXZlbnRTY3JvbGxSZXNldCA9IF9yZWY0LnByZXZlbnRTY3JvbGxSZXNldCwKICAgICAgICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjQsIF9leGNsdWRlZCk7CgogICAgICAgICAgICB2YXIgaHJlZiA9IHVzZUhyZWYodG8sIHsKICAgICAgICAgICAgICByZWxhdGl2ZTogcmVsYXRpdmUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7CiAgICAgICAgICAgICAgcmVwbGFjZTogcmVwbGFjZSwKICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsCiAgICAgICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwcmV2ZW50U2Nyb2xsUmVzZXQsCiAgICAgICAgICAgICAgcmVsYXRpdmU6IHJlbGF0aXZlCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHsKICAgICAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7CgogICAgICAgICAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgewogICAgICAgICAgICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAoCiAgICAgICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnQKICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJhIiwgcmVhY3Rfcm91dGVyX2RvbV9kaXN0X2V4dGVuZHMoe30sIHJlc3QsIHsKICAgICAgICAgICAgICAgIGhyZWY6IGhyZWYsCiAgICAgICAgICAgICAgICBvbkNsaWNrOiByZWxvYWREb2N1bWVudCA/IG9uQ2xpY2sgOiBoYW5kbGVDbGljaywKICAgICAgICAgICAgICAgIHJlZjogcmVmLAogICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQKICAgICAgICAgICAgICB9KSkpOwoKICAgICAgICAgIH0pOwoKICAgICAgICAgIGlmIChmYWxzZSkge30KICAgICAgICAgIC8qKgogICAgICAgICAgICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgImFjdGl2ZSIgb3Igbm90LgogICAgICAgICAgICovCgoKICAgICAgICAgIHZhciBOYXZMaW5rID0gLyojX19QVVJFX18qL3JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjUsIHJlZikgewogICAgICAgICAgICB2YXIgX3JlZjUkYXJpYUN1cnJlbnQgPQoKCgoKCgoKICAgICAgICAgICAgICBfcmVmNVsiYXJpYS1jdXJyZW50Il0sYXJpYUN1cnJlbnRQcm9wID0gX3JlZjUkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/ICJwYWdlIiA6IF9yZWY1JGFyaWFDdXJyZW50LF9yZWY1JGNhc2VTZW5zaXRpdmUgPSBfcmVmNS5jYXNlU2Vuc2l0aXZlLGNhc2VTZW5zaXRpdmUgPSBfcmVmNSRjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY1JGNhc2VTZW5zaXRpdmUsX3JlZjUkY2xhc3NOYW1lID0gX3JlZjUuY2xhc3NOYW1lLGNsYXNzTmFtZVByb3AgPSBfcmVmNSRjbGFzc05hbWUgPT09IHZvaWQgMCA/ICIiIDogX3JlZjUkY2xhc3NOYW1lLF9yZWY1JGVuZCA9IF9yZWY1LmVuZCxlbmQgPSBfcmVmNSRlbmQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjUkZW5kLHN0eWxlUHJvcCA9IF9yZWY1LnN0eWxlLHRvID0gX3JlZjUudG8sY2hpbGRyZW4gPSBfcmVmNS5jaGlsZHJlbiwKICAgICAgICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjUsIF9leGNsdWRlZDIpOwoKICAgICAgICAgICAgdmFyIHBhdGggPSBkaXN0X3VzZVJlc29sdmVkUGF0aCh0bywgewogICAgICAgICAgICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBkaXN0X3VzZUxvY2F0aW9uKCk7CiAgICAgICAgICAgIHZhciByb3V0ZXJTdGF0ZSA9IHJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7CiAgICAgICAgICAgIHZhciBfcmVhY3QkdXNlQ29udGV4dDcgPQoKICAgICAgICAgICAgICByZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KSxuYXZpZ2F0b3IgPSBfcmVhY3QkdXNlQ29udGV4dDcubmF2aWdhdG9yOwogICAgICAgICAgICB2YXIgdG9QYXRobmFtZSA9IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihwYXRoKS5wYXRobmFtZSA6IHBhdGgucGF0aG5hbWU7CiAgICAgICAgICAgIHZhciBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7CiAgICAgICAgICAgIHZhciBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWUgOiBudWxsOwoKICAgICAgICAgICAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7CiAgICAgICAgICAgICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7CiAgICAgICAgICAgICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdCh0b1BhdGhuYW1lLmxlbmd0aCkgPT09ICIvIjsKICAgICAgICAgICAgdmFyIGlzUGVuZGluZyA9IG5leHRMb2NhdGlvblBhdGhuYW1lICE9IG51bGwgJiYgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSAiLyIpOwogICAgICAgICAgICB2YXIgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgdmFyIGNsYXNzTmFtZTsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVByb3AoewogICAgICAgICAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLAogICAgICAgICAgICAgICAgaXNQZW5kaW5nOiBpc1BlbmRpbmcKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWAKICAgICAgICAgICAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0CiAgICAgICAgICAgICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGwKICAgICAgICAgICAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZQogICAgICAgICAgICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uCiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gImFjdGl2ZSIgOiBudWxsLCBpc1BlbmRpbmcgPyAicGVuZGluZyIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbigiICIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSAiZnVuY3Rpb24iID8gc3R5bGVQcm9wKHsKICAgICAgICAgICAgICBpc0FjdGl2ZTogaXNBY3RpdmUsCiAgICAgICAgICAgICAgaXNQZW5kaW5nOiBpc1BlbmRpbmcKICAgICAgICAgICAgfSkgOiBzdHlsZVByb3A7CiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCByZWFjdF9yb3V0ZXJfZG9tX2Rpc3RfZXh0ZW5kcyh7fSwgcmVzdCwgewogICAgICAgICAgICAgICJhcmlhLWN1cnJlbnQiOiBhcmlhQ3VycmVudCwKICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSwKICAgICAgICAgICAgICByZWY6IHJlZiwKICAgICAgICAgICAgICBzdHlsZTogc3R5bGUsCiAgICAgICAgICAgICAgdG86IHRvCiAgICAgICAgICAgIH0pLCB0eXBlb2YgY2hpbGRyZW4gPT09ICJmdW5jdGlvbiIgPyBjaGlsZHJlbih7CiAgICAgICAgICAgICAgaXNBY3RpdmU6IGlzQWN0aXZlLAogICAgICAgICAgICAgIGlzUGVuZGluZzogaXNQZW5kaW5nCiAgICAgICAgICAgIH0pIDogY2hpbGRyZW4pOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGZhbHNlKSB7fQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBBIGBAcmVtaXgtcnVuL3JvdXRlcmAtYXdhcmUgYDxmb3JtPmAuIEl0IGJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBmb3JtIGV4Y2VwdAogICAgICAgICAgICogdGhhdCB0aGUgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VydmVyIGlzIHdpdGggYGZldGNoYCBpbnN0ZWFkIG9mIG5ldyBkb2N1bWVudAogICAgICAgICAgICogcmVxdWVzdHMsIGFsbG93aW5nIGNvbXBvbmVudHMgdG8gYWRkIG5pY2VyIFVYIHRvIHRoZSBwYWdlIGFzIHRoZSBmb3JtIGlzCiAgICAgICAgICAgKiBzdWJtaXR0ZWQgYW5kIHJldHVybnMgd2l0aCBkYXRhLgogICAgICAgICAgICovCgoKICAgICAgICAgIHZhciBGb3JtID0gLyojX19QVVJFX18qLyAvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovbnVsbCAmJiBSZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7CiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgcmVhY3Rfcm91dGVyX2RvbV9kaXN0X2V4dGVuZHMoe30sIHByb3BzLCB7CiAgICAgICAgICAgICAgcmVmOiByZWYKICAgICAgICAgICAgfSkpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKGZhbHNlKSB7fQoKICAgICAgICAgIHZhciBGb3JtSW1wbCA9IC8qI19fUFVSRV9fKi8gLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqL251bGwgJiYgUmVhY3QuZm9yd2FyZFJlZigoX3JlZjYsIGZvcndhcmRlZFJlZikgPT4gewogICAgICAgICAgICB2YXIKICAgICAgICAgICAgICByZWxvYWREb2N1bWVudCA9CgoKCgoKCgoKICAgICAgICAgICAgICBfcmVmNi5yZWxvYWREb2N1bWVudCxyZXBsYWNlID0gX3JlZjYucmVwbGFjZSxfcmVmNiRtZXRob2QgPSBfcmVmNi5tZXRob2QsbWV0aG9kID0gX3JlZjYkbWV0aG9kID09PSB2b2lkIDAgPyBkZWZhdWx0TWV0aG9kIDogX3JlZjYkbWV0aG9kLGFjdGlvbiA9IF9yZWY2LmFjdGlvbixvblN1Ym1pdCA9IF9yZWY2Lm9uU3VibWl0LGZldGNoZXJLZXkgPSBfcmVmNi5mZXRjaGVyS2V5LHJvdXRlSWQgPSBfcmVmNi5yb3V0ZUlkLHJlbGF0aXZlID0gX3JlZjYucmVsYXRpdmUscHJldmVudFNjcm9sbFJlc2V0ID0gX3JlZjYucHJldmVudFNjcm9sbFJlc2V0LAogICAgICAgICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjYsIF9leGNsdWRlZDMpOwoKICAgICAgICAgICAgdmFyIHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7CiAgICAgICAgICAgIHZhciBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09ICJnZXQiID8gImdldCIgOiAicG9zdCI7CiAgICAgICAgICAgIHZhciBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHsKICAgICAgICAgICAgICByZWxhdGl2ZTogcmVsYXRpdmUKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgc3VibWl0SGFuZGxlciA9IChldmVudCkgPT4gewogICAgICAgICAgICAgIG9uU3VibWl0ICYmIG9uU3VibWl0KGV2ZW50KTsKICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuOwogICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgdmFyIHN1Ym1pdHRlciA9IGV2ZW50Lm5hdGl2ZUV2ZW50LnN1Ym1pdHRlcjsKICAgICAgICAgICAgICB2YXIgc3VibWl0TWV0aG9kID0gKHN1Ym1pdHRlciA9PSBudWxsID8gdm9pZCAwIDogc3VibWl0dGVyLmdldEF0dHJpYnV0ZSgiZm9ybW1ldGhvZCIpKSB8fCBtZXRob2Q7CiAgICAgICAgICAgICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7CiAgICAgICAgICAgICAgICBtZXRob2Q6IHN1Ym1pdE1ldGhvZCwKICAgICAgICAgICAgICAgIHJlcGxhY2U6IHJlcGxhY2UsCiAgICAgICAgICAgICAgICByZWxhdGl2ZTogcmVsYXRpdmUsCiAgICAgICAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHByZXZlbnRTY3JvbGxSZXNldAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KCJmb3JtIiwgcmVhY3Rfcm91dGVyX2RvbV9kaXN0X2V4dGVuZHMoewogICAgICAgICAgICAgIHJlZjogZm9yd2FyZGVkUmVmLAogICAgICAgICAgICAgIG1ldGhvZDogZm9ybU1ldGhvZCwKICAgICAgICAgICAgICBhY3Rpb246IGZvcm1BY3Rpb24sCiAgICAgICAgICAgICAgb25TdWJtaXQ6IHJlbG9hZERvY3VtZW50ID8gb25TdWJtaXQgOiBzdWJtaXRIYW5kbGVyCiAgICAgICAgICAgIH0sIHByb3BzKSk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBpZiAoZmFsc2UpIHt9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFRoaXMgY29tcG9uZW50IHdpbGwgZW11bGF0ZSB0aGUgYnJvd3NlcidzIHNjcm9sbCByZXN0b3JhdGlvbiBvbiBsb2NhdGlvbgogICAgICAgICAgICogY2hhbmdlcy4KICAgICAgICAgICAqLwoKCiAgICAgICAgICBmdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbihfcmVmNykgewogICAgICAgICAgICB2YXIKICAgICAgICAgICAgICBnZXRLZXkgPQoKICAgICAgICAgICAgICBfcmVmNy5nZXRLZXksc3RvcmFnZUtleSA9IF9yZWY3LnN0b3JhZ2VLZXk7CiAgICAgICAgICAgIHVzZVNjcm9sbFJlc3RvcmF0aW9uKHsKICAgICAgICAgICAgICBnZXRLZXk6IGdldEtleSwKICAgICAgICAgICAgICBzdG9yYWdlS2V5OiBzdG9yYWdlS2V5CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZmFsc2UpIHt9IC8vI2VuZHJlZ2lvbgogICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgICAgICAgIC8vI3JlZ2lvbiBIb29rcwogICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgogICAgICAgICAgdmFyIGRpc3RfRGF0YVJvdXRlckhvb2s7CgogICAgICAgICAgKGZ1bmN0aW9uIChEYXRhUm91dGVySG9vaykgewogICAgICAgICAgICBEYXRhUm91dGVySG9va1siVXNlU2Nyb2xsUmVzdG9yYXRpb24iXSA9ICJ1c2VTY3JvbGxSZXN0b3JhdGlvbiI7CiAgICAgICAgICAgIERhdGFSb3V0ZXJIb29rWyJVc2VTdWJtaXRJbXBsIl0gPSAidXNlU3VibWl0SW1wbCI7CiAgICAgICAgICAgIERhdGFSb3V0ZXJIb29rWyJVc2VGZXRjaGVyIl0gPSAidXNlRmV0Y2hlciI7CiAgICAgICAgICB9KShkaXN0X0RhdGFSb3V0ZXJIb29rIHx8IChkaXN0X0RhdGFSb3V0ZXJIb29rID0ge30pKTsKCiAgICAgICAgICB2YXIgZGlzdF9EYXRhUm91dGVyU3RhdGVIb29rOwoKICAgICAgICAgIChmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykgewogICAgICAgICAgICBEYXRhUm91dGVyU3RhdGVIb29rWyJVc2VGZXRjaGVycyJdID0gInVzZUZldGNoZXJzIjsKICAgICAgICAgICAgRGF0YVJvdXRlclN0YXRlSG9va1siVXNlU2Nyb2xsUmVzdG9yYXRpb24iXSA9ICJ1c2VTY3JvbGxSZXN0b3JhdGlvbiI7CiAgICAgICAgICB9KShkaXN0X0RhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKGRpc3RfRGF0YVJvdXRlclN0YXRlSG9vayA9IHt9KSk7CgogICAgICAgICAgZnVuY3Rpb24gZGlzdF9nZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBob29rTmFtZSArICIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci4iOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGRpc3RfdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHsKICAgICAgICAgICAgdmFyIGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0KTsKICAgICAgICAgICAgIWN0eCA/IGZhbHNlID8gMCA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgIHJldHVybiBjdHg7CiAgICAgICAgICB9CgogICAgICAgICAgZnVuY3Rpb24gZGlzdF91c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHsKICAgICAgICAgICAgdmFyIHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7CiAgICAgICAgICAgICFzdGF0ZSA/IGZhbHNlID8gMCA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgIHJldHVybiBzdGF0ZTsKICAgICAgICAgIH0KICAgICAgICAgIC8qKgogICAgICAgICAgICogSGFuZGxlcyB0aGUgY2xpY2sgYmVoYXZpb3IgZm9yIHJvdXRlciBgPExpbms+YCBjb21wb25lbnRzLiBUaGlzIGlzIHVzZWZ1bCBpZgogICAgICAgICAgICogeW91IG5lZWQgdG8gY3JlYXRlIGN1c3RvbSBgPExpbms+YCBjb21wb25lbnRzIHdpdGggdGhlIHNhbWUgY2xpY2sgYmVoYXZpb3Igd2UKICAgICAgICAgICAqIHVzZSBpbiBvdXIgZXhwb3J0ZWQgYDxMaW5rPmAuCiAgICAgICAgICAgKi8KCgogICAgICAgICAgZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHsKICAgICAgICAgICAgdmFyIF9yZWYzMiA9CgoKCgoKICAgICAgICAgICAgICBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCx0YXJnZXQgPSBfcmVmMzIudGFyZ2V0LHJlcGxhY2VQcm9wID0gX3JlZjMyLnJlcGxhY2Usc3RhdGUgPSBfcmVmMzIuc3RhdGUscHJldmVudFNjcm9sbFJlc2V0ID0gX3JlZjMyLnByZXZlbnRTY3JvbGxSZXNldCxyZWxhdGl2ZSA9IF9yZWYzMi5yZWxhdGl2ZTsKICAgICAgICAgICAgdmFyIG5hdmlnYXRlID0gZGlzdF91c2VOYXZpZ2F0ZSgpOwogICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBkaXN0X3VzZUxvY2F0aW9uKCk7CiAgICAgICAgICAgIHZhciBwYXRoID0gZGlzdF91c2VSZXNvbHZlZFBhdGgodG8sIHsKICAgICAgICAgICAgICByZWxhdGl2ZTogcmVsYXRpdmUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiByZWFjdC51c2VDYWxsYmFjaygoZXZlbnQpID0+IHsKICAgICAgICAgICAgICBpZiAoc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSkgewogICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mCiAgICAgICAgICAgICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUgdW5sZXNzIHRoZSByZXBsYWNlIHByb3AgaXMgZXhwbGljaXRseSBzZXQKCiAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZSA9IHJlcGxhY2VQcm9wICE9PSB1bmRlZmluZWQgPyByZXBsYWNlUHJvcCA6IHJvdXRlcl9jcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gcm91dGVyX2NyZWF0ZVBhdGgocGF0aCk7CiAgICAgICAgICAgICAgICBuYXZpZ2F0ZSh0bywgewogICAgICAgICAgICAgICAgICByZXBsYWNlOiByZXBsYWNlLAogICAgICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsCiAgICAgICAgICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcHJldmVudFNjcm9sbFJlc2V0LAogICAgICAgICAgICAgICAgICByZWxhdGl2ZTogcmVsYXRpdmUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlXSk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGUKICAgICAgICAgICAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHsKICAgICAgICAgICAgZmFsc2UgPyAwIDogdm9pZCAwOwogICAgICAgICAgICB2YXIgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiA9IFJlYWN0LnVzZVJlZihjcmVhdGVTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpKTsKICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTsKICAgICAgICAgICAgdmFyIHNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7CiAgICAgICAgICAgIHZhciBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7CiAgICAgICAgICAgIHZhciBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4gewogICAgICAgICAgICAgIHZhciBuZXdTZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXModHlwZW9mIG5leHRJbml0ID09PSAiZnVuY3Rpb24iID8gbmV4dEluaXQoc2VhcmNoUGFyYW1zKSA6IG5leHRJbml0KTsKICAgICAgICAgICAgICBuYXZpZ2F0ZSgiPyIgKyBuZXdTZWFyY2hQYXJhbXMsIG5hdmlnYXRlT3B0aW9ucyk7CiAgICAgICAgICAgIH0sIFtuYXZpZ2F0ZSwgc2VhcmNoUGFyYW1zXSk7CiAgICAgICAgICAgIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdOwogICAgICAgICAgfQogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBtYXkgYmUgdXNlZCB0byBwcm9ncmFtbWF0aWNhbGx5IHN1Ym1pdCBhIGZvcm0gKG9yCiAgICAgICAgICAgKiBzb21lIGFyYml0cmFyeSBkYXRhKSB0byB0aGUgc2VydmVyLgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gdXNlU3VibWl0KCkgewogICAgICAgICAgICByZXR1cm4gdXNlU3VibWl0SW1wbCgpOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCkgewogICAgICAgICAgICB2YXIgX2Rpc3RfdXNlRGF0YVJvdXRlckNvID0KCiAgICAgICAgICAgICAgZGlzdF91c2VEYXRhUm91dGVyQ29udGV4dChkaXN0X0RhdGFSb3V0ZXJIb29rLlVzZVN1Ym1pdEltcGwpLHJvdXRlciA9IF9kaXN0X3VzZURhdGFSb3V0ZXJDby5yb3V0ZXI7CiAgICAgICAgICAgIHZhciBkZWZhdWx0QWN0aW9uID0gdXNlRm9ybUFjdGlvbigpOwogICAgICAgICAgICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykgewogICAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIllvdSBhcmUgY2FsbGluZyBzdWJtaXQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLiAiICsgIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLiIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIF9nZXRGb3JtU3VibWlzc2lvbkluZiA9CgoKCgogICAgICAgICAgICAgICAgZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgZGVmYXVsdEFjdGlvbiwgb3B0aW9ucyksbWV0aG9kID0gX2dldEZvcm1TdWJtaXNzaW9uSW5mLm1ldGhvZCxlbmNUeXBlID0gX2dldEZvcm1TdWJtaXNzaW9uSW5mLmVuY1R5cGUsZm9ybURhdGEgPSBfZ2V0Rm9ybVN1Ym1pc3Npb25JbmYuZm9ybURhdGEsdXJsID0gX2dldEZvcm1TdWJtaXNzaW9uSW5mLnVybDsKICAgICAgICAgICAgICB2YXIgaHJlZiA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7CiAgICAgICAgICAgICAgdmFyIG9wdHMgPSB7CiAgICAgICAgICAgICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsCiAgICAgICAgICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdGlvbnMucHJldmVudFNjcm9sbFJlc2V0LAogICAgICAgICAgICAgICAgZm9ybURhdGE6IGZvcm1EYXRhLAogICAgICAgICAgICAgICAgZm9ybU1ldGhvZDogbWV0aG9kLAogICAgICAgICAgICAgICAgZm9ybUVuY1R5cGU6IGVuY1R5cGUKICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICBpZiAoZmV0Y2hlcktleSkgewogICAgICAgICAgICAgICAgIShyb3V0ZUlkICE9IG51bGwpID8gZmFsc2UgPyAwIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsKICAgICAgICAgICAgICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcm91dGVyLm5hdmlnYXRlKGhyZWYsIG9wdHMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgW2RlZmF1bHRBY3Rpb24sIHJvdXRlciwgZmV0Y2hlcktleSwgcm91dGVJZF0pOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oYWN0aW9uLCBfdGVtcDIpIHsKICAgICAgICAgICAgdmFyIF9yZWYzMyA9CgogICAgICAgICAgICAgIF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDIscmVsYXRpdmUgPSBfcmVmMzMucmVsYXRpdmU7CiAgICAgICAgICAgIHZhciBfUmVhY3QkdXNlQ29udGV4dDIgPQoKICAgICAgICAgICAgICBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCksYmFzZW5hbWUgPSBfUmVhY3QkdXNlQ29udGV4dDIuYmFzZW5hbWU7CiAgICAgICAgICAgIHZhciByb3V0ZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpOwogICAgICAgICAgICAhcm91dGVDb250ZXh0ID8gZmFsc2UgPyAwIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsKICAgICAgICAgICAgdmFyIF9yb3V0ZUNvbnRleHQkbWF0Y2hlcyA9IHJvdXRlQ29udGV4dC5tYXRjaGVzLnNsaWNlKC0xKSxfcm91dGVDb250ZXh0JG1hdGNoZXMyID0gX3NsaWNlZFRvQXJyYXkyKF9yb3V0ZUNvbnRleHQkbWF0Y2hlcywgMSksbWF0Y2ggPSBfcm91dGVDb250ZXh0JG1hdGNoZXMyWzBdOyAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGUKICAgICAgICAgICAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoCgogICAgICAgICAgICB2YXIgcGF0aCA9IHJlYWN0X3JvdXRlcl9kb21fZGlzdF9leHRlbmRzKHt9LCB1c2VSZXNvbHZlZFBhdGgoYWN0aW9uID8gYWN0aW9uIDogIi4iLCB7CiAgICAgICAgICAgICAgcmVsYXRpdmU6IHJlbGF0aXZlCiAgICAgICAgICAgIH0pKTsgLy8gUHJldmlvdXNseSB3ZSBzZXQgdGhlIGRlZmF1bHQgYWN0aW9uIHRvICIuIi4gVGhlIHByb2JsZW0gd2l0aCB0aGlzIGlzIHRoYXQKICAgICAgICAgICAgLy8gYHVzZVJlc29sdmVkUGF0aCgiLiIpYCBleGNsdWRlcyBzZWFyY2ggcGFyYW1zIGFuZCB0aGUgaGFzaCBvZiB0aGUgcmVzb2x2ZWQKICAgICAgICAgICAgLy8gVVJMLiBUaGlzIGlzIHRoZSBpbnRlbmRlZCBiZWhhdmlvciBvZiB3aGVuICIuIiBpcyBzcGVjaWZpY2FsbHkgcHJvdmlkZWQgYXMKICAgICAgICAgICAgLy8gdGhlIGZvcm0gYWN0aW9uLCBidXQgaW5jb25zaXN0ZW50IHcvIGJyb3dzZXJzIHdoZW4gdGhlIGFjdGlvbiBpcyBvbWl0dGVkLgogICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjcKCgogICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpOwoKICAgICAgICAgICAgaWYgKGFjdGlvbiA9PSBudWxsKSB7CiAgICAgICAgICAgICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGVzZSBkaXJlY3RseSBoZXJlIHNpbmNlIGlmIGFjdGlvbiB3YXMgdW5kZWZpbmVkLCB3ZQogICAgICAgICAgICAgIC8vIHdvdWxkIGhhdmUgY2FsbGVkIHVzZVJlc29sdmVkUGF0aCgiLiIpIHdoaWNoIHdpbGwgbmV2ZXIgaW5jbHVkZSBhIHNlYXJjaAogICAgICAgICAgICAgIC8vIG9yIGhhc2gKICAgICAgICAgICAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDsKICAgICAgICAgICAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoOyAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgdGhlIGF1dG9tYXRpY2FsbHkKICAgICAgICAgICAgICAvLyBpbnNlcnRlZCA/aW5kZXggcGFyYW0gc28gd2UgbWF0Y2ggdGhlIHVzZVJlc29sdmVkUGF0aCBzZWFyY2ggYmVoYXZpb3IKICAgICAgICAgICAgICAvLyB3aGljaCB3b3VsZCBub3QgaW5jbHVkZSA/aW5kZXgKCiAgICAgICAgICAgICAgaWYgKG1hdGNoLnJvdXRlLmluZGV4KSB7CiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7CiAgICAgICAgICAgICAgICBwYXJhbXMuZGVsZXRlKCJpbmRleCIpOwogICAgICAgICAgICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/ICI/IiArIHBhcmFtcy50b1N0cmluZygpIDogIiI7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSAiLiIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7CiAgICAgICAgICAgICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cPy8sICI/aW5kZXgmIikgOiAiP2luZGV4IjsKICAgICAgICAgICAgfSAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yCiAgICAgICAgICAgIC8vIHRvIGNyZWF0aW5nIHRoZSBmb3JtIGFjdGlvbi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UKICAgICAgICAgICAgLy8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlCiAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBhY3Rpb25zCgoKICAgICAgICAgICAgaWYgKGJhc2VuYW1lICE9PSAiLyIpIHsKICAgICAgICAgICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gIi8iID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpIHsKICAgICAgICAgICAgdmFyIEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHsKICAgICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIHJlYWN0X3JvdXRlcl9kb21fZGlzdF9leHRlbmRzKHt9LCBwcm9wcywgewogICAgICAgICAgICAgICAgcmVmOiByZWYsCiAgICAgICAgICAgICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LAogICAgICAgICAgICAgICAgcm91dGVJZDogcm91dGVJZAogICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoZmFsc2UpIHt9CgogICAgICAgICAgICByZXR1cm4gRmV0Y2hlckZvcm07CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGZldGNoZXJJZCA9IDA7CiAgICAgICAgICAvKioKICAgICAgICAgICAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXQKICAgICAgICAgICAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLgogICAgICAgICAgICovCgogICAgICAgICAgZnVuY3Rpb24gdXNlRmV0Y2hlcigpIHsKICAgICAgICAgICAgdmFyIF9yb3V0ZSRtYXRjaGVzOwoKICAgICAgICAgICAgdmFyIF9kaXN0X3VzZURhdGFSb3V0ZXJDbzIgPQoKICAgICAgICAgICAgICBkaXN0X3VzZURhdGFSb3V0ZXJDb250ZXh0KGRpc3RfRGF0YVJvdXRlckhvb2suVXNlRmV0Y2hlcikscm91dGVyID0gX2Rpc3RfdXNlRGF0YVJvdXRlckNvMi5yb3V0ZXI7CiAgICAgICAgICAgIHZhciByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7CiAgICAgICAgICAgICFyb3V0ZSA/IGZhbHNlID8gMCA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgIHZhciByb3V0ZUlkID0gKF9yb3V0ZSRtYXRjaGVzID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlJG1hdGNoZXMucm91dGUuaWQ7CiAgICAgICAgICAgICEocm91dGVJZCAhPSBudWxsKSA/IGZhbHNlID8gMCA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgIHZhciBfUmVhY3QkdXNlU3RhdGU5ID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gU3RyaW5nKCsrZmV0Y2hlcklkKSksX1JlYWN0JHVzZVN0YXRlMTAgPSBfc2xpY2VkVG9BcnJheTIoX1JlYWN0JHVzZVN0YXRlOSwgMSksZmV0Y2hlcktleSA9IF9SZWFjdCR1c2VTdGF0ZTEwWzBdOwogICAgICAgICAgICB2YXIgX1JlYWN0JHVzZVN0YXRlMTEgPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiB7CiAgICAgICAgICAgICAgICAhcm91dGVJZCA/IGZhbHNlID8gMCA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7CiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRmV0Y2hlckZvcm0oZmV0Y2hlcktleSwgcm91dGVJZCk7CiAgICAgICAgICAgICAgfSksX1JlYWN0JHVzZVN0YXRlMTIgPSBfc2xpY2VkVG9BcnJheTIoX1JlYWN0JHVzZVN0YXRlMTEsIDEpLEZvcm0gPSBfUmVhY3QkdXNlU3RhdGUxMlswXTsKICAgICAgICAgICAgdmFyIF9SZWFjdCR1c2VTdGF0ZTEzID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gKGhyZWYpID0+IHsKICAgICAgICAgICAgICAgICFyb3V0ZXIgPyBmYWxzZSA/IDAgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOwogICAgICAgICAgICAgICAgIXJvdXRlSWQgPyBmYWxzZSA/IDAgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOwogICAgICAgICAgICAgICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpOwogICAgICAgICAgICAgIH0pLF9SZWFjdCR1c2VTdGF0ZTE0ID0gX3NsaWNlZFRvQXJyYXkyKF9SZWFjdCR1c2VTdGF0ZTEzLCAxKSxsb2FkID0gX1JlYWN0JHVzZVN0YXRlMTRbMF07CiAgICAgICAgICAgIHZhciBzdWJtaXQgPSB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXksIHJvdXRlSWQpOwogICAgICAgICAgICB2YXIgZmV0Y2hlciA9IHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpOwogICAgICAgICAgICB2YXIgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiByZWFjdF9yb3V0ZXJfZG9tX2Rpc3RfZXh0ZW5kcyh7CiAgICAgICAgICAgICAgRm9ybTogRm9ybSwKICAgICAgICAgICAgICBzdWJtaXQ6IHN1Ym1pdCwKICAgICAgICAgICAgICBsb2FkOiBsb2FkCiAgICAgICAgICAgIH0sIGZldGNoZXIpLCBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXSk7CiAgICAgICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7CiAgICAgICAgICAgICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHMKICAgICAgICAgICAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzCiAgICAgICAgICAgICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLgogICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoIXJvdXRlcikgewogICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oIk5vIGZldGNoZXIgYXZhaWxhYmxlIHRvIGNsZWFuIHVwIGZyb20gdXNlRmV0Y2hlcigpIik7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByb3V0ZXIuZGVsZXRlRmV0Y2hlcihmZXRjaGVyS2V5KTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9LCBbcm91dGVyLCBmZXRjaGVyS2V5XSk7CiAgICAgICAgICAgIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50CiAgICAgICAgICAgKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiB1c2VGZXRjaGVycygpIHsKICAgICAgICAgICAgdmFyIHN0YXRlID0gZGlzdF91c2VEYXRhUm91dGVyU3RhdGUoZGlzdF9EYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXJzKTsKICAgICAgICAgICAgcmV0dXJuIF90b0NvbnN1bWFibGVBcnJheTIoc3RhdGUuZmV0Y2hlcnMudmFsdWVzKCkpOwogICAgICAgICAgfQogICAgICAgICAgdmFyIFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSA9ICJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9ucyI7CiAgICAgICAgICB2YXIgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSB7fTsKICAgICAgICAgIC8qKgogICAgICAgICAgICogV2hlbiByZW5kZXJlZCBpbnNpZGUgYSBSb3V0ZXJQcm92aWRlciwgd2lsbCByZXN0b3JlIHNjcm9sbCBwb3NpdGlvbnMgb24gbmF2aWdhdGlvbnMKICAgICAgICAgICAqLwoKICAgICAgICAgIGZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wMykgewogICAgICAgICAgICB2YXIgX3JlZjM0ID0KCgogICAgICAgICAgICAgIF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDMsZ2V0S2V5ID0gX3JlZjM0LmdldEtleSxzdG9yYWdlS2V5ID0gX3JlZjM0LnN0b3JhZ2VLZXk7CiAgICAgICAgICAgIHZhciBfZGlzdF91c2VEYXRhUm91dGVyQ28zID0KCiAgICAgICAgICAgICAgZGlzdF91c2VEYXRhUm91dGVyQ29udGV4dChkaXN0X0RhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKSxyb3V0ZXIgPSBfZGlzdF91c2VEYXRhUm91dGVyQ28zLnJvdXRlcjsKICAgICAgICAgICAgdmFyIF9kaXN0X3VzZURhdGFSb3V0ZXJTdCA9CgoKICAgICAgICAgICAgICBkaXN0X3VzZURhdGFSb3V0ZXJTdGF0ZShkaXN0X0RhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pLHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9IF9kaXN0X3VzZURhdGFSb3V0ZXJTdC5yZXN0b3JlU2Nyb2xsUG9zaXRpb24scHJldmVudFNjcm9sbFJlc2V0ID0gX2Rpc3RfdXNlRGF0YVJvdXRlclN0LnByZXZlbnRTY3JvbGxSZXNldDsKICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTsKICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB1c2VNYXRjaGVzKCk7CiAgICAgICAgICAgIHZhciBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpOyAvLyBUcmlnZ2VyIG1hbnVhbCBzY3JvbGwgcmVzdG9yYXRpb24gd2hpbGUgd2UncmUgYWN0aXZlCgogICAgICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gewogICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gIm1hbnVhbCI7CiAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHsKICAgICAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gImF1dG8iOwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0sIFtdKTsgLy8gU2F2ZSBwb3NpdGlvbnMgb24gdW5sb2FkCgogICAgICAgICAgICB1c2VCZWZvcmVVbmxvYWQoUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4gewogICAgICAgICAgICAgIGlmIChuYXZpZ2F0aW9uLnN0YXRlID09PSAiaWRsZSIpIHsKICAgICAgICAgICAgICAgIHZhciBrZXkgPSAoZ2V0S2V5ID8gZ2V0S2V5KGxvY2F0aW9uLCBtYXRjaGVzKSA6IG51bGwpIHx8IGxvY2F0aW9uLmtleTsKICAgICAgICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV0gPSB3aW5kb3cuc2Nyb2xsWTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KHNhdmVkU2Nyb2xsUG9zaXRpb25zKSk7CiAgICAgICAgICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSAiYXV0byI7CiAgICAgICAgICAgIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpOyAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zCgogICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcwogICAgICAgICAgICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICB2YXIgc2Vzc2lvblBvc2l0aW9ucyA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSB8fCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkpOwoKICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHsKICAgICAgICAgICAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdAogICAgICAgICAgICAgICAgfX0sIFtzdG9yYWdlS2V5XSk7IC8vIEVuYWJsZSBzY3JvbGwgcmVzdG9yYXRpb24gaW4gdGhlIHJvdXRlcgogICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcwoKICAgICAgICAgICAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gewogICAgICAgICAgICAgICAgdmFyIGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiA9IHJvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyLmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHNhdmVkU2Nyb2xsUG9zaXRpb25zLCAoKSA9PiB3aW5kb3cuc2Nyb2xsWSwgZ2V0S2V5KTsKICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7CiAgICAgICAgICAgICAgfSwgW3JvdXRlciwgZ2V0S2V5XSk7IC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXMKICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MKCiAgICAgICAgICAgICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHsKICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0IGZhbHNlIG1lYW5zIGRvbid0IGRvIGFueXRoaW5nICh1c2VkIGZvciBzdWJtaXNzaW9ucykKICAgICAgICAgICAgICAgIGlmIChyZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0CgoKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSAibnVtYmVyIikgewogICAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfSAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoCgoKICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpOwoKICAgICAgICAgICAgICAgICAgaWYgKGVsKSB7CiAgICAgICAgICAgICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gLy8gRG9uJ3QgcmVzZXQgaWYgdGhpcyBuYXZpZ2F0aW9uIG9wdGVkIG91dAoKCiAgICAgICAgICAgICAgICBpZiAocHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9ucwoKCiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7CiAgICAgICAgICAgICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBiZWZvcmV1bmxvYWRgIGV2ZW50LiBUaGlzIGlzCiAgICAgICAgICAgKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlCiAgICAgICAgICAgKiByZWZyZXNoZXMuCiAgICAgICAgICAgKgogICAgICAgICAgICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoCiAgICAgICAgICAgKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuCiAgICAgICAgICAgKi8KCgogICAgICAgICAgZnVuY3Rpb24gdXNlQmVmb3JlVW5sb2FkKGNhbGxiYWNrLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHZhciBfcmVmMzUgPQoKICAgICAgICAgICAgICBvcHRpb25zIHx8IHt9LGNhcHR1cmUgPSBfcmVmMzUuY2FwdHVyZTsKICAgICAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHsKICAgICAgICAgICAgICB2YXIgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHsKICAgICAgICAgICAgICAgIGNhcHR1cmU6IGNhcHR1cmUKICAgICAgICAgICAgICB9IDogdW5kZWZpbmVkOwogICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCJiZWZvcmV1bmxvYWQiLCBjYWxsYmFjaywgb3B0cyk7CiAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHsKICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJiZWZvcmV1bmxvYWQiLCBjYWxsYmFjaywgb3B0cyk7CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7CiAgICAgICAgICB9CiAgICAgICAgICAvKioKICAgICAgICAgICAqIFdyYXBwZXIgYXJvdW5kIHVzZUJsb2NrZXIgdG8gc2hvdyBhIHdpbmRvdy5jb25maXJtIHByb21wdCB0byB1c2VycyBpbnN0ZWFkCiAgICAgICAgICAgKiBvZiBidWlsZGluZyBhIGN1c3RvbSBVSSB3aXRoIHVzZUJsb2NrZXIuCiAgICAgICAgICAgKgogICAgICAgICAgICogV2FybmluZzogVGhpcyBoYXMgKmEgbG90IG9mIHJvdWdoIGVkZ2VzKiBhbmQgYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IChhbmQKICAgICAgICAgICAqIHZlcnkgaW5jb3JyZWN0bHkgaW4gc29tZSBjYXNlcykgYWNyb3NzIGJyb3dzZXJzIGlmIHVzZXIgY2xpY2sgYWRkaXRpb24KICAgICAgICAgICAqIGJhY2svZm9yd2FyZCBuYXZpZ2F0aW9ucyB3aGlsZSB0aGUgY29uZmlybSBpcyBvcGVuLiAgVXNlIGF0IHlvdXIgb3duIHJpc2suCiAgICAgICAgICAgKi8KCiAgICAgICAgICBmdW5jdGlvbiB1c2VQcm9tcHQoX3JlZjgpIHsKICAgICAgICAgICAgdmFyCiAgICAgICAgICAgICAgd2hlbiA9CgogICAgICAgICAgICAgIF9yZWY4LndoZW4sbWVzc2FnZSA9IF9yZWY4Lm1lc3NhZ2U7CiAgICAgICAgICAgIHZhciBibG9ja2VyID0gdW5zdGFibGVfdXNlQmxvY2tlcih3aGVuKTsKICAgICAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHsKICAgICAgICAgICAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gImJsb2NrZWQiICYmICF3aGVuKSB7CiAgICAgICAgICAgICAgICBibG9ja2VyLnJlc2V0KCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBbYmxvY2tlciwgd2hlbl0pOwogICAgICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gewogICAgICAgICAgICAgIGlmIChibG9ja2VyLnN0YXRlID09PSAiYmxvY2tlZCIpIHsKICAgICAgICAgICAgICAgIHZhciBwcm9jZWVkID0gd2luZG93LmNvbmZpcm0obWVzc2FnZSk7CgogICAgICAgICAgICAgICAgaWYgKHByb2NlZWQpIHsKICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgYmxvY2tlci5yZXNldCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCiAgICAgICAgICAvLyNyZWdpb24gVXRpbHMKICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgogICAgICAgICAgZnVuY3Rpb24gZGlzdF93YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgaWYgKCFjb25kKSB7CiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICJ1bmRlZmluZWQiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7CgogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhCiAgICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5CiAgICAgICAgICAgICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnkKICAgICAgICAgICAgICAgIC8vIGVuYWJsaW5nICJwYXVzZSBvbiBleGNlcHRpb25zIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eQogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gLy8jZW5kcmVnaW9uCgoKCgogICAgICAgICAgOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9yZWxheS9jb21wb25lbnRzL0xheW91dC50c3gKCgoKCiAgICAgICAgICB2YXIgTGF5b3V0ID0gZnVuY3Rpb24gTGF5b3V0KF9yZWYpIHt2YXIgcGFnZXMgPSBfcmVmLnBhZ2VzOwogICAgICAgICAgICB2YXIgb3V0bGV0ID0gLyojX19QVVJFX18qLwogICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsgaWQ6ICJub3RpZmljYXRpb25zQ29udGFpbmVyIiB9KSwgLyojX19QVVJFX18qLwogICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7IGlkOiAicmVsYXlDb250YWluZXIiIH0sIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudChPdXRsZXQsIG51bGwpKSk7CgoKCgogICAgICAgICAgICBpZiAocGFnZXMubGVuZ3RoIDw9IDEpIHsKICAgICAgICAgICAgICByZXR1cm4gb3V0bGV0OwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qLygKICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0LkZyYWdtZW50LCBudWxsLAogICAgICAgICAgICAgICIgIiwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoIm5hdiIsIG51bGwsIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7IGNsYXNzTmFtZTogInRvcEJhciIgfSwKICAgICAgICAgICAgICAiICIsCiAgICAgICAgICAgICAgcGFnZXMubWFwKGZ1bmN0aW9uIChwKSB7cmV0dXJuIC8qI19fUFVSRV9fKi8oCiAgICAgICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsga2V5OiAiIi5jb25jYXQocC5maWxlLCAiICIpLmNvbmNhdChwLnBhZ2UpLCBjbGFzc05hbWU6ICJ0YWJFbnRyeSIgfSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KE5hdkxpbmssIHsgdG86ICIvIiArIHAuZmlsZSB9LCBwLnBhZ2UpLCAiICIpKTt9KSkpLAoKCgogICAgICAgICAgICAgICIgIiwKICAgICAgICAgICAgICBvdXRsZXQpKTsKCgogICAgICAgICAgfTsKCiAgICAgICAgICAvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovdmFyIGNvbXBvbmVudHNfTGF5b3V0ID0gTGF5b3V0OwogICAgICAgICAgOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9yZWxheS9hcGkvQXBpUmVxdWVzdC50c3gKICAgICAgICAgIGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjtyZXR1cm4gX3R5cGVvZiA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIFN5bWJvbCAmJiAic3ltYm9sIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge3JldHVybiB0eXBlb2Ygb2JqO30gOiBmdW5jdGlvbiAob2JqKSB7cmV0dXJuIG9iaiAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqO30sIF90eXBlb2Yob2JqKTt9ZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHsidXNlIHN0cmljdCI7CiAgICAgICAgICAgIC8qISByZWdlbmVyYXRvci1ydW50aW1lIC0tIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLiAtLSBsaWNlbnNlIChNSVQpOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvYmxvYi9tYWluL0xJQ0VOU0UgKi9fcmVnZW5lcmF0b3JSdW50aW1lID0gZnVuY3Rpb24gX3JlZ2VuZXJhdG9yUnVudGltZSgpIHtyZXR1cm4gZXhwb3J0czt9O3ZhciBleHBvcnRzID0ge30sT3AgPSBPYmplY3QucHJvdG90eXBlLGhhc093biA9IE9wLmhhc093blByb3BlcnR5LGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykge29ialtrZXldID0gZGVzYy52YWx1ZTt9LCRTeW1ib2wgPSAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wgOiB7fSxpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgIkBAaXRlcmF0b3IiLGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgIkBAYXN5bmNJdGVyYXRvciIsdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8ICJAQHRvU3RyaW5nVGFnIjtmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAgfSksIG9ialtrZXldO310cnkge2RlZmluZSh7fSwgIiIpO30gY2F0Y2ggKGVycikge2RlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtyZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTt9O31mdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7dmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3IsZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpLGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7cmV0dXJuIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgIl9pbnZva2UiLCB7IHZhbHVlOiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIH0pLCBnZW5lcmF0b3I7fWZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge3RyeSB7cmV0dXJuIHsgdHlwZTogIm5vcm1hbCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTt9IGNhdGNoIChlcnIpIHtyZXR1cm4geyB0eXBlOiAidGhyb3ciLCBhcmc6IGVyciB9O319ZXhwb3J0cy53cmFwID0gd3JhcDt2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O2Z1bmN0aW9uIEdlbmVyYXRvcigpIHt9ZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fWZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge312YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtkZWZpbmUoSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXM7fSk7dmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO05hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJiBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpICYmIChJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlKTt2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPSBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7ZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1sibmV4dCIsICJ0aHJvdyIsICJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uIChhcmcpIHtyZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTt9KTt9KTt9ZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7ZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHt2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtpZiAoInRocm93IiAhPT0gcmVjb3JkLnR5cGUpIHt2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZyx2YWx1ZSA9IHJlc3VsdC52YWx1ZTtyZXR1cm4gdmFsdWUgJiYgIm9iamVjdCIgPT0gX3R5cGVvZih2YWx1ZSkgJiYgaGFzT3duLmNhbGwodmFsdWUsICJfX2F3YWl0IikgPyBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7aW52b2tlKCJuZXh0IiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7fSwgZnVuY3Rpb24gKGVycikge2ludm9rZSgidGhyb3ciLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7fSkgOiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uICh1bndyYXBwZWQpIHtyZXN1bHQudmFsdWUgPSB1bndyYXBwZWQsIHJlc29sdmUocmVzdWx0KTt9LCBmdW5jdGlvbiAoZXJyb3IpIHtyZXR1cm4gaW52b2tlKCJ0aHJvdyIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO30pO31yZWplY3QocmVjb3JkLmFyZyk7fXZhciBwcmV2aW91c1Byb21pc2U7ZGVmaW5lUHJvcGVydHkodGhpcywgIl9pbnZva2UiLCB7IHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShtZXRob2QsIGFyZykge2Z1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge3JldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge2ludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTt9KTt9cmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9IHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLCBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZykgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO30gfSk7fWZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge3ZhciBzdGF0ZSA9ICJzdXNwZW5kZWRTdGFydCI7cmV0dXJuIGZ1bmN0aW9uIChtZXRob2QsIGFyZykge2lmICgiZXhlY3V0aW5nIiA9PT0gc3RhdGUpIHRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpO2lmICgiY29tcGxldGVkIiA9PT0gc3RhdGUpIHtpZiAoInRocm93IiA9PT0gbWV0aG9kKSB0aHJvdyBhcmc7cmV0dXJuIGRvbmVSZXN1bHQoKTt9Zm9yIChjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZCwgY29udGV4dC5hcmcgPSBhcmc7Oykge3ZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7aWYgKGRlbGVnYXRlKSB7dmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7aWYgKGRlbGVnYXRlUmVzdWx0KSB7aWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtyZXR1cm4gZGVsZWdhdGVSZXN1bHQ7fX1pZiAoIm5leHQiID09PSBjb250ZXh0Lm1ldGhvZCkgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO2Vsc2UgaWYgKCJ0aHJvdyIgPT09IGNvbnRleHQubWV0aG9kKSB7aWYgKCJzdXNwZW5kZWRTdGFydCIgPT09IHN0YXRlKSB0aHJvdyBzdGF0ZSA9ICJjb21wbGV0ZWQiLCBjb250ZXh0LmFyZztjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTt9IGVsc2UgInJldHVybiIgPT09IGNvbnRleHQubWV0aG9kICYmIGNvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBjb250ZXh0LmFyZyk7c3RhdGUgPSAiZXhlY3V0aW5nIjt2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7aWYgKCJub3JtYWwiID09PSByZWNvcmQudHlwZSkge2lmIChzdGF0ZSA9IGNvbnRleHQuZG9uZSA/ICJjb21wbGV0ZWQiIDogInN1c3BlbmRlZFlpZWxkIiwgcmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7cmV0dXJuIHsgdmFsdWU6IHJlY29yZC5hcmcsIGRvbmU6IGNvbnRleHQuZG9uZSB9O30idGhyb3ciID09PSByZWNvcmQudHlwZSAmJiAoc3RhdGUgPSAiY29tcGxldGVkIiwgY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcpO319O31mdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7dmFyIG1ldGhvZE5hbWUgPSBjb250ZXh0Lm1ldGhvZCxtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2ROYW1lXTtpZiAodW5kZWZpbmVkID09PSBtZXRob2QpIHJldHVybiBjb250ZXh0LmRlbGVnYXRlID0gbnVsbCwgInRocm93IiA9PT0gbWV0aG9kTmFtZSAmJiBkZWxlZ2F0ZS5pdGVyYXRvclsicmV0dXJuIl0gJiYgKGNvbnRleHQubWV0aG9kID0gInJldHVybiIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkLCBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSwgInRocm93IiA9PT0gY29udGV4dC5tZXRob2QpIHx8ICJyZXR1cm4iICE9PSBtZXRob2ROYW1lICYmIChjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyIsIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcigiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAnIiArIG1ldGhvZE5hbWUgKyAiJyBtZXRob2QiKSksIENvbnRpbnVlU2VudGluZWw7dmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtpZiAoInRocm93IiA9PT0gcmVjb3JkLnR5cGUpIHJldHVybiBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyIsIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZywgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWw7dmFyIGluZm8gPSByZWNvcmQuYXJnO3JldHVybiBpbmZvID8gaW5mby5kb25lID8gKGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlLCBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jLCAicmV0dXJuIiAhPT0gY29udGV4dC5tZXRob2QgJiYgKGNvbnRleHQubWV0aG9kID0gIm5leHQiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKSA6IGluZm8gOiAoY29udGV4dC5tZXRob2QgPSAidGhyb3ciLCBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0IiksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKTt9ZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHt2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9OzEgaW4gbG9jcyAmJiAoZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdKSwgMiBpbiBsb2NzICYmIChlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXSwgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdKSwgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO31mdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7dmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307cmVjb3JkLnR5cGUgPSAibm9ybWFsIiwgZGVsZXRlIHJlY29yZC5hcmcsIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7fWZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHt0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6ICJyb290IiB9XSwgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpLCB0aGlzLnJlc2V0KCEwKTt9ZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7aWYgKGl0ZXJhYmxlKSB7dmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO2lmIChpdGVyYXRvck1ldGhvZCkgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO2lmICgiZnVuY3Rpb24iID09IHR5cGVvZiBpdGVyYWJsZS5uZXh0KSByZXR1cm4gaXRlcmFibGU7aWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7dmFyIGkgPSAtMSxuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtmb3IgKDsgKytpIDwgaXRlcmFibGUubGVuZ3RoOykgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkgcmV0dXJuIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXSwgbmV4dC5kb25lID0gITEsIG5leHQ7cmV0dXJuIG5leHQudmFsdWUgPSB1bmRlZmluZWQsIG5leHQuZG9uZSA9ICEwLCBuZXh0O307cmV0dXJuIG5leHQubmV4dCA9IG5leHQ7fX1yZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07fWZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7cmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogITAgfTt9cmV0dXJuIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmVQcm9wZXJ0eShHcCwgImNvbnN0cnVjdG9yIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGNvbmZpZ3VyYWJsZTogITAgfSksIGRlZmluZVByb3BlcnR5KEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCAiY29uc3RydWN0b3IiLCB7IHZhbHVlOiBHZW5lcmF0b3JGdW5jdGlvbiwgY29uZmlndXJhYmxlOiAhMCB9KSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHRvU3RyaW5nVGFnU3ltYm9sLCAiR2VuZXJhdG9yRnVuY3Rpb24iKSwgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24gKGdlbkZ1bikge3ZhciBjdG9yID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgZ2VuRnVuICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtyZXR1cm4gISFjdG9yICYmIChjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCAiR2VuZXJhdG9yRnVuY3Rpb24iID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTt9LCBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbiAoZ2VuRnVuKSB7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSA6IChnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGRlZmluZShnZW5GdW4sIHRvU3RyaW5nVGFnU3ltYm9sLCAiR2VuZXJhdG9yRnVuY3Rpb24iKSksIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKSwgZ2VuRnVuO30sIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7cmV0dXJuIHsgX19hd2FpdDogYXJnIH07fSwgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKSwgZGVmaW5lKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlLCBhc3luY0l0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXM7fSksIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7dm9pZCAwID09PSBQcm9taXNlSW1wbCAmJiAoUHJvbWlzZUltcGwgPSBQcm9taXNlKTt2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7cmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKSA/IGl0ZXIgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtyZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTt9KTt9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApLCBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCAiR2VuZXJhdG9yIiksIGRlZmluZShHcCwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpczt9KSwgZGVmaW5lKEdwLCAidG9TdHJpbmciLCBmdW5jdGlvbiAoKSB7cmV0dXJuICJbb2JqZWN0IEdlbmVyYXRvcl0iO30pLCBleHBvcnRzLmtleXMgPSBmdW5jdGlvbiAodmFsKSB7dmFyIG9iamVjdCA9IE9iamVjdCh2YWwpLGtleXMgPSBbXTtmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBrZXlzLnB1c2goa2V5KTtyZXR1cm4ga2V5cy5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7Zm9yICg7IGtleXMubGVuZ3RoOykge3ZhciBrZXkgPSBrZXlzLnBvcCgpO2lmIChrZXkgaW4gb2JqZWN0KSByZXR1cm4gbmV4dC52YWx1ZSA9IGtleSwgbmV4dC5kb25lID0gITEsIG5leHQ7fXJldHVybiBuZXh0LmRvbmUgPSAhMCwgbmV4dDt9O30sIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzLCBDb250ZXh0LnByb3RvdHlwZSA9IHsgY29uc3RydWN0b3I6IENvbnRleHQsIHJlc2V0OiBmdW5jdGlvbiByZXNldChza2lwVGVtcFJlc2V0KSB7aWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSAibmV4dCIsIHRoaXMuYXJnID0gdW5kZWZpbmVkLCB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KSwgIXNraXBUZW1wUmVzZXQpIGZvciAodmFyIG5hbWUgaW4gdGhpcykgInQiID09PSBuYW1lLmNoYXJBdCgwKSAmJiBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJiAhaXNOYU4oK25hbWUuc2xpY2UoMSkpICYmICh0aGlzW25hbWVdID0gdW5kZWZpbmVkKTt9LCBzdG9wOiBmdW5jdGlvbiBzdG9wKCkge3RoaXMuZG9uZSA9ICEwO3ZhciByb290UmVjb3JkID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247aWYgKCJ0aHJvdyIgPT09IHJvb3RSZWNvcmQudHlwZSkgdGhyb3cgcm9vdFJlY29yZC5hcmc7cmV0dXJuIHRoaXMucnZhbDt9LCBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24gZGlzcGF0Y2hFeGNlcHRpb24oZXhjZXB0aW9uKSB7aWYgKHRoaXMuZG9uZSkgdGhyb3cgZXhjZXB0aW9uO3ZhciBjb250ZXh0ID0gdGhpcztmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtyZXR1cm4gcmVjb3JkLnR5cGUgPSAidGhyb3ciLCByZWNvcmQuYXJnID0gZXhjZXB0aW9uLCBjb250ZXh0Lm5leHQgPSBsb2MsIGNhdWdodCAmJiAoY29udGV4dC5tZXRob2QgPSAibmV4dCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgISFjYXVnaHQ7fWZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHt2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV0scmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtpZiAoInJvb3QiID09PSBlbnRyeS50cnlMb2MpIHJldHVybiBoYW5kbGUoImVuZCIpO2lmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7dmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksICJjYXRjaExvYyIpLGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgImZpbmFsbHlMb2MiKTtpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge2lmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgITApO2lmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO30gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTt9IGVsc2Uge2lmICghaGFzRmluYWxseSkgdGhyb3cgbmV3IEVycm9yKCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseSIpO2lmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO319fX0sIGFicnVwdDogZnVuY3Rpb24gYWJydXB0KHR5cGUsIGFyZykge2ZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHt2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07aWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIikgJiYgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge3ZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTticmVhazt9fWZpbmFsbHlFbnRyeSAmJiAoImJyZWFrIiA9PT0gdHlwZSB8fCAiY29udGludWUiID09PSB0eXBlKSAmJiBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJiBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MgJiYgKGZpbmFsbHlFbnRyeSA9IG51bGwpO3ZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O3JldHVybiByZWNvcmQudHlwZSA9IHR5cGUsIHJlY29yZC5hcmcgPSBhcmcsIGZpbmFsbHlFbnRyeSA/ICh0aGlzLm1ldGhvZCA9ICJuZXh0IiwgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MsIENvbnRpbnVlU2VudGluZWwpIDogdGhpcy5jb21wbGV0ZShyZWNvcmQpO30sIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZShyZWNvcmQsIGFmdGVyTG9jKSB7aWYgKCJ0aHJvdyIgPT09IHJlY29yZC50eXBlKSB0aHJvdyByZWNvcmQuYXJnO3JldHVybiAiYnJlYWsiID09PSByZWNvcmQudHlwZSB8fCAiY29udGludWUiID09PSByZWNvcmQudHlwZSA/IHRoaXMubmV4dCA9IHJlY29yZC5hcmcgOiAicmV0dXJuIiA9PT0gcmVjb3JkLnR5cGUgPyAodGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnLCB0aGlzLm1ldGhvZCA9ICJyZXR1cm4iLCB0aGlzLm5leHQgPSAiZW5kIikgOiAibm9ybWFsIiA9PT0gcmVjb3JkLnR5cGUgJiYgYWZ0ZXJMb2MgJiYgKHRoaXMubmV4dCA9IGFmdGVyTG9jKSwgQ29udGludWVTZW50aW5lbDt9LCBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaChmaW5hbGx5TG9jKSB7Zm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge3ZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykgcmV0dXJuIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpLCByZXNldFRyeUVudHJ5KGVudHJ5KSwgQ29udGludWVTZW50aW5lbDt9fSwgImNhdGNoIjogZnVuY3Rpb24gX2NhdGNoKHRyeUxvYykge2ZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHt2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07aWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7dmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247aWYgKCJ0aHJvdyIgPT09IHJlY29yZC50eXBlKSB7dmFyIHRocm93biA9IHJlY29yZC5hcmc7cmVzZXRUcnlFbnRyeShlbnRyeSk7fXJldHVybiB0aHJvd247fX10aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpO30sIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtyZXR1cm4gdGhpcy5kZWxlZ2F0ZSA9IHsgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsIG5leHRMb2M6IG5leHRMb2MgfSwgIm5leHQiID09PSB0aGlzLm1ldGhvZCAmJiAodGhpcy5hcmcgPSB1bmRlZmluZWQpLCBDb250aW51ZVNlbnRpbmVsO30gfSwgZXhwb3J0czt9ZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge3RyeSB7dmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO3ZhciB2YWx1ZSA9IGluZm8udmFsdWU7fSBjYXRjaCAoZXJyb3IpIHtyZWplY3QoZXJyb3IpO3JldHVybjt9aWYgKGluZm8uZG9uZSkge3Jlc29sdmUodmFsdWUpO30gZWxzZSB7UHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO319ZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtyZXR1cm4gZnVuY3Rpb24gKCkge3ZhciBzZWxmID0gdGhpcyxhcmdzID0gYXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7dmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO2Z1bmN0aW9uIF9uZXh0KHZhbHVlKSB7YXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTt9ZnVuY3Rpb24gX3Rocm93KGVycikge2FzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTt9X25leHQodW5kZWZpbmVkKTt9KTt9O30KICAgICAgICAgIGZ1bmN0aW9uIGFkZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pIHsKICAgICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICBlbGUuY2xhc3NOYW1lID0gIm5vdGlmaWNhdGlvbiI7CiAgICAgICAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKCJhbmltYXRpb25lbmQiLCBmdW5jdGlvbiAoKSB7cmV0dXJuIGVsZS5yZW1vdmUoKTt9KTsKICAgICAgICAgICAgZWxlLmlubmVyVGV4dCA9IG5vdGlmaWNhdGlvbjsKCiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibm90aWZpY2F0aW9uc0NvbnRhaW5lciIpOwoKICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIHsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGUpOwogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHNhdmVTZXR0aW5ncygKICAgICAgICAgIHByb3BlcnRpZXMpCiAgICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiBzZXRQcm9wZXJ0aWVzKAogICAgICAgICAgICBwcm9wZXJ0aWVzLgogICAgICAgICAgICBmaWx0ZXIoZnVuY3Rpb24gKHApIHsKICAgICAgICAgICAgICBpZiAocC5wcmV2aW91c1ZhbHVlID09PSBwLnZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBwLnByZXZpb3VzVmFsdWUgPSBwLnZhbHVlOwogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9KS4KICAgICAgICAgICAgbWFwKGZ1bmN0aW9uIChwcm9wKSB7cmV0dXJuIFtwcm9wLnByZWZlcmVuY2UsIHByb3AudmFsdWUudHJpbSgpXTt9KSk7CgogICAgICAgICAgfQoKICAgICAgICAgIGZ1bmN0aW9uIHNldFByb3BlcnRpZXMoCiAgICAgICAgICBwcm9wZXJ0aWVzKQogICAgICAgICAgewogICAgICAgICAgICByZXR1cm4gcnVuUmVsYXkoInNldFByb3BlcnRpZXMiLCBKU09OLnN0cmluZ2lmeShwcm9wZXJ0aWVzKSkudGhlbihmdW5jdGlvbiAodmFsKSB7cmV0dXJuICgKICAgICAgICAgICAgICAgIEpTT04ucGFyc2UodmFsKSk7fSk7CgogICAgICAgICAgfWZ1bmN0aW9uCgogICAgICAgICAgcnVuUmVsYXkoX3gsIF94Mikge3JldHVybiBfcnVuUmVsYXkuYXBwbHkodGhpcywgYXJndW1lbnRzKTt9ZnVuY3Rpb24gX3J1blJlbGF5KCkge19ydW5SZWxheSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShmb3JtTmFtZSwgcGFyYW0pIHtyZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHt3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge2Nhc2UgMDpyZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLAogICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gInRleHQiOwogICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oIlBPU1QiLCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZChmb3JtTmFtZSArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbSkpOwogICAgICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9IDQgfHwgeGhyLnN0YXR1cyAhPSAyMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0pKTtjYXNlIDE6Y2FzZSAiZW5kIjpyZXR1cm4gX2NvbnRleHQuc3RvcCgpO319LCBfY2FsbGVlKTt9KSk7cmV0dXJuIF9ydW5SZWxheS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO30KICAgICAgICAgIDsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcmVsYXkvYXBpL1NldHRpbmdWYWxpZGF0b3IudHN4CiAgICAgICAgICBmdW5jdGlvbiBTZXR0aW5nVmFsaWRhdG9yX3R5cGVvZihvYmopIHsiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiO3JldHVybiBTZXR0aW5nVmFsaWRhdG9yX3R5cGVvZiA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIFN5bWJvbCAmJiAic3ltYm9sIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge3JldHVybiB0eXBlb2Ygb2JqO30gOiBmdW5jdGlvbiAob2JqKSB7cmV0dXJuIG9iaiAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqO30sIFNldHRpbmdWYWxpZGF0b3JfdHlwZW9mKG9iaik7fWZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge3JldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7fWZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTt9ZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge3ZhciBfaSA9IG51bGwgPT0gYXJyID8gbnVsbCA6ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTeW1ib2wgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyWyJAQGl0ZXJhdG9yIl07aWYgKG51bGwgIT0gX2kpIHt2YXIgX3MsX2UsX3gsX3IsX2FyciA9IFtdLF9uID0gITAsX2QgPSAhMTt0cnkge2lmIChfeCA9IChfaSA9IF9pLmNhbGwoYXJyKSkubmV4dCwgMCA9PT0gaSkge2lmIChPYmplY3QoX2kpICE9PSBfaSkgcmV0dXJuO19uID0gITE7fSBlbHNlIGZvciAoOyAhKF9uID0gKF9zID0gX3guY2FsbChfaSkpLmRvbmUpICYmIChfYXJyLnB1c2goX3MudmFsdWUpLCBfYXJyLmxlbmd0aCAhPT0gaSk7IF9uID0gITApO30gY2F0Y2ggKGVycikge19kID0gITAsIF9lID0gZXJyO30gZmluYWxseSB7dHJ5IHtpZiAoIV9uICYmIG51bGwgIT0gX2lbInJldHVybiJdICYmIChfciA9IF9pWyJyZXR1cm4iXSgpLCBPYmplY3QoX3IpICE9PSBfcikpIHJldHVybjt9IGZpbmFsbHkge2lmIChfZCkgdGhyb3cgX2U7fX1yZXR1cm4gX2Fycjt9fWZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO31mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge3ZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvWyJAQGl0ZXJhdG9yIl07aWYgKCFpdCkge2lmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09ICJudW1iZXIiKSB7aWYgKGl0KSBvID0gaXQ7dmFyIGkgPSAwO3ZhciBGID0gZnVuY3Rpb24gRigpIHt9O3JldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7aWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTtyZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9O30sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7dGhyb3cgX2UyO30sIGY6IEYgfTt9dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpO312YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsZGlkRXJyID0gZmFsc2UsZXJyO3JldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7aXQgPSBpdC5jYWxsKG8pO30sIG46IGZ1bmN0aW9uIG4oKSB7dmFyIHN0ZXAgPSBpdC5uZXh0KCk7bm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtyZXR1cm4gc3RlcDt9LCBlOiBmdW5jdGlvbiBlKF9lMykge2RpZEVyciA9IHRydWU7ZXJyID0gX2UzO30sIGY6IGZ1bmN0aW9uIGYoKSB7dHJ5IHtpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbInJldHVybiJdICE9IG51bGwpIGl0WyJyZXR1cm4iXSgpO30gZmluYWxseSB7aWYgKGRpZEVycikgdGhyb3cgZXJyO319IH07fWZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtpZiAoIW8pIHJldHVybjtpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTt2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7aWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7aWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO31mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge2lmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO2ZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtyZXR1cm4gYXJyMjt9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge2lmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7dGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7fX1mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge3ZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07ZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO2Rlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO319ZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge2lmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO2lmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTtyZXR1cm4gQ29uc3RydWN0b3I7fWZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpO2lmIChrZXkgaW4gb2JqKSB7T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTt9IGVsc2Uge29ialtrZXldID0gdmFsdWU7fXJldHVybiBvYmo7fWZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykge3ZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCAic3RyaW5nIik7cmV0dXJuIFNldHRpbmdWYWxpZGF0b3JfdHlwZW9mKGtleSkgPT09ICJzeW1ib2wiID8ga2V5IDogU3RyaW5nKGtleSk7fWZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkge2lmIChTZXR0aW5nVmFsaWRhdG9yX3R5cGVvZihpbnB1dCkgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7dmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO2lmIChwcmltICE9PSB1bmRlZmluZWQpIHt2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7aWYgKFNldHRpbmdWYWxpZGF0b3JfdHlwZW9mKHJlcykgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzO3Rocm93IG5ldyBUeXBlRXJyb3IoIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuIik7fXJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTt9dmFyCgoKICAgICAgICAgIFNldHRpbmdWYWxpZGF0b3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge2Z1bmN0aW9uIFNldHRpbmdWYWxpZGF0b3IoKSB7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNldHRpbmdWYWxpZGF0b3IpO19kZWZpbmVQcm9wZXJ0eSh0aGlzLCAic2V0dGluZ3MiLAogICAgICAgICAgICAgIFtdKTtfZGVmaW5lUHJvcGVydHkodGhpcywgIm9iamVjdCIsCiAgICAgICAgICAgICAge30pO31fY3JlYXRlQ2xhc3MoU2V0dGluZ1ZhbGlkYXRvciwgW3sga2V5OiAiYWRkU2V0dGluZyIsIHZhbHVlOgoKICAgICAgICAgICAgICBmdW5jdGlvbiBhZGRTZXR0aW5nKHNldHRpbmcsIHNldFN0YXRlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzLnB1c2goW3NldHRpbmcsIHNldFN0YXRlXSk7CiAgICAgICAgICAgICAgfSB9LCB7IGtleTogInVwZGF0ZVNldHRpbmciLCB2YWx1ZToKCiAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlU2V0dGluZyhzZXR0aW5nKSB7CiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdFtzZXR0aW5nLnByZWZlcmVuY2VdID0gc2V0dGluZy52YWx1ZTsKICAgICAgICAgICAgICAgIHRoaXMuZG9WYWxpZGF0ZXMoKTsKICAgICAgICAgICAgICB9IH0sIHsga2V5OiAidXBkYXRlT2JqZWN0IiwgdmFsdWU6CgogICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9iamVjdCgpIHt2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoCiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MpLF9zdGVwO3RyeSB7Zm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHt2YXIgX3N0ZXAkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcC52YWx1ZSwgMSksc2V0dGluZyA9IF9zdGVwJHZhbHVlWzBdOwogICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0W3NldHRpbmcucHJlZmVyZW5jZV0gPSBzZXR0aW5nLnZhbHVlOwogICAgICAgICAgICAgICAgICB9fSBjYXRjaCAoZXJyKSB7X2l0ZXJhdG9yLmUoZXJyKTt9IGZpbmFsbHkge19pdGVyYXRvci5mKCk7fQogICAgICAgICAgICAgIH0gfSwgeyBrZXk6ICJkb1ZhbGlkYXRlcyIsIHZhbHVlOgoKICAgICAgICAgICAgICBmdW5jdGlvbiBkb1ZhbGlkYXRlcygpIHt2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKAogICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzKSxfc3RlcDI7dHJ5IHtmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge3ZhciBfc3RlcDIkdmFsdWUgPSBfc2xpY2VkVG9BcnJheShfc3RlcDIudmFsdWUsIDIpLHNldHRpbmcgPSBfc3RlcDIkdmFsdWVbMF0sc2V0VmFsaWQgPSBfc3RlcDIkdmFsdWVbMV07CiAgICAgICAgICAgICAgICAgICAgc2V0VmFsaWQodGhpcy5pc1ZhbGlkKHNldHRpbmcpKTsKICAgICAgICAgICAgICAgICAgfX0gY2F0Y2ggKGVycikge19pdGVyYXRvcjIuZShlcnIpO30gZmluYWxseSB7X2l0ZXJhdG9yMi5mKCk7fQogICAgICAgICAgICAgIH0gfSwgeyBrZXk6ICJpc1ZhbGlkIiwgdmFsdWU6CgogICAgICAgICAgICAgIGZ1bmN0aW9uIGlzVmFsaWQoc2V0dGluZykgewogICAgICAgICAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgICAgICAgc2V0dGluZy52YWxpZGF0ZSA9PSBudWxsIHx8IHNldHRpbmcudmFsaWRhdGUoc2V0dGluZy52YWx1ZSwgdGhpcy5vYmplY3QpKTsKCiAgICAgICAgICAgICAgfSB9XSk7cmV0dXJuIFNldHRpbmdWYWxpZGF0b3I7fSgpOwoKCiAgICAgICAgICAvKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovdmFyIGFwaV9TZXR0aW5nVmFsaWRhdG9yID0gU2V0dGluZ1ZhbGlkYXRvcjsKICAgICAgICAgIDsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcmVsYXkvY29tcG9uZW50cy9JbnRlcnJ1cHQudHN4CgoKCgogICAgICAgICAgZnVuY3Rpb24gSW50ZXJydXB0KF9yZWYpIHt2YXIgYnV0dG9uID0gX3JlZi5idXR0b247CiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovKAogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImlucHV0IiwgewogICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAiaW50ZXJydXB0IiwKICAgICAgICAgICAgICAgIHR5cGU6ICJzdWJtaXQiLAogICAgICAgICAgICAgICAgdmFsdWU6IGJ1dHRvbi5uYW1lLAogICAgICAgICAgICAgICAgImRhdGEtbmFtZSI6IGJ1dHRvbi5uYW1lLAogICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHsKICAgICAgICAgICAgICAgICAgc2V0UHJvcGVydGllcygKICAgICAgICAgICAgICAgICAgYnV0dG9uLmFjdGlvbnMubWFwKGZ1bmN0aW9uIChfcmVmMikge3ZhciBwcmVmZXJlbmNlID0gX3JlZjIucHJlZmVyZW5jZSx2YWx1ZSA9IF9yZWYyLnZhbHVlO3JldHVybiBbcHJlZmVyZW5jZSwgdmFsdWVdO30pKS4KICAgICAgICAgICAgICAgICAgdGhlbihmdW5jdGlvbiAoKSB7cmV0dXJuIGFkZE5vdGlmaWNhdGlvbihidXR0b24ubm90aWZpY2F0aW9uIHx8ICJJbnRlcnJ1cHRlZCEiKTt9KTsKICAgICAgICAgICAgICAgIH0gfSkpOwoKCiAgICAgICAgICB9CgogICAgICAgICAgLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqL3ZhciBjb21wb25lbnRzX0ludGVycnVwdCA9IEludGVycnVwdDsKICAgICAgICAgIDsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcmVsYXkvdHlwZXMvVHlwZXMudHN4CgoKICAgICAgICAgIHZhciBSZWxheUNvbXBvbmVudFR5cGU7KGZ1bmN0aW9uIChSZWxheUNvbXBvbmVudFR5cGUpIHtSZWxheUNvbXBvbmVudFR5cGVbIkJPT0xFQU4iXSA9ICJib29sZWFuIjtSZWxheUNvbXBvbmVudFR5cGVbIkRST1BET1dOIl0gPSAiZHJvcGRvd24iO1JlbGF5Q29tcG9uZW50VHlwZVsiU1RSSU5HIl0gPSAic3RyaW5nIjtSZWxheUNvbXBvbmVudFR5cGVbIkhUTUwiXSA9ICJodG1sIjtSZWxheUNvbXBvbmVudFR5cGVbIklOVEVSUlVQVCJdID0gImludGVycnVwdCI7UmVsYXlDb21wb25lbnRUeXBlWyJUQUdTIl0gPSAidGFncyI7fSkoUmVsYXlDb21wb25lbnRUeXBlIHx8IChSZWxheUNvbXBvbmVudFR5cGUgPSB7fSkpOwogICAgICAgICAgOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9yZWxheS9jb21wb25lbnRzL3NldHRpbmdzL0Jvb2xlYW5JbnB1dC50c3gKICAgICAgICAgIGZ1bmN0aW9uIEJvb2xlYW5JbnB1dF9zbGljZWRUb0FycmF5KGFyciwgaSkge3JldHVybiBCb29sZWFuSW5wdXRfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBCb29sZWFuSW5wdXRfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBCb29sZWFuSW5wdXRfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBCb29sZWFuSW5wdXRfbm9uSXRlcmFibGVSZXN0KCk7fWZ1bmN0aW9uIEJvb2xlYW5JbnB1dF9ub25JdGVyYWJsZVJlc3QoKSB7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTt9ZnVuY3Rpb24gQm9vbGVhbklucHV0X3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge2lmICghbykgcmV0dXJuO2lmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBCb29sZWFuSW5wdXRfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO3ZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pO2lmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIEJvb2xlYW5JbnB1dF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7fWZ1bmN0aW9uIEJvb2xlYW5JbnB1dF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7aWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7Zm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO3JldHVybiBhcnIyO31mdW5jdGlvbiBCb29sZWFuSW5wdXRfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7dmFyIF9pID0gbnVsbCA9PSBhcnIgPyBudWxsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbIkBAaXRlcmF0b3IiXTtpZiAobnVsbCAhPSBfaSkge3ZhciBfcyxfZSxfeCxfcixfYXJyID0gW10sX24gPSAhMCxfZCA9ICExO3RyeSB7aWYgKF94ID0gKF9pID0gX2kuY2FsbChhcnIpKS5uZXh0LCAwID09PSBpKSB7aWYgKE9iamVjdChfaSkgIT09IF9pKSByZXR1cm47X24gPSAhMTt9IGVsc2UgZm9yICg7ICEoX24gPSAoX3MgPSBfeC5jYWxsKF9pKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksIF9hcnIubGVuZ3RoICE9PSBpKTsgX24gPSAhMCk7fSBjYXRjaCAoZXJyKSB7X2QgPSAhMCwgX2UgPSBlcnI7fSBmaW5hbGx5IHt0cnkge2lmICghX24gJiYgbnVsbCAhPSBfaVsicmV0dXJuIl0gJiYgKF9yID0gX2lbInJldHVybiJdKCksIE9iamVjdChfcikgIT09IF9yKSkgcmV0dXJuO30gZmluYWxseSB7aWYgKF9kKSB0aHJvdyBfZTt9fXJldHVybiBfYXJyO319ZnVuY3Rpb24gQm9vbGVhbklucHV0X2FycmF5V2l0aEhvbGVzKGFycikge2lmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7fQoKCgogICAgICAgICAgZnVuY3Rpb24gQm9vbGVhbklucHV0KF9yZWYpIHt2YXIgYnV0dG9uID0gX3JlZi5idXR0b247CiAgICAgICAgICAgIHZhciBfdXNlU3RhdGUgPSAoMCwgcmVhY3QudXNlU3RhdGUpKGJ1dHRvbi52YWx1ZSA9PT0gInRydWUiKSxfdXNlU3RhdGUyID0gQm9vbGVhbklucHV0X3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSx2YWx1ZSA9IF91c2VTdGF0ZTJbMF0sc2V0VmFsdWUgPSBfdXNlU3RhdGUyWzFdOwoKICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8oCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgibGFiZWwiLCB7IGNsYXNzTmFtZTogImNoZWNrY29udGFpbmVyIiB9LCAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgiaW5wdXQiLCB7IHR5cGU6ICJoaWRkZW4iLCBuYW1lOiBidXR0b24ubmFtZSwgdmFsdWU6IGJ1dHRvbi52YWx1ZSB9KSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogInRvZ2dsZS10cmFjayIsCiAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgICAgICAgICBzZXRWYWx1ZSghdmFsdWUpOwogICAgICAgICAgICAgICAgICBidXR0b24uc2V0VmFsdWUoKCF2YWx1ZSkudG9TdHJpbmcoKSk7CiAgICAgICAgICAgICAgICB9IH0sIC8qI19fUFVSRV9fKi8KCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgic3BhbiIsIHsgY2xhc3NOYW1lOiAidG9nZ2xlLWluZGljYXRvciIgfSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCB7IGNsYXNzTmFtZTogImNoZWNrTWFyayIgfSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIHsKICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMjQgMjQiLAogICAgICAgICAgICAgICAgaWQ6ICJnaHEtc3ZnLWNoZWNrIiwKICAgICAgICAgICAgICAgIHJvbGU6ICJwcmVzZW50YXRpb24iLAogICAgICAgICAgICAgICAgImFyaWEtaGlkZGVuIjogInRydWUiIH0sIC8qI19fUFVSRV9fKi8KCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgicGF0aCIsIHsgZDogIk05Ljg2IDE4YTEgMSAwIDAxLS43My0uMzJsLTQuODYtNS4xN2ExLjAwMSAxLjAwMSAwIDAxMS40Ni0xLjM3bDQuMTIgNC4zOSA4LjQxLTkuMmExIDEgMCAxMTEuNDggMS4zNGwtOS4xNCAxMGExIDEgMCAwMS0uNzMuMzNoLS4wMXoiIH0pKSkpKSkpOwoKCgoKCgogICAgICAgICAgfQoKICAgICAgICAgIC8qCiAgICAgICAgICA8ZGl2CiAgICAgICAgICAgIGNsYXNzPSJjaGVja21hcmsiCiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHsKICAgICAgICAgICAgICBzZXRWYWx1ZSghdmFsdWUpOwogICAgICAgICAgICB9fQogICAgICAgICAgLz4KICAgICAgICAgICAqLwogICAgICAgICAgLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqL3ZhciBzZXR0aW5nc19Cb29sZWFuSW5wdXQgPSBCb29sZWFuSW5wdXQ7CiAgICAgICAgICA7IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3JlbGF5L2NvbXBvbmVudHMvc2V0dGluZ3MvRHJvcGRvd25JbnB1dC50c3gKCgoKICAgICAgICAgIGZ1bmN0aW9uIERyb3Bkb3duSW5wdXQoX3JlZikge3ZhciBidXR0b24gPSBfcmVmLmJ1dHRvbjsKICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi8oCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgic2VsZWN0IiwgewogICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAiZHJvcGRvd25jb250YWluZXIiLAogICAgICAgICAgICAgICAgbmFtZTogYnV0dG9uLm5hbWUsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGJ1dHRvbi52YWx1ZSwKICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7cmV0dXJuIGJ1dHRvbi5zZXRWYWx1ZShlLnRhcmdldC52YWx1ZSk7fSB9LAoKICAgICAgICAgICAgICBidXR0b24uZHJvcGRvd24ubWFwKGZ1bmN0aW9uIChvcHRpb24sIGluZGV4KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qLygKICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgib3B0aW9uIiwgeyBrZXk6IGluZGV4LCB2YWx1ZTogb3B0aW9uLnZhbHVlIH0sCiAgICAgICAgICAgICAgICAgIG9wdGlvbi5kaXNwbGF5IHx8IG9wdGlvbi52YWx1ZSkpOwoKCiAgICAgICAgICAgICAgfSkpKTsKCgogICAgICAgICAgfQoKICAgICAgICAgIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi92YXIgc2V0dGluZ3NfRHJvcGRvd25JbnB1dCA9IERyb3Bkb3duSW5wdXQ7CiAgICAgICAgICA7IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3JlbGF5L2NvbXBvbmVudHMvc2V0dGluZ3MvU3RyaW5nSW5wdXQudHN4CgoKCiAgICAgICAgICBmdW5jdGlvbiBTdHJpbmdJbnB1dChfcmVmKSB7dmFyIGJ1dHRvbiA9IF9yZWYuYnV0dG9uOwogICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qLygKICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogInN0cmluZ2NvbnRhaW5lciIsCiAgICAgICAgICAgICAgICBuYW1lOiBidXR0b24ubmFtZSwKICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogYnV0dG9uLnZhbHVlLAogICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IGJ1dHRvbi5wbGFjZWhvbGRlclRleHQgPyBidXR0b24ucGxhY2Vob2xkZXJUZXh0IDogIiIsCiAgICAgICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZSkge3JldHVybiBidXR0b24uc2V0VmFsdWUoZS50YXJnZXQudmFsdWUpO30gfSkpOwoKCiAgICAgICAgICB9CgogICAgICAgICAgLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqL3ZhciBzZXR0aW5nc19TdHJpbmdJbnB1dCA9IFN0cmluZ0lucHV0OwogICAgICAgICAgOyAvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9yZWxheS9jb21wb25lbnRzL3NldHRpbmdzL1RhZ3NJbnB1dC50c3gKICAgICAgICAgIGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtyZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IFRhZ3NJbnB1dF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO31mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7fWZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge2lmICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyWyJAQGl0ZXJhdG9yIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7fWZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gVGFnc0lucHV0X2FycmF5TGlrZVRvQXJyYXkoYXJyKTt9ZnVuY3Rpb24gVGFnc0lucHV0X3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7cmV0dXJuIFRhZ3NJbnB1dF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IFRhZ3NJbnB1dF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IFRhZ3NJbnB1dF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IFRhZ3NJbnB1dF9ub25JdGVyYWJsZVJlc3QoKTt9ZnVuY3Rpb24gVGFnc0lucHV0X25vbkl0ZXJhYmxlUmVzdCgpIHt0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpO31mdW5jdGlvbiBUYWdzSW5wdXRfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7aWYgKCFvKSByZXR1cm47aWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIFRhZ3NJbnB1dF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7dmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO2lmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO2lmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7aWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gVGFnc0lucHV0X2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTt9ZnVuY3Rpb24gVGFnc0lucHV0X2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07cmV0dXJuIGFycjI7fWZ1bmN0aW9uIFRhZ3NJbnB1dF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHt2YXIgX2kgPSBudWxsID09IGFyciA/IG51bGwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgU3ltYm9sICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFyclsiQEBpdGVyYXRvciJdO2lmIChudWxsICE9IF9pKSB7dmFyIF9zLF9lLF94LF9yLF9hcnIgPSBbXSxfbiA9ICEwLF9kID0gITE7dHJ5IHtpZiAoX3ggPSAoX2kgPSBfaS5jYWxsKGFycikpLm5leHQsIDAgPT09IGkpIHtpZiAoT2JqZWN0KF9pKSAhPT0gX2kpIHJldHVybjtfbiA9ICExO30gZWxzZSBmb3IgKDsgIShfbiA9IChfcyA9IF94LmNhbGwoX2kpKS5kb25lKSAmJiAoX2Fyci5wdXNoKF9zLnZhbHVlKSwgX2Fyci5sZW5ndGggIT09IGkpOyBfbiA9ICEwKTt9IGNhdGNoIChlcnIpIHtfZCA9ICEwLCBfZSA9IGVycjt9IGZpbmFsbHkge3RyeSB7aWYgKCFfbiAmJiBudWxsICE9IF9pWyJyZXR1cm4iXSAmJiAoX3IgPSBfaVsicmV0dXJuIl0oKSwgT2JqZWN0KF9yKSAhPT0gX3IpKSByZXR1cm47fSBmaW5hbGx5IHtpZiAoX2QpIHRocm93IF9lO319cmV0dXJuIF9hcnI7fX1mdW5jdGlvbiBUYWdzSW5wdXRfYXJyYXlXaXRoSG9sZXMoYXJyKSB7aWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjt9CgoKICAgICAgICAgIHZhciBDbG9zZUljb24gPSBmdW5jdGlvbiBDbG9zZUljb24oKSB7CiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovKAogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInN2ZyIsIHsgaGVpZ2h0OiAiMjAiLCB3aWR0aDogIjIwIiwgdmlld0JveDogIjAgMCAyMCAyMCIgfSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInBhdGgiLCB7IGQ6ICJNMTQuMzQ4IDE0Ljg0OWMtMC40NjkgMC40NjktMS4yMjkgMC40NjktMS42OTcgMGwtMi42NTEtMy4wMzAtMi42NTEgMy4wMjljLTAuNDY5IDAuNDY5LTEuMjI5IDAuNDY5LTEuNjk3IDAtMC40NjktMC40NjktMC40NjktMS4yMjkgMC0xLjY5N2wyLjc1OC0zLjE1LTIuNzU5LTMuMTUyYy0wLjQ2OS0wLjQ2OS0wLjQ2OS0xLjIyOCAwLTEuNjk3czEuMjI4LTAuNDY5IDEuNjk3IDBsMi42NTIgMy4wMzEgMi42NTEtMy4wMzFjMC40NjktMC40NjkgMS4yMjgtMC40NjkgMS42OTcgMHMwLjQ2OSAxLjIyOSAwIDEuNjk3bC0yLjc1OCAzLjE1MiAyLjc1OCAzLjE1YzAuNDY5IDAuNDY5IDAuNDY5IDEuMjI5IDAgMS42OTh6IiB9KSkpOwoKCiAgICAgICAgICB9OwoKICAgICAgICAgIHZhciBtYXBWYWx1ZXNUb0Rpc3BsYXkgPSBmdW5jdGlvbiBtYXBWYWx1ZXNUb0Rpc3BsYXkoYnV0dG9uLCB2YWx1ZXMpIHsKICAgICAgICAgICAgdmFyIHRhZ3MgPSBbXTsKCiAgICAgICAgICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5kcm9wZG93biA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0YWdzLnB1c2goeyBkaXNwbGF5OiB2LCB2YWx1ZTogdiB9KTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhciBkcm9wID0gYnV0dG9uLmRyb3Bkb3duLmZpbmQoCiAgICAgICAgICAgICAgZnVuY3Rpb24gKGQpIHtyZXR1cm4gZC52YWx1ZS50b0xvd2VyQ2FzZSgpID09IHYudG9Mb3dlckNhc2UoKTt9KTsKCgogICAgICAgICAgICAgIGlmIChkcm9wID09IG51bGwpIHsKICAgICAgICAgICAgICAgIHRhZ3MucHVzaCh7IGRpc3BsYXk6IHYsIHZhbHVlOiB2IH0pOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdGFncy5wdXNoKGRyb3ApOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldHVybiB0YWdzOwogICAgICAgICAgfTsKCiAgICAgICAgICB2YXIgVGFnc0lucHV0ID0gZnVuY3Rpb24gVGFnc0lucHV0KF9yZWYpIHt2YXIgYnV0dG9uID0gX3JlZi5idXR0b247CiAgICAgICAgICAgIHZhciBfUmVhY3QkdXNlU3RhdGUgPSByZWFjdC51c2VTdGF0ZSgKICAgICAgICAgICAgICBtYXBWYWx1ZXNUb0Rpc3BsYXkoCiAgICAgICAgICAgICAgYnV0dG9uLAogICAgICAgICAgICAgIGJ1dHRvbi52YWx1ZS5zcGxpdChidXR0b24udGFnc1NlcGVyYXRvcikuZmlsdGVyKGZ1bmN0aW9uIChzKSB7cmV0dXJuIHMubGVuZ3RoID4gMDt9KSkpLF9SZWFjdCR1c2VTdGF0ZTIgPSBUYWdzSW5wdXRfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLHRhZ3MgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLHNldFRhZ3MgPSBfUmVhY3QkdXNlU3RhdGUyWzFdOwoKCgogICAgICAgICAgICB2YXIgYWRkVGFnID0gZnVuY3Rpb24gYWRkVGFnKHRhZykgewogICAgICAgICAgICAgIHNldFNlYXJjaFZhbHVlKCIiKTsKICAgICAgICAgICAgICBzZXRUYWdzKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGFncyksIFt0YWddKSk7CgogICAgICAgICAgICAgIHZhciB2YWxzID0gYnV0dG9uLnZhbHVlLgogICAgICAgICAgICAgIHNwbGl0KGJ1dHRvbi50YWdzU2VwZXJhdG9yKS4KICAgICAgICAgICAgICBmaWx0ZXIoZnVuY3Rpb24gKHMpIHtyZXR1cm4gcy5sZW5ndGggPiAwO30pOwogICAgICAgICAgICAgIHZhbHMucHVzaCh0YWcudmFsdWUpOwoKICAgICAgICAgICAgICBidXR0b24uc2V0VmFsdWUodmFscy5qb2luKGJ1dHRvbi50YWdzU2VwZXJhdG9yKSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyBBZGQgb3IgcmVtb3ZlIHRhZ3MgYnkgdXNpbmcgdGhlIGtleQogICAgICAgICAgICB2YXIgaGFuZGxlVGFncyA9IGZ1bmN0aW9uIGhhbmRsZVRhZ3MoZXZlbnQpIHsKICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAiRW50ZXIiICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUgIT09ICIiKSB7CiAgICAgICAgICAgICAgICB2YXIgZHJvcGRvd25WYWx1ZSA9CiAgICAgICAgICAgICAgICBidXR0b24uZHJvcGRvd24gIT0gbnVsbCA/CiAgICAgICAgICAgICAgICBidXR0b24uZHJvcGRvd24uZmluZCgKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkKSB7cmV0dXJuICgKICAgICAgICAgICAgICAgICAgICBkLmRpc3BsYXkudG9Mb3dlckNhc2UoKSA9PQogICAgICAgICAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUudG9Mb3dlckNhc2UoKSk7fSkgOgoKICAgICAgICAgICAgICAgIG51bGw7CgogICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5kcm9wZG93biAhPSBudWxsICYmIGRyb3Bkb3duVmFsdWUgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHZhbCA9CiAgICAgICAgICAgICAgICBkcm9wZG93blZhbHVlICE9IG51bGwgPyBkcm9wZG93blZhbHVlLnZhbHVlIDogZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbi5hbGxvd0R1cGxpY2F0ZVRhZ3MpIHsKICAgICAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgICBidXR0b24udmFsdWUuCiAgICAgICAgICAgICAgICAgIHNwbGl0KGJ1dHRvbi50YWdzU2VwZXJhdG9yKS4KICAgICAgICAgICAgICAgICAgZmluZChmdW5jdGlvbiAoZCkge3JldHVybiBkLnRvTG93ZXJDYXNlKCkgPT0gdmFsLnRvTG93ZXJDYXNlKCk7fSkgIT0gbnVsbCkKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGFkZFRhZygKICAgICAgICAgICAgICAgIGRyb3Bkb3duVmFsdWUgIT0gbnVsbCA/IGRyb3Bkb3duVmFsdWUgOiB7IGRpc3BsYXk6IHZhbCwgdmFsdWU6IHZhbCB9KTsKCiAgICAgICAgICAgICAgfSBlbHNlIGlmICgKICAgICAgICAgICAgICBldmVudC5rZXkgPT09ICJCYWNrc3BhY2UiICYmCiAgICAgICAgICAgICAgdGFncy5sZW5ndGggJiYKICAgICAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHNldFNlYXJjaFZhbHVlKHRhZ3NbdGFncy5sZW5ndGggLSAxXS5kaXNwbGF5KTsKCiAgICAgICAgICAgICAgICB2YXIgdGFnc0NvcHkgPSBfdG9Db25zdW1hYmxlQXJyYXkodGFncyk7CiAgICAgICAgICAgICAgICB0YWdzQ29weS5wb3AoKTsKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBzZXRUYWdzKHRhZ3NDb3B5KTsKCiAgICAgICAgICAgICAgICB2YXIgdmFscyA9IGJ1dHRvbi52YWx1ZS4KICAgICAgICAgICAgICAgIHNwbGl0KGJ1dHRvbi50YWdzU2VwZXJhdG9yKS4KICAgICAgICAgICAgICAgIGZpbHRlcihmdW5jdGlvbiAocykge3JldHVybiBzLmxlbmd0aCA+IDA7fSk7CiAgICAgICAgICAgICAgICB2YWxzLnBvcCgpOwogICAgICAgICAgICAgICAgYnV0dG9uLnNldFZhbHVlKHZhbHMuam9pbihidXR0b24udGFnc1NlcGVyYXRvcikpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vUmVtb3ZlIHRhZ3MgYnkgY2xpY2tpbmcgdGhlIGNyb3NzIHNpZ24KICAgICAgICAgICAgdmFyIHJlbW92ZVRhZ3MgPSBmdW5jdGlvbiByZW1vdmVUYWdzKGluZGV4KSB7CiAgICAgICAgICAgICAgc2V0VGFncyhfdG9Db25zdW1hYmxlQXJyYXkodGFncy5maWx0ZXIoZnVuY3Rpb24gKHRhZywgaW5kKSB7cmV0dXJuIGluZCAhPT0gaW5kZXg7fSkpKTsKCiAgICAgICAgICAgICAgdmFyIHZhbHMgPSBidXR0b24udmFsdWUuCiAgICAgICAgICAgICAgc3BsaXQoYnV0dG9uLnRhZ3NTZXBlcmF0b3IpLgogICAgICAgICAgICAgIGZpbHRlcihmdW5jdGlvbiAocykge3JldHVybiBzLmxlbmd0aCA+IDA7fSkuCiAgICAgICAgICAgICAgZmlsdGVyKGZ1bmN0aW9uICh2LCBpbmQpIHtyZXR1cm4gaW5kICE9PSBpbmRleDt9KTsKCiAgICAgICAgICAgICAgYnV0dG9uLnNldFZhbHVlKHZhbHMuam9pbihidXR0b24udGFnc1NlcGVyYXRvcikpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIF91c2VTdGF0ZSA9ICgwLCByZWFjdC51c2VTdGF0ZSkoZmFsc2UpLF91c2VTdGF0ZTIgPSBUYWdzSW5wdXRfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLHNob3dNZW51ID0gX3VzZVN0YXRlMlswXSxzZXRTaG93TWVudSA9IF91c2VTdGF0ZTJbMV07CiAgICAgICAgICAgIHZhciBfdXNlU3RhdGUzID0gKDAsIHJlYWN0LnVzZVN0YXRlKSgiIiksX3VzZVN0YXRlNCA9IFRhZ3NJbnB1dF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTMsIDIpLHNlYXJjaFZhbHVlID0gX3VzZVN0YXRlNFswXSxzZXRTZWFyY2hWYWx1ZSA9IF91c2VTdGF0ZTRbMV07CiAgICAgICAgICAgIHZhciBzZWFyY2hSZWYgPSAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlUmVmKCk7CiAgICAgICAgICAgIHZhciBzZWFyY2hDb250YWluZXJSZWYgPSAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlUmVmKCk7CiAgICAgICAgICAgIHZhciBpbnB1dFJlZiA9IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVSZWYoKTsKICAgICAgICAgICAgdmFyIF91c2VTdGF0ZTUgPSAoMCwgcmVhY3QudXNlU3RhdGUpKC0xKSxfdXNlU3RhdGU2ID0gVGFnc0lucHV0X3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksaW5zZXJ0SW5kZXhBdCA9IF91c2VTdGF0ZTZbMF0sc2V0SW5zZXJ0SW5kZXhBdCA9IF91c2VTdGF0ZTZbMV07CiAgICAgICAgICAgIHZhciBfdXNlU3RhdGU3ID0gKDAsIHJlYWN0LnVzZVN0YXRlKSgtMSksX3VzZVN0YXRlOCA9IFRhZ3NJbnB1dF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTcsIDIpLGRyYWdnZWRJdGVtID0gX3VzZVN0YXRlOFswXSxzZXREcmFnZ2VkSXRlbSA9IF91c2VTdGF0ZThbMV07CiAgICAgICAgICAgIHZhciBfdXNlU3RhdGU5ID0gKDAsIHJlYWN0LnVzZVN0YXRlKSgtMSksX3VzZVN0YXRlMTAgPSBUYWdzSW5wdXRfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU5LCAyKSxsYXN0SW5zZXJ0ZWQgPSBfdXNlU3RhdGUxMFswXSxzZXRMYXN0SW5zZXJ0ZWQgPSBfdXNlU3RhdGUxMFsxXTsKICAgICAgICAgICAgdmFyIF91c2VTdGF0ZTExID0gKDAsIHJlYWN0LnVzZVN0YXRlKSgwKSxfdXNlU3RhdGUxMiA9IFRhZ3NJbnB1dF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTExLCAyKSxkcmFnZ2VkV2lkdGggPSBfdXNlU3RhdGUxMlswXSxzZXREcmFnZ2VkV2lkdGggPSBfdXNlU3RhdGUxMlsxXTsKICAgICAgICAgICAgdmFyIF91c2VTdGF0ZTEzID0gKDAsIHJlYWN0LnVzZVN0YXRlKSgwKSxfdXNlU3RhdGUxNCA9IFRhZ3NJbnB1dF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZTEzLCAyKSxkcmFnZ2VkSGVpZ2h0ID0gX3VzZVN0YXRlMTRbMF0sc2V0RHJhZ2dlZEhlaWdodCA9IF91c2VTdGF0ZTE0WzFdOwoKICAgICAgICAgICAgKDAsIHJlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIGlmIChzaG93TWVudSAmJiBzZWFyY2hSZWYuY3VycmVudCkgewogICAgICAgICAgICAgICAgc2VhcmNoUmVmLmN1cnJlbnQuZm9jdXMoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIFtzaG93TWVudV0pOwoKICAgICAgICAgICAgdmFyIG9uQWRkVGFnID0gZnVuY3Rpb24gb25BZGRUYWcob3B0aW9uKSB7CiAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICFidXR0b24uYWxsb3dEdXBsaWNhdGVUYWdzICYmCiAgICAgICAgICAgICAgdGFncy5maW5kKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgICB0LnZhbHVlID09IG9wdGlvbi52YWx1ZTsKICAgICAgICAgICAgICB9KSkKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBhZGRUYWcob3B0aW9uKTsKCiAgICAgICAgICAgICAgaWYgKHNlYXJjaFJlZi5jdXJyZW50ICE9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHsKICAgICAgICAgICAgICAgIHNldFNob3dNZW51KGZhbHNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YXIgb25TZWFyY2ggPSBmdW5jdGlvbiBvblNlYXJjaChlKSB7CiAgICAgICAgICAgICAgc2V0U2VhcmNoVmFsdWUoZS50YXJnZXQudmFsdWUpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIGdldE9wdGlvbnMgPSBmdW5jdGlvbiBnZXRPcHRpb25zKCkgewogICAgICAgICAgICAgIHZhciBvcHRzID0gYnV0dG9uLmFsbG93RHVwbGljYXRlVGFncyA/CiAgICAgICAgICAgICAgYnV0dG9uLmRyb3Bkb3duIDoKICAgICAgICAgICAgICBidXR0b24uZHJvcGRvd24uZmlsdGVyKGZ1bmN0aW9uIChkKSB7cmV0dXJuICF0YWdzLmluY2x1ZGVzKGQpO30pOwoKICAgICAgICAgICAgICBpZiAoIXNlYXJjaFZhbHVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb3B0czsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBvcHRzLmZpbHRlcigKICAgICAgICAgICAgICBmdW5jdGlvbiAob3B0aW9uKSB7cmV0dXJuICgKICAgICAgICAgICAgICAgICAgb3B0aW9uLmRpc3BsYXkudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaFZhbHVlLnRvTG93ZXJDYXNlKCkpID49IDApO30pOwoKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciBkcm9wZG93bkZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uIGRyb3Bkb3duRm9jdXNIYW5kbGVyKGUpIHsKICAgICAgICAgICAgICBpZiAoc2VhcmNoQ29udGFpbmVyUmVmLmN1cnJlbnQgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKCEoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIE5vZGUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoc2VhcmNoQ29udGFpbmVyUmVmLmN1cnJlbnQuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHNldFNob3dNZW51KGZhbHNlKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICgwLCByZWFjdC51c2VFZmZlY3QpKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbiAoZSkge3JldHVybiBkcm9wZG93bkZvY3VzSGFuZGxlcihlLnRhcmdldCk7fSk7CgogICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbiAoZSkge3JldHVybiAoCiAgICAgICAgICAgICAgICAgICAgZHJvcGRvd25Gb2N1c0hhbmRsZXIoZS50YXJnZXQpKTt9KTsKCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YXIgdXBkYXRlSW5kZXhJbnNlcnQgPSBmdW5jdGlvbiB1cGRhdGVJbmRleEluc2VydChlKSB7dmFyIF90YWckZ2V0QXR0cmlidXRlOwogICAgICAgICAgICAgIGlmIChpbnB1dFJlZi5jdXJyZW50ID09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhciB0YWcgPSBlLmN1cnJlbnRUYXJnZXQ7CiAgICAgICAgICAgICAgdmFyIHRhZ0lkID0gKygoX3RhZyRnZXRBdHRyaWJ1dGUgPSB0YWcuZ2V0QXR0cmlidXRlKCJkYXRhLWtleSIpKSAhPT0gbnVsbCAmJiBfdGFnJGdldEF0dHJpYnV0ZSAhPT0gdm9pZCAwID8gX3RhZyRnZXRBdHRyaWJ1dGUgOiAtMTApOwoKICAgICAgICAgICAgICB2YXIgYiA9CiAgICAgICAgICAgICAgdGFnLnF1ZXJ5U2VsZWN0b3IoIi5zZXR0aW5nVGFnU2luZ2xlIikuCiAgICAgICAgICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IGUuY2xpZW50WCAtIChiLmxlZnQgKyBiLndpZHRoIC8gMik7CgogICAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gMCkgewogICAgICAgICAgICAgICAgdGFnSWQrKzsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHNldEluc2VydEluZGV4QXQodGFnSWQpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIGRyYWdFbmQgPSBmdW5jdGlvbiBkcmFnRW5kKCkgewogICAgICAgICAgICAgIGlmIChkcmFnZ2VkSXRlbSA9PSAtMSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKGluc2VydEluZGV4QXQgLSAxICE9IGRyYWdnZWRJdGVtICYmIGluc2VydEluZGV4QXQgIT0gZHJhZ2dlZEl0ZW0pIHsKICAgICAgICAgICAgICAgIHZhciBuZXdJbmRleCA9IGluc2VydEluZGV4QXQ7CiAgICAgICAgICAgICAgICB2YXIgbmV3VGFncyA9IF90b0NvbnN1bWFibGVBcnJheSh0YWdzKTsKICAgICAgICAgICAgICAgIG5ld1RhZ3Muc3BsaWNlKGRyYWdnZWRJdGVtLCAxKTsKICAgICAgICAgICAgICAgIG5ld1RhZ3Muc3BsaWNlKAogICAgICAgICAgICAgICAgbmV3SW5kZXggLSAoZHJhZ2dlZEl0ZW0gPCBuZXdJbmRleCA/IDEgOiAwKSwKICAgICAgICAgICAgICAgIDAsCiAgICAgICAgICAgICAgICB0YWdzW2RyYWdnZWRJdGVtXSk7CgoKICAgICAgICAgICAgICAgIHNldFRhZ3MobmV3VGFncyk7CiAgICAgICAgICAgICAgICBzZXRMYXN0SW5zZXJ0ZWQobmV3SW5kZXggLSAoZHJhZ2dlZEl0ZW0gPCBuZXdJbmRleCA/IDEgOiAwKSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNldExhc3RJbnNlcnRlZCgtMSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBzZXREcmFnZ2VkSXRlbSgtMSk7CiAgICAgICAgICAgICAgc2V0SW5zZXJ0SW5kZXhBdCgtMSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YXIgc3RyaW5nVG9Db2xvdXIgPSBmdW5jdGlvbiBzdHJpbmdUb0NvbG91cihzdHIpIHsKICAgICAgICAgICAgICB2YXIgaGFzaCA9IDA7CgogICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBoYXNoID0gc3RyLmNoYXJDb2RlQXQoaSkgKyAoKGhhc2ggPDwgNSkgLSBoYXNoKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZhciBjb2xvdXIgPSAiIyI7CgogICAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IDM7IF9pMisrKSB7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBoYXNoID4+IF9pMiAqIDggJiAweGZmOwogICAgICAgICAgICAgICAgY29sb3VyICs9ICgiMDAiICsgdmFsdWUudG9TdHJpbmcoMTYpKS5zdWJzdHIoLTIpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIGNvbG91cjsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovKAogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsgY2xhc3NOYW1lOiAic2V0dGluZ1RhZyIsIHJlZjogaW5wdXRSZWYgfSwKICAgICAgICAgICAgICB0YWdzLm1hcChmdW5jdGlvbiAodGFnLCBpbmRleCkge3JldHVybiAvKiNfX1BVUkVfXyovKAogICAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0LkZyYWdtZW50LCB7IGtleTogIiIuY29uY2F0KHRhZy5kaXNwbGF5LCAiICIpLmNvbmNhdCh0YWcudmFsdWUsICIgIikuY29uY2F0KGluZGV4KSB9LAogICAgICAgICAgICAgICAgICBkcmFnZ2VkSXRlbSA+PSAwICYmCiAgICAgICAgICAgICAgICAgIGluZGV4ID09IDAgJiYKICAgICAgICAgICAgICAgICAgaW5kZXggPT0gaW5zZXJ0SW5kZXhBdCAmJgogICAgICAgICAgICAgICAgICBpbnNlcnRJbmRleEF0ICE9IGRyYWdnZWRJdGVtICYmCiAgICAgICAgICAgICAgICAgIGRyYWdnZWRJdGVtICE9IGluc2VydEluZGV4QXQgLSAxID8gLyojX19QVVJFX18qLwogICAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAiaGludFRhZ0Ryb3AiLAogICAgICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI6IGZ1bmN0aW9uIG9uRHJhZ092ZXIoZSkgewogICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBkcmFnZ2VkV2lkdGggKyAicHgiLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBkcmFnZ2VkSGVpZ2h0ICsgInB4IgogICAgICAgICAgICAgICAgICAgIH0gfSkgOiAvKiNfX1BVUkVfXyovCgoKICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudChyZWFjdC5GcmFnbWVudCwgbnVsbCksCgogICAgICAgICAgICAgICAgICBkcmFnZ2VkSXRlbSA9PSBpbmRleCA/IC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogImhpbnRUYWdEcm9wIGhpbnRUYWdEcm9wT3JpZ2luYWwiLAogICAgICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI6IGZ1bmN0aW9uIG9uRHJhZ092ZXIoZSkgewogICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBkcmFnZ2VkV2lkdGggKyAicHgiLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBkcmFnZ2VkSGVpZ2h0ICsgInB4IiwKICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6CiAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRJbmRleEF0ID09IGluZGV4IHx8IGluc2VydEluZGV4QXQgLSAxID09IGluZGV4ID8KICAgICAgICAgICAgICAgICAgICAgICJpbmxpbmUiIDoKICAgICAgICAgICAgICAgICAgICAgICJub25lIgogICAgICAgICAgICAgICAgICAgIH0gfSkgOiAvKiNfX1BVUkVfXyovCgoKICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudChyZWFjdC5GcmFnbWVudCwgbnVsbCksIC8qI19fUFVSRV9fKi8KCiAgICAgICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgb25EcmFnU3RhcnQ6IGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGUpIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSBpbmRleDsKICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSAxMDsKICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlLmN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gMjsKCiAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0SW5zZXJ0SW5kZXhBdChpbmQpOwogICAgICAgICAgICAgICAgICAgICAgICBzZXREcmFnZ2VkSXRlbShpbmQpOwogICAgICAgICAgICAgICAgICAgICAgICBzZXREcmFnZ2VkV2lkdGgod2lkKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0RHJhZ2dlZEhlaWdodChoZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvbkRyYWdFbmQ6IGZ1bmN0aW9uIG9uRHJhZ0VuZCgpIHsKICAgICAgICAgICAgICAgICAgICAgIGRyYWdFbmQoKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI6IGZ1bmN0aW9uIG9uRHJhZ092ZXIoZSkgewogICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUluZGV4SW5zZXJ0KGUpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImRhdGEta2V5IjogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAidGFnQ29udGFpbmVyIiArIChkcmFnZ2VkSXRlbSA9PSBpbmRleCA/ICIgaGlkZGVuIiA6ICIiKSB9LCAvKiNfX1BVUkVfXyovCgogICAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOgogICAgICAgICAgICAgICAgICAgICJzZXR0aW5nVGFnU2luZ2xlIiArICgKICAgICAgICAgICAgICAgICAgICBpbmRleCA9PSBkcmFnZ2VkSXRlbSA/ICIgZHJhZ2dlZEl0ZW0iIDogIiIpICsgKAogICAgICAgICAgICAgICAgICAgIGxhc3RJbnNlcnRlZCA9PSBpbmRleCA/ICIgcmVhcnJhbmdlZFRhZyIgOiAiIiksCgogICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICIiLmNvbmNhdChzdHJpbmdUb0NvbG91cigiIi5jb25jYXQoCiAgICAgICAgICAgICAgICAgICAgICB0YWcuZGlzcGxheSwgIiAiKS5jb25jYXQodGFnLnZhbHVlKSksICIyMiIpCgogICAgICAgICAgICAgICAgICAgIH0gfSwgLyojX19QVVJFX18qLwoKICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgic3BhbiIsIG51bGwsIHRhZy5kaXNwbGF5KSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAic2V0dGluZ1RhZ0Nsb3NlIiwKICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge3JldHVybiByZW1vdmVUYWdzKGluZGV4KTt9IH0sIC8qI19fUFVSRV9fKi8KCiAgICAgICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoQ2xvc2VJY29uLCBudWxsKSkpKSwKCgoKICAgICAgICAgICAgICAgICAgZHJhZ2dlZEl0ZW0gPj0gMCAmJgogICAgICAgICAgICAgICAgICBpbmRleCArIDEgPT0gaW5zZXJ0SW5kZXhBdCAmJgogICAgICAgICAgICAgICAgICBkcmFnZ2VkSXRlbSArIDEgIT0gaW5zZXJ0SW5kZXhBdCAmJgogICAgICAgICAgICAgICAgICBkcmFnZ2VkSXRlbSAhPSBpbnNlcnRJbmRleEF0ID8gLyojX19QVVJFX18qLwogICAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAiaGludFRhZ0Ryb3AiLAogICAgICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI6IGZ1bmN0aW9uIG9uRHJhZ092ZXIoZSkgewogICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBkcmFnZ2VkV2lkdGggKyAicHgiLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBkcmFnZ2VkSGVpZ2h0ICsgInB4IgogICAgICAgICAgICAgICAgICAgIH0gfSkgOiAvKiNfX1BVUkVfXyovCgoKICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudChyZWFjdC5GcmFnbWVudCwgbnVsbCkpKTt9KSwgLyojX19QVVJFX18qLwoKCgogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAgICAgICAgIHJlZjogc2VhcmNoQ29udGFpbmVyUmVmLAogICAgICAgICAgICAgICAgY2xhc3NOYW1lOgogICAgICAgICAgICAgICAgInNldHRpbmdUYWdJbnB1dCIgKyAoCiAgICAgICAgICAgICAgICBidXR0b24ubWF4VGFncyAmJiB0YWdzLmxlbmd0aCA+PSBwYXJzZUludChidXR0b24ubWF4VGFncykgPwogICAgICAgICAgICAgICAgIiBoaWRkZW4iIDoKICAgICAgICAgICAgICAgICIiKSB9LCAvKiNfX1BVUkVfXyovCgoKICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICBvbkNoYW5nZTogb25TZWFyY2gsCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogYnV0dG9uLnBsYWNlaG9sZGVyVGV4dCA/IGJ1dHRvbi5wbGFjZWhvbGRlclRleHQgOiAiIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBzZWFyY2hWYWx1ZSwKICAgICAgICAgICAgICAgIHJlZjogc2VhcmNoUmVmLAogICAgICAgICAgICAgICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cygpIHtyZXR1cm4gc2V0U2hvd01lbnUodHJ1ZSk7fSwKICAgICAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKGV2ZW50KSB7cmV0dXJuIGhhbmRsZVRhZ3MoZXZlbnQpO30sCiAgICAgICAgICAgICAgICBzaXplOiAxMCB9KSksCgoKCiAgICAgICAgICAgICAgYnV0dG9uLmRyb3Bkb3duID09IG51bGwgPyAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudChyZWFjdC5GcmFnbWVudCwgbnVsbCkgOiAvKiNfX1BVUkVfXyovCgogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQocmVhY3QuRnJhZ21lbnQsIG51bGwsCiAgICAgICAgICAgICAgc2hvd01lbnUgJiYgZ2V0T3B0aW9ucygpLmxlbmd0aCA+IDAgJiYgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsgY2xhc3NOYW1lOiAiZHJvcGRvd25NZW51IiB9LAogICAgICAgICAgICAgIGdldE9wdGlvbnMoKS5tYXAoZnVuY3Rpb24gKG9wdGlvbiwgaW5kZXgpIHtyZXR1cm4gLyojX19QVVJFX18qLygKICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHtyZXR1cm4gb25BZGRUYWcob3B0aW9uKTt9LAogICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogImRyb3Bkb3duSXRlbSIgfSwKCiAgICAgICAgICAgICAgICAgIG9wdGlvbi5kaXNwbGF5KSk7fSkpKSkpKTsKCgoKCgoKCgoKICAgICAgICAgIH07CgogICAgICAgICAgLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqL3ZhciBzZXR0aW5nc19UYWdzSW5wdXQgPSBUYWdzSW5wdXQ7CiAgICAgICAgICA7IC8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3JlbGF5L2NvbXBvbmVudHMvc2V0dGluZ3MvU2V0dGluZy50c3gKICAgICAgICAgIGZ1bmN0aW9uIFNldHRpbmdfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtyZXR1cm4gU2V0dGluZ19hcnJheVdpdGhIb2xlcyhhcnIpIHx8IFNldHRpbmdfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBTZXR0aW5nX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgU2V0dGluZ19ub25JdGVyYWJsZVJlc3QoKTt9ZnVuY3Rpb24gU2V0dGluZ19ub25JdGVyYWJsZVJlc3QoKSB7dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTt9ZnVuY3Rpb24gU2V0dGluZ191bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtpZiAoIW8pIHJldHVybjtpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gU2V0dGluZ19hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7dmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO2lmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO2lmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7aWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gU2V0dGluZ19hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7fWZ1bmN0aW9uIFNldHRpbmdfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge2lmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO2ZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtyZXR1cm4gYXJyMjt9ZnVuY3Rpb24gU2V0dGluZ19pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHt2YXIgX2kgPSBudWxsID09IGFyciA/IG51bGwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgU3ltYm9sICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFyclsiQEBpdGVyYXRvciJdO2lmIChudWxsICE9IF9pKSB7dmFyIF9zLF9lLF94LF9yLF9hcnIgPSBbXSxfbiA9ICEwLF9kID0gITE7dHJ5IHtpZiAoX3ggPSAoX2kgPSBfaS5jYWxsKGFycikpLm5leHQsIDAgPT09IGkpIHtpZiAoT2JqZWN0KF9pKSAhPT0gX2kpIHJldHVybjtfbiA9ICExO30gZWxzZSBmb3IgKDsgIShfbiA9IChfcyA9IF94LmNhbGwoX2kpKS5kb25lKSAmJiAoX2Fyci5wdXNoKF9zLnZhbHVlKSwgX2Fyci5sZW5ndGggIT09IGkpOyBfbiA9ICEwKTt9IGNhdGNoIChlcnIpIHtfZCA9ICEwLCBfZSA9IGVycjt9IGZpbmFsbHkge3RyeSB7aWYgKCFfbiAmJiBudWxsICE9IF9pWyJyZXR1cm4iXSAmJiAoX3IgPSBfaVsicmV0dXJuIl0oKSwgT2JqZWN0KF9yKSAhPT0gX3IpKSByZXR1cm47fSBmaW5hbGx5IHtpZiAoX2QpIHRocm93IF9lO319cmV0dXJuIF9hcnI7fX1mdW5jdGlvbiBTZXR0aW5nX2FycmF5V2l0aEhvbGVzKGFycikge2lmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7fQoKCgoKCgoKICAgICAgICAgIGZ1bmN0aW9uIFNldHRpbmcoX3JlZikKCgoKCgogICAgICAgICAge3ZhciBidXR0b24gPSBfcmVmLmJ1dHRvbix2YWxpZGF0b3IgPSBfcmVmLnZhbGlkYXRvcjsKICAgICAgICAgICAgdmFyIF91c2VTdGF0ZSA9ICgwLCByZWFjdC51c2VTdGF0ZSkodmFsaWRhdG9yLmlzVmFsaWQoYnV0dG9uKSksX3VzZVN0YXRlMiA9IFNldHRpbmdfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLHZhbGlkID0gX3VzZVN0YXRlMlswXSxzZXRWYWxpZCA9IF91c2VTdGF0ZTJbMV07CgogICAgICAgICAgICBidXR0b24uc2V0VmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgICAgICAgYnV0dG9uLnZhbHVlID0gdmFsOwogICAgICAgICAgICAgIHZhbGlkYXRvci51cGRhdGVTZXR0aW5nKGJ1dHRvbik7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YWxpZGF0b3IuYWRkU2V0dGluZyhidXR0b24sIHNldFZhbGlkKTsKCiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovKAogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInRyIiwgeyBjbGFzc05hbWU6ICJ1c2VyUHJlZmVyZW5jZSIsICJkYXRhLW5hbWUiOiBidXR0b24ubmFtZSB9LCAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgidGQiLCB7IGNsYXNzTmFtZTogInNldHRpbmciIH0sCiAgICAgICAgICAgICAgYnV0dG9uLm5hbWUsIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7IGNsYXNzTmFtZTogInNldHRpbmdOYW1lSG92ZXIiIH0sIGJ1dHRvbi5wcmVmZXJlbmNlKSksIC8qI19fUFVSRV9fKi8KCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgidGQiLCB7IGNsYXNzTmFtZTogdmFsaWQgPyAic2V0dGluZ0lucHV0IiA6ICJzZXR0aW5nSW5wdXQgaW52YWxpZC1zZXR0aW5nIiB9LAogICAgICAgICAgICAgIGJ1dHRvbi50eXBlID09PSBSZWxheUNvbXBvbmVudFR5cGUuQk9PTEVBTiA/IC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KHNldHRpbmdzX0Jvb2xlYW5JbnB1dCwgeyBidXR0b246IGJ1dHRvbiB9KSA6CiAgICAgICAgICAgICAgYnV0dG9uLnR5cGUgPT09IFJlbGF5Q29tcG9uZW50VHlwZS5EUk9QRE9XTiA/IC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KHNldHRpbmdzX0Ryb3Bkb3duSW5wdXQsIHsgYnV0dG9uOiBidXR0b24gfSkgOgogICAgICAgICAgICAgIGJ1dHRvbi50eXBlID09IFJlbGF5Q29tcG9uZW50VHlwZS5UQUdTID8gLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoc2V0dGluZ3NfVGFnc0lucHV0LCB7IGJ1dHRvbjogYnV0dG9uIH0pIDogLyojX19QVVJFX18qLwoKICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KHNldHRpbmdzX1N0cmluZ0lucHV0LCB7IGJ1dHRvbjogYnV0dG9uIH0pLAoKICAgICAgICAgICAgICBidXR0b24uaW52YWxpZFJlYXNvbiAhPSBudWxsID8gLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsgY2xhc3NOYW1lOiAiaW52YWxpZC1yZWFzb24iLCBoaWRkZW46IHZhbGlkIH0sIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJzbWFsbCIsIG51bGwsIGJ1dHRvbi5pbnZhbGlkUmVhc29uKSkgOiAvKiNfX1BVUkVfXyovCgoKICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0LkZyYWdtZW50LCBudWxsKSwgLyojX19QVVJFX18qLwoKCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgiZGl2IiwgeyBjbGFzc05hbWU6ICJob3ZlckJveCIgfSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInNtYWxsIiwgeyBjbGFzc05hbWU6ICJzZXR0aW5nRGVmYXVsdEhvdmVyIiB9LAogICAgICAgICAgICAgIGJ1dHRvblsiZGVmYXVsdCJdICE9IG51bGwgPwogICAgICAgICAgICAgICJEZWZhdWx0OiAiICsgKAogICAgICAgICAgICAgIGJ1dHRvblsiZGVmYXVsdCJdID09ICIiID8gIjxFbXB0eT4iIDogYnV0dG9uWyJkZWZhdWx0Il0pIDoKICAgICAgICAgICAgICAiRGVmYXVsdCBub3Qgc2V0IikpKSwgLyojX19QVVJFX18qLwoKCgogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInRkIiwgbnVsbCwgYnV0dG9uLmRlc2NyaXB0aW9uKSkpOwoKCiAgICAgICAgICB9CgogICAgICAgICAgLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqL3ZhciBzZXR0aW5nc19TZXR0aW5nID0gU2V0dGluZzsKICAgICAgICAgIDsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcmVsYXkvcm91dGVzL1JlbGF5UGFnZS50c3gKICAgICAgICAgIGZ1bmN0aW9uIFJlbGF5UGFnZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7dmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bIkBAaXRlcmF0b3IiXTtpZiAoIWl0KSB7aWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gUmVsYXlQYWdlX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHtpZiAoaXQpIG8gPSBpdDt2YXIgaSA9IDA7dmFyIEYgPSBmdW5jdGlvbiBGKCkge307cmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHtpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9O3JldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07fSwgZTogZnVuY3Rpb24gZShfZSkge3Rocm93IF9lO30sIGY6IEYgfTt9dGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpO312YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsZGlkRXJyID0gZmFsc2UsZXJyO3JldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7aXQgPSBpdC5jYWxsKG8pO30sIG46IGZ1bmN0aW9uIG4oKSB7dmFyIHN0ZXAgPSBpdC5uZXh0KCk7bm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtyZXR1cm4gc3RlcDt9LCBlOiBmdW5jdGlvbiBlKF9lMikge2RpZEVyciA9IHRydWU7ZXJyID0gX2UyO30sIGY6IGZ1bmN0aW9uIGYoKSB7dHJ5IHtpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbInJldHVybiJdICE9IG51bGwpIGl0WyJyZXR1cm4iXSgpO30gZmluYWxseSB7aWYgKGRpZEVycikgdGhyb3cgZXJyO319IH07fWZ1bmN0aW9uIFJlbGF5UGFnZV91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtpZiAoIW8pIHJldHVybjtpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gUmVsYXlQYWdlX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTt2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7aWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7aWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBSZWxheVBhZ2VfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO31mdW5jdGlvbiBSZWxheVBhZ2VfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge2lmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO2ZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtyZXR1cm4gYXJyMjt9CgoKCgoKCiAgICAgICAgICBmdW5jdGlvbiBSZWxheVBhZ2UoX3JlZikKCgoKICAgICAgICAgIHt2YXIgY29tcG9uZW50cyA9IF9yZWYuY29tcG9uZW50czsKICAgICAgICAgICAgdmFyIGdyb3VwcyA9IFtdOwogICAgICAgICAgICB2YXIgY3VycmVudEdyb3VwID0gbnVsbDt2YXIgX2l0ZXJhdG9yID0gUmVsYXlQYWdlX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoCgogICAgICAgICAgICAgIGNvbXBvbmVudHMpLF9zdGVwO3RyeSB7Zm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHt2YXIgY29tcG9uZW50ID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICBjb21wb25lbnQudHlwZSA9PSBSZWxheUNvbXBvbmVudFR5cGUuSFRNTCB8fAogICAgICAgICAgICAgICAgY29tcG9uZW50LnR5cGUgPT0gUmVsYXlDb21wb25lbnRUeXBlLklOVEVSUlVQVCkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgZ3JvdXBzLnB1c2goY29tcG9uZW50KTsKICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwID0gbnVsbDsKICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRHcm91cCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cCA9IFtdOwogICAgICAgICAgICAgICAgICBncm91cHMucHVzaChjdXJyZW50R3JvdXApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cC5wdXNoKGNvbXBvbmVudCk7CiAgICAgICAgICAgICAgfX0gY2F0Y2ggKGVycikge19pdGVyYXRvci5lKGVycik7fSBmaW5hbGx5IHtfaXRlcmF0b3IuZigpO30KCiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IFtdOwogICAgICAgICAgICB2YXIgdmFsaWRhdG9yID0gbmV3IGFwaV9TZXR0aW5nVmFsaWRhdG9yKCk7CgogICAgICAgICAgICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50cywgaW5kZXgpIHsKICAgICAgICAgICAgICBpZiAoY29tcG9uZW50cy50eXBlID09IFJlbGF5Q29tcG9uZW50VHlwZS5IVE1MKSB7CiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IGNvbXBvbmVudHM7CgogICAgICAgICAgICAgICAgaWYgKGh0bWwuZGF0YSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKCAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGtleTogIkhUTUwgIi5jb25jYXQoaW5kZXgpLAogICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogewogICAgICAgICAgICAgICAgICAgIF9faHRtbDogY29tcG9uZW50cy5kYXRhCiAgICAgICAgICAgICAgICAgIH0gfSkpOwoKCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoY29tcG9uZW50cy50eXBlID09IFJlbGF5Q29tcG9uZW50VHlwZS5JTlRFUlJVUFQpIHsKICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2goIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50c19JbnRlcnJ1cHQsIHsKICAgICAgICAgICAgICAgICAga2V5OiAiSW50ZXJydXB0ICIuY29uY2F0KGluZGV4KSwKICAgICAgICAgICAgICAgICAgYnV0dG9uOiBjb21wb25lbnRzIH0pKTsKCgogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdmFyIGJ1dHRvbnMgPSBjb21wb25lbnRzOwoKICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKCAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgidGFibGUiLCB7IGtleTogIlRhYmxlICIuY29uY2F0KGluZGV4KSwgY2xhc3NOYW1lOiAicmVsYXlUYWJsZSIgfSwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoInRib2R5IiwgbnVsbCwKICAgICAgICAgICAgICBidXR0b25zLm1hcChmdW5jdGlvbiAoc2V0dGluZywgaW5kZXgpIHtyZXR1cm4gLyojX19QVVJFX18qLygKICAgICAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudChzZXR0aW5nc19TZXR0aW5nLCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAiU2V0dGluZyAiLmNvbmNhdChzZXR0aW5nLm5hbWUsICIgIikuY29uY2F0KHNldHRpbmcucHJlZmVyZW5jZSwgIiAiKS5jb25jYXQoaW5kZXgpLAogICAgICAgICAgICAgICAgICAgIGJ1dHRvbjogc2V0dGluZywKICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IHZhbGlkYXRvciB9KSk7fSkpKSk7CgoKCgoKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICB2YWxpZGF0b3IudXBkYXRlT2JqZWN0KCk7CgogICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vIHNldHRpbmdzIGluIHdoaWNoIHdlJ2Qgc2F2ZSBzdHVmZiwgZG9uJ3QgYm90aGVyIHJlbmRlcmluZyBzYXZlIGJ1dHRvbgogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgIGNvbXBvbmVudHMuZmluZChmdW5jdGlvbiAoYykge3JldHVybiBjLnByZWZlcmVuY2UgIT0gbnVsbDt9KSA9PSBudWxsKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KHJlYWN0LkZyYWdtZW50LCBudWxsLCBlbGVtZW50cyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovKAogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQocmVhY3QuRnJhZ21lbnQsIG51bGwsCiAgICAgICAgICAgICAgIiAiLAogICAgICAgICAgICAgIGVsZW1lbnRzLCAiICIsIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KCJiciIsIG51bGwpLCAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgcmVhY3QuY3JlYXRlRWxlbWVudCgiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICJzYXZlIiwKICAgICAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7cmV0dXJuICgKICAgICAgICAgICAgICAgICAgICBzYXZlU2V0dGluZ3MoCiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy5maWx0ZXIoCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGIpIHtyZXR1cm4gYi5wcmVmZXJlbmNlICE9IG51bGw7fSkpLgoKICAgICAgICAgICAgICAgICAgICB0aGVuKGZ1bmN0aW9uIChub3RpZnMpIHt2YXIgX2l0ZXJhdG9yMiA9IFJlbGF5UGFnZV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKAogICAgICAgICAgICAgICAgICAgICAgICBub3RpZnMpLF9zdGVwMjt0cnkge2ZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7dmFyIG5vdGlmID0gX3N0ZXAyLnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZE5vdGlmaWNhdGlvbihub3RpZik7CiAgICAgICAgICAgICAgICAgICAgICAgIH19IGNhdGNoIChlcnIpIHtfaXRlcmF0b3IyLmUoZXJyKTt9IGZpbmFsbHkge19pdGVyYXRvcjIuZigpO30KICAgICAgICAgICAgICAgICAgICB9KSk7fSwKCiAgICAgICAgICAgICAgICB0eXBlOiAic3VibWl0IiwKICAgICAgICAgICAgICAgIHZhbHVlOiAiU2F2ZSBDaGFuZ2VzIiB9KSkpOwoKCgogICAgICAgICAgfQoKICAgICAgICAgIC8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi92YXIgcm91dGVzX1JlbGF5UGFnZSA9IFJlbGF5UGFnZTsKICAgICAgICAgIDsgLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcmVsYXkvQXBwLnRzeAoKCgoKCgogICAgICAgICAgZnVuY3Rpb24gQXBwKF9yZWYpIHt2YXIgcGFnZXMgPSBfcmVmLnBhZ2VzOwogICAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qLygKICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KE1lbW9yeVJvdXRlciwgbnVsbCwKICAgICAgICAgICAgICAiICIsIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlcywgbnVsbCwKICAgICAgICAgICAgICAiICIsIC8qI19fUFVSRV9fKi8KICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudHNfTGF5b3V0LCB7IHBhZ2VzOiBwYWdlcyB9KSB9LAogICAgICAgICAgICAgICIgIiwgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsKICAgICAgICAgICAgICAgIHBhdGg6ICIvIiwKICAgICAgICAgICAgICAgIGVsZW1lbnQ6IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRlLCB7IHRvOiAiLyIgKyBwYWdlc1swXS5maWxlLCByZXBsYWNlOiB0cnVlIH0pIH0pLAogICAgICAgICAgICAgICIgIiwKICAgICAgICAgICAgICBwYWdlcy5tYXAoZnVuY3Rpb24gKHApIHsKICAgICAgICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovKAogICAgICAgICAgICAgICAgICByZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7CiAgICAgICAgICAgICAgICAgICAga2V5OiAiIi5jb25jYXQocC5maWxlLCAiICIpLmNvbmNhdChwLnBhZ2UpLAogICAgICAgICAgICAgICAgICAgIHBhdGg6ICIvIiArIHAuZmlsZSwKICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZXNfUmVsYXlQYWdlLCB7IGNvbXBvbmVudHM6IHAuY29tcG9uZW50cyB9KSB9KSk7CgoKICAgICAgICAgICAgICB9KSwgIiAiKSwKICAgICAgICAgICAgICAiICIpLAogICAgICAgICAgICAgICIgIikpOwoKCiAgICAgICAgICB9CgogICAgICAgICAgLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqL3ZhciByZWxheV9BcHAgPSBBcHA7CgogICAgICAgICAgLyoqKi99LAoKICAgICAgICAvKioqLzQ0ODoKICAgICAgICAvKioqLyhfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKICAgICAgICAgIC8qKgogICAgICAgICAgICogQGxpY2Vuc2UgUmVhY3QKICAgICAgICAgICAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcwogICAgICAgICAgICoKICAgICAgICAgICAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLgogICAgICAgICAgICoKICAgICAgICAgICAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogICAgICAgICAgICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgogICAgICAgICAgICovCiAgICAgICAgICAvKgogICAgICAgICAgIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVAogICAgICAgICAgKi8KICAgICAgICAgIHZhciBhYSA9IF9fd2VicGFja19yZXF1aXJlX18oMjk0KSxjYSA9IF9fd2VicGFja19yZXF1aXJlX18oODQwKTtmdW5jdGlvbiBwKGEpIHtmb3IgKHZhciBiID0gImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PSIgKyBhLCBjID0gMTsgYyA8IGFyZ3VtZW50cy5sZW5ndGg7IGMrKykgYiArPSAiJmFyZ3NbXT0iICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuICJNaW5pZmllZCBSZWFjdCBlcnJvciAjIiArIGEgKyAiOyB2aXNpdCAiICsgYiArICIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiI7fXZhciBkYSA9IG5ldyBTZXQoKSxlYSA9IHt9O2Z1bmN0aW9uIGZhKGEsIGIpIHtoYShhLCBiKTtoYShhICsgIkNhcHR1cmUiLCBiKTt9CiAgICAgICAgICBmdW5jdGlvbiBoYShhLCBiKSB7ZWFbYV0gPSBiO2ZvciAoYSA9IDA7IGEgPCBiLmxlbmd0aDsgYSsrKSBkYS5hZGQoYlthXSk7fQogICAgICAgICAgdmFyIGlhID0gISgidW5kZWZpbmVkIiA9PT0gdHlwZW9mIHdpbmRvdyB8fCAidW5kZWZpbmVkIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudCB8fCAidW5kZWZpbmVkIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2EgPSAvXls6QS1aX2Etelx1MDBDMC1cdTAwRDZcdTAwRDgtXHUwMEY2XHUwMEY4LVx1MDJGRlx1MDM3MC1cdTAzN0RcdTAzN0YtXHUxRkZGXHUyMDBDLVx1MjAwRFx1MjA3MC1cdTIxOEZcdTJDMDAtXHUyRkVGXHUzMDAxLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkZEXVs6QS1aX2Etelx1MDBDMC1cdTAwRDZcdTAwRDgtXHUwMEY2XHUwMEY4LVx1MDJGRlx1MDM3MC1cdTAzN0RcdTAzN0YtXHUxRkZGXHUyMDBDLVx1MjAwRFx1MjA3MC1cdTIxOEZcdTJDMDAtXHUyRkVGXHUzMDAxLVx1RDdGRlx1RjkwMC1cdUZEQ0ZcdUZERjAtXHVGRkZEXC0uMC05XHUwMEI3XHUwMzAwLVx1MDM2Rlx1MjAzRi1cdTIwNDBdKiQvLGxhID0KICAgICAgICAgICAge30sbWEgPSB7fTtmdW5jdGlvbiBvYShhKSB7aWYgKGphLmNhbGwobWEsIGEpKSByZXR1cm4gITA7aWYgKGphLmNhbGwobGEsIGEpKSByZXR1cm4gITE7aWYgKGthLnRlc3QoYSkpIHJldHVybiBtYVthXSA9ICEwO2xhW2FdID0gITA7cmV0dXJuICExO31mdW5jdGlvbiBwYShhLCBiLCBjLCBkKSB7aWYgKG51bGwgIT09IGMgJiYgMCA9PT0gYy50eXBlKSByZXR1cm4gITE7c3dpdGNoICh0eXBlb2YgYikge2Nhc2UgImZ1bmN0aW9uIjpjYXNlICJzeW1ib2wiOnJldHVybiAhMDtjYXNlICJib29sZWFuIjppZiAoZCkgcmV0dXJuICExO2lmIChudWxsICE9PSBjKSByZXR1cm4gIWMuYWNjZXB0c0Jvb2xlYW5zO2EgPSBhLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgNSk7cmV0dXJuICJkYXRhLSIgIT09IGEgJiYgImFyaWEtIiAhPT0gYTtkZWZhdWx0OnJldHVybiAhMTt9fQogICAgICAgICAgZnVuY3Rpb24gcWEoYSwgYiwgYywgZCkge2lmIChudWxsID09PSBiIHx8ICJ1bmRlZmluZWQiID09PSB0eXBlb2YgYiB8fCBwYShhLCBiLCBjLCBkKSkgcmV0dXJuICEwO2lmIChkKSByZXR1cm4gITE7aWYgKG51bGwgIT09IGMpIHN3aXRjaCAoYy50eXBlKSB7Y2FzZSAzOnJldHVybiAhYjtjYXNlIDQ6cmV0dXJuICExID09PSBiO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKSB8fCAxID4gYjt9cmV0dXJuICExO31mdW5jdGlvbiB2KGEsIGIsIGMsIGQsIGUsIGYsIGcpIHt0aGlzLmFjY2VwdHNCb29sZWFucyA9IDIgPT09IGIgfHwgMyA9PT0gYiB8fCA0ID09PSBiO3RoaXMuYXR0cmlidXRlTmFtZSA9IGQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2UgPSBlO3RoaXMubXVzdFVzZVByb3BlcnR5ID0gYzt0aGlzLnByb3BlcnR5TmFtZSA9IGE7dGhpcy50eXBlID0gYjt0aGlzLnNhbml0aXplVVJMID0gZjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nID0gZzt9dmFyIHogPSB7fTsKICAgICAgICAgICJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGUiLnNwbGl0KCIgIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge3pbYV0gPSBuZXcgdihhLCAwLCAhMSwgYSwgbnVsbCwgITEsICExKTt9KTtbWyJhY2NlcHRDaGFyc2V0IiwgImFjY2VwdC1jaGFyc2V0Il0sIFsiY2xhc3NOYW1lIiwgImNsYXNzIl0sIFsiaHRtbEZvciIsICJmb3IiXSwgWyJodHRwRXF1aXYiLCAiaHR0cC1lcXVpdiJdXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7dmFyIGIgPSBhWzBdO3pbYl0gPSBuZXcgdihiLCAxLCAhMSwgYVsxXSwgbnVsbCwgITEsICExKTt9KTtbImNvbnRlbnRFZGl0YWJsZSIsICJkcmFnZ2FibGUiLCAic3BlbGxDaGVjayIsICJ2YWx1ZSJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHt6W2FdID0gbmV3IHYoYSwgMiwgITEsIGEudG9Mb3dlckNhc2UoKSwgbnVsbCwgITEsICExKTt9KTsKICAgICAgICAgIFsiYXV0b1JldmVyc2UiLCAiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCIsICJmb2N1c2FibGUiLCAicHJlc2VydmVBbHBoYSJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHt6W2FdID0gbmV3IHYoYSwgMiwgITEsIGEsIG51bGwsICExLCAhMSk7fSk7ImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGUiLnNwbGl0KCIgIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge3pbYV0gPSBuZXcgdihhLCAzLCAhMSwgYS50b0xvd2VyQ2FzZSgpLCBudWxsLCAhMSwgITEpO30pOwogICAgICAgICAgWyJjaGVja2VkIiwgIm11bHRpcGxlIiwgIm11dGVkIiwgInNlbGVjdGVkIl0uZm9yRWFjaChmdW5jdGlvbiAoYSkge3pbYV0gPSBuZXcgdihhLCAzLCAhMCwgYSwgbnVsbCwgITEsICExKTt9KTtbImNhcHR1cmUiLCAiZG93bmxvYWQiXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7elthXSA9IG5ldyB2KGEsIDQsICExLCBhLCBudWxsLCAhMSwgITEpO30pO1siY29scyIsICJyb3dzIiwgInNpemUiLCAic3BhbiJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHt6W2FdID0gbmV3IHYoYSwgNiwgITEsIGEsIG51bGwsICExLCAhMSk7fSk7WyJyb3dTcGFuIiwgInN0YXJ0Il0uZm9yRWFjaChmdW5jdGlvbiAoYSkge3pbYV0gPSBuZXcgdihhLCA1LCAhMSwgYS50b0xvd2VyQ2FzZSgpLCBudWxsLCAhMSwgITEpO30pO3ZhciByYSA9IC9bXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKSB7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKTt9CiAgICAgICAgICAiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHQiLnNwbGl0KCIgIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge3ZhciBiID0gYS5yZXBsYWNlKHJhLAogICAgICAgICAgICBzYSk7eltiXSA9IG5ldyB2KGIsIDEsICExLCBhLCBudWxsLCAhMSwgITEpO30pOyJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGUiLnNwbGl0KCIgIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge3ZhciBiID0gYS5yZXBsYWNlKHJhLCBzYSk7eltiXSA9IG5ldyB2KGIsIDEsICExLCBhLCAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsICExLCAhMSk7fSk7WyJ4bWw6YmFzZSIsICJ4bWw6bGFuZyIsICJ4bWw6c3BhY2UiXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7dmFyIGIgPSBhLnJlcGxhY2UocmEsIHNhKTt6W2JdID0gbmV3IHYoYiwgMSwgITEsIGEsICJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UiLCAhMSwgITEpO30pO1sidGFiSW5kZXgiLCAiY3Jvc3NPcmlnaW4iXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7elthXSA9IG5ldyB2KGEsIDEsICExLCBhLnRvTG93ZXJDYXNlKCksIG51bGwsICExLCAhMSk7fSk7CiAgICAgICAgICB6LnhsaW5rSHJlZiA9IG5ldyB2KCJ4bGlua0hyZWYiLCAxLCAhMSwgInhsaW5rOmhyZWYiLCAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsICEwLCAhMSk7WyJzcmMiLCAiaHJlZiIsICJhY3Rpb24iLCAiZm9ybUFjdGlvbiJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHt6W2FdID0gbmV3IHYoYSwgMSwgITEsIGEudG9Mb3dlckNhc2UoKSwgbnVsbCwgITAsICEwKTt9KTsKICAgICAgICAgIGZ1bmN0aW9uIHRhKGEsIGIsIGMsIGQpIHt2YXIgZSA9IHouaGFzT3duUHJvcGVydHkoYikgPyB6W2JdIDogbnVsbDtpZiAobnVsbCAhPT0gZSA/IDAgIT09IGUudHlwZSA6IGQgfHwgISgyIDwgYi5sZW5ndGgpIHx8ICJvIiAhPT0gYlswXSAmJiAiTyIgIT09IGJbMF0gfHwgIm4iICE9PSBiWzFdICYmICJOIiAhPT0gYlsxXSkgcWEoYiwgYywgZSwgZCkgJiYgKGMgPSBudWxsKSwgZCB8fCBudWxsID09PSBlID8gb2EoYikgJiYgKG51bGwgPT09IGMgPyBhLnJlbW92ZUF0dHJpYnV0ZShiKSA6IGEuc2V0QXR0cmlidXRlKGIsICIiICsgYykpIDogZS5tdXN0VXNlUHJvcGVydHkgPyBhW2UucHJvcGVydHlOYW1lXSA9IG51bGwgPT09IGMgPyAzID09PSBlLnR5cGUgPyAhMSA6ICIiIDogYyA6IChiID0gZS5hdHRyaWJ1dGVOYW1lLCBkID0gZS5hdHRyaWJ1dGVOYW1lc3BhY2UsIG51bGwgPT09IGMgPyBhLnJlbW92ZUF0dHJpYnV0ZShiKSA6IChlID0gZS50eXBlLCBjID0gMyA9PT0gZSB8fCA0ID09PSBlICYmICEwID09PSBjID8gIiIgOiAiIiArIGMsIGQgPyBhLnNldEF0dHJpYnV0ZU5TKGQsIGIsIGMpIDogYS5zZXRBdHRyaWJ1dGUoYiwgYykpKTt9CiAgICAgICAgICB2YXIgdWEgPSBhYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YSA9IFN5bWJvbC5mb3IoInJlYWN0LmVsZW1lbnQiKSx3YSA9IFN5bWJvbC5mb3IoInJlYWN0LnBvcnRhbCIpLHlhID0gU3ltYm9sLmZvcigicmVhY3QuZnJhZ21lbnQiKSx6YSA9IFN5bWJvbC5mb3IoInJlYWN0LnN0cmljdF9tb2RlIiksQWEgPSBTeW1ib2wuZm9yKCJyZWFjdC5wcm9maWxlciIpLEJhID0gU3ltYm9sLmZvcigicmVhY3QucHJvdmlkZXIiKSxDYSA9IFN5bWJvbC5mb3IoInJlYWN0LmNvbnRleHQiKSxEYSA9IFN5bWJvbC5mb3IoInJlYWN0LmZvcndhcmRfcmVmIiksRWEgPSBTeW1ib2wuZm9yKCJyZWFjdC5zdXNwZW5zZSIpLEZhID0gU3ltYm9sLmZvcigicmVhY3Quc3VzcGVuc2VfbGlzdCIpLEdhID0gU3ltYm9sLmZvcigicmVhY3QubWVtbyIpLEhhID0gU3ltYm9sLmZvcigicmVhY3QubGF6eSIpO1N5bWJvbC5mb3IoInJlYWN0LnNjb3BlIik7U3ltYm9sLmZvcigicmVhY3QuZGVidWdfdHJhY2VfbW9kZSIpOwogICAgICAgICAgdmFyIElhID0gU3ltYm9sLmZvcigicmVhY3Qub2Zmc2NyZWVuIik7U3ltYm9sLmZvcigicmVhY3QubGVnYWN5X2hpZGRlbiIpO1N5bWJvbC5mb3IoInJlYWN0LmNhY2hlIik7U3ltYm9sLmZvcigicmVhY3QudHJhY2luZ19tYXJrZXIiKTt2YXIgSmEgPSBTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSkge2lmIChudWxsID09PSBhIHx8ICJvYmplY3QiICE9PSB0eXBlb2YgYSkgcmV0dXJuIG51bGw7YSA9IEphICYmIGFbSmFdIHx8IGFbIkBAaXRlcmF0b3IiXTtyZXR1cm4gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGEgPyBhIDogbnVsbDt9dmFyIEEgPSBPYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpIHtpZiAodm9pZCAwID09PSBMYSkgdHJ5IHt0aHJvdyBFcnJvcigpO30gY2F0Y2ggKGMpIHt2YXIgYiA9IGMuc3RhY2sudHJpbSgpLm1hdGNoKC9cbiggKihhdCApPykvKTtMYSA9IGIgJiYgYlsxXSB8fCAiIjt9cmV0dXJuICJcbiIgKyBMYSArIGE7fXZhciBOYSA9ICExOwogICAgICAgICAgZnVuY3Rpb24gT2EoYSwgYikge2lmICghYSB8fCBOYSkgcmV0dXJuICIiO05hID0gITA7dmFyIGMgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHZvaWQgMDt0cnkge2lmIChiKSB7aWYgKGIgPSBmdW5jdGlvbiBiKCkge3Rocm93IEVycm9yKCk7fSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLCAicHJvcHMiLCB7IHNldDogZnVuY3Rpb24gc2V0KCkge3Rocm93IEVycm9yKCk7fSB9KSwgIm9iamVjdCIgPT09IHR5cGVvZiBSZWZsZWN0ICYmIFJlZmxlY3QuY29uc3RydWN0KSB7dHJ5IHtSZWZsZWN0LmNvbnN0cnVjdChiLCBbXSk7fSBjYXRjaCAobCkge3ZhciBkID0gbDt9UmVmbGVjdC5jb25zdHJ1Y3QoYSwgW10sIGIpO30gZWxzZSB7dHJ5IHtiLmNhbGwoKTt9IGNhdGNoIChsKSB7ZCA9IGw7fWEuY2FsbChiLnByb3RvdHlwZSk7fX0gZWxzZSB7dHJ5IHt0aHJvdyBFcnJvcigpO30gY2F0Y2ggKGwpIHtkID0gbDt9YSgpO319IGNhdGNoIChsKSB7aWYgKGwgJiYgZCAmJiAic3RyaW5nIiA9PT0gdHlwZW9mIGwuc3RhY2spIHtmb3IgKHZhciBlID0gbC5zdGFjay5zcGxpdCgiXG4iKSwKICAgICAgICAgICAgICAgICAgZiA9IGQuc3RhY2suc3BsaXQoIlxuIiksIGcgPSBlLmxlbmd0aCAtIDEsIGggPSBmLmxlbmd0aCAtIDE7IDEgPD0gZyAmJiAwIDw9IGggJiYgZVtnXSAhPT0gZltoXTspIGgtLTtmb3IgKDsgMSA8PSBnICYmIDAgPD0gaDsgZy0tLCBoLS0pIGlmIChlW2ddICE9PSBmW2hdKSB7aWYgKDEgIT09IGcgfHwgMSAhPT0gaCkge2RvIGlmIChnLS0sIGgtLSwgMCA+IGggfHwgZVtnXSAhPT0gZltoXSkge3ZhciBrID0gIlxuIiArIGVbZ10ucmVwbGFjZSgiIGF0IG5ldyAiLCAiIGF0ICIpO2EuZGlzcGxheU5hbWUgJiYgay5pbmNsdWRlcygiPGFub255bW91cz4iKSAmJiAoayA9IGsucmVwbGFjZSgiPGFub255bW91cz4iLCBhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGs7fSB3aGlsZSAoMSA8PSBnICYmIDAgPD0gaCk7fWJyZWFrO319fSBmaW5hbGx5IHtOYSA9ICExLCBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IGM7fXJldHVybiAoYSA9IGEgPyBhLmRpc3BsYXlOYW1lIHx8IGEubmFtZSA6ICIiKSA/IE1hKGEpIDogIiI7fQogICAgICAgICAgZnVuY3Rpb24gUGEoYSkge3N3aXRjaCAoYS50YWcpIHtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoIkxhenkiKTtjYXNlIDEzOnJldHVybiBNYSgiU3VzcGVuc2UiKTtjYXNlIDE5OnJldHVybiBNYSgiU3VzcGVuc2VMaXN0Iik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhID0gT2EoYS50eXBlLCAhMSksIGE7Y2FzZSAxMTpyZXR1cm4gYSA9IE9hKGEudHlwZS5yZW5kZXIsICExKSwgYTtjYXNlIDE6cmV0dXJuIGEgPSBPYShhLnR5cGUsICEwKSwgYTtkZWZhdWx0OnJldHVybiAiIjt9fQogICAgICAgICAgZnVuY3Rpb24gUWEoYSkge2lmIChudWxsID09IGEpIHJldHVybiBudWxsO2lmICgiZnVuY3Rpb24iID09PSB0eXBlb2YgYSkgcmV0dXJuIGEuZGlzcGxheU5hbWUgfHwgYS5uYW1lIHx8IG51bGw7aWYgKCJzdHJpbmciID09PSB0eXBlb2YgYSkgcmV0dXJuIGE7c3dpdGNoIChhKSB7Y2FzZSB5YTpyZXR1cm4gIkZyYWdtZW50IjtjYXNlIHdhOnJldHVybiAiUG9ydGFsIjtjYXNlIEFhOnJldHVybiAiUHJvZmlsZXIiO2Nhc2UgemE6cmV0dXJuICJTdHJpY3RNb2RlIjtjYXNlIEVhOnJldHVybiAiU3VzcGVuc2UiO2Nhc2UgRmE6cmV0dXJuICJTdXNwZW5zZUxpc3QiO31pZiAoIm9iamVjdCIgPT09IHR5cGVvZiBhKSBzd2l0Y2ggKGEuJCR0eXBlb2YpIHtjYXNlIENhOnJldHVybiAoYS5kaXNwbGF5TmFtZSB8fCAiQ29udGV4dCIpICsgIi5Db25zdW1lciI7Y2FzZSBCYTpyZXR1cm4gKGEuX2NvbnRleHQuZGlzcGxheU5hbWUgfHwgIkNvbnRleHQiKSArICIuUHJvdmlkZXIiO2Nhc2UgRGE6dmFyIGIgPSBhLnJlbmRlcjthID0gYS5kaXNwbGF5TmFtZTthIHx8IChhID0gYi5kaXNwbGF5TmFtZSB8fAogICAgICAgICAgICAgICAgYi5uYW1lIHx8ICIiLCBhID0gIiIgIT09IGEgPyAiRm9yd2FyZFJlZigiICsgYSArICIpIiA6ICJGb3J3YXJkUmVmIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYiA9IGEuZGlzcGxheU5hbWUgfHwgbnVsbCwgbnVsbCAhPT0gYiA/IGIgOiBRYShhLnR5cGUpIHx8ICJNZW1vIjtjYXNlIEhhOmIgPSBhLl9wYXlsb2FkO2EgPSBhLl9pbml0O3RyeSB7cmV0dXJuIFFhKGEoYikpO30gY2F0Y2ggKGMpIHt9fXJldHVybiBudWxsO30KICAgICAgICAgIGZ1bmN0aW9uIFJhKGEpIHt2YXIgYiA9IGEudHlwZTtzd2l0Y2ggKGEudGFnKSB7Y2FzZSAyNDpyZXR1cm4gIkNhY2hlIjtjYXNlIDk6cmV0dXJuIChiLmRpc3BsYXlOYW1lIHx8ICJDb250ZXh0IikgKyAiLkNvbnN1bWVyIjtjYXNlIDEwOnJldHVybiAoYi5fY29udGV4dC5kaXNwbGF5TmFtZSB8fCAiQ29udGV4dCIpICsgIi5Qcm92aWRlciI7Y2FzZSAxODpyZXR1cm4gIkRlaHlkcmF0ZWRGcmFnbWVudCI7Y2FzZSAxMTpyZXR1cm4gYSA9IGIucmVuZGVyLCBhID0gYS5kaXNwbGF5TmFtZSB8fCBhLm5hbWUgfHwgIiIsIGIuZGlzcGxheU5hbWUgfHwgKCIiICE9PSBhID8gIkZvcndhcmRSZWYoIiArIGEgKyAiKSIgOiAiRm9yd2FyZFJlZiIpO2Nhc2UgNzpyZXR1cm4gIkZyYWdtZW50IjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVybiAiUG9ydGFsIjtjYXNlIDM6cmV0dXJuICJSb290IjtjYXNlIDY6cmV0dXJuICJUZXh0IjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGIgPT09IHphID8gIlN0cmljdE1vZGUiIDogIk1vZGUiO2Nhc2UgMjI6cmV0dXJuICJPZmZzY3JlZW4iOwogICAgICAgICAgICAgIGNhc2UgMTI6cmV0dXJuICJQcm9maWxlciI7Y2FzZSAyMTpyZXR1cm4gIlNjb3BlIjtjYXNlIDEzOnJldHVybiAiU3VzcGVuc2UiO2Nhc2UgMTk6cmV0dXJuICJTdXNwZW5zZUxpc3QiO2Nhc2UgMjU6cmV0dXJuICJUcmFjaW5nTWFya2VyIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGIpIHJldHVybiBiLmRpc3BsYXlOYW1lIHx8IGIubmFtZSB8fCBudWxsO2lmICgic3RyaW5nIiA9PT0gdHlwZW9mIGIpIHJldHVybiBiO31yZXR1cm4gbnVsbDt9ZnVuY3Rpb24gU2EoYSkge3N3aXRjaCAodHlwZW9mIGEpIHtjYXNlICJib29sZWFuIjpjYXNlICJudW1iZXIiOmNhc2UgInN0cmluZyI6Y2FzZSAidW5kZWZpbmVkIjpyZXR1cm4gYTtjYXNlICJvYmplY3QiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuICIiO319CiAgICAgICAgICBmdW5jdGlvbiBUYShhKSB7dmFyIGIgPSBhLnR5cGU7cmV0dXJuIChhID0gYS5ub2RlTmFtZSkgJiYgImlucHV0IiA9PT0gYS50b0xvd2VyQ2FzZSgpICYmICgiY2hlY2tib3giID09PSBiIHx8ICJyYWRpbyIgPT09IGIpO30KICAgICAgICAgIGZ1bmN0aW9uIFVhKGEpIHt2YXIgYiA9IFRhKGEpID8gImNoZWNrZWQiIDogInZhbHVlIixjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgYiksZCA9ICIiICsgYVtiXTtpZiAoIWEuaGFzT3duUHJvcGVydHkoYikgJiYgInVuZGVmaW5lZCIgIT09IHR5cGVvZiBjICYmICJmdW5jdGlvbiIgPT09IHR5cGVvZiBjLmdldCAmJiAiZnVuY3Rpb24iID09PSB0eXBlb2YgYy5zZXQpIHt2YXIgZSA9IGMuZ2V0LGYgPSBjLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSwgYiwgeyBjb25maWd1cmFibGU6ICEwLCBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtyZXR1cm4gZS5jYWxsKHRoaXMpO30sIHNldDogZnVuY3Rpb24gc2V0KGEpIHtkID0gIiIgKyBhO2YuY2FsbCh0aGlzLCBhKTt9IH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCBiLCB7IGVudW1lcmFibGU6IGMuZW51bWVyYWJsZSB9KTtyZXR1cm4geyBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUoKSB7cmV0dXJuIGQ7fSwgc2V0VmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKGEpIHtkID0gIiIgKyBhO30sIHN0b3BUcmFja2luZzogZnVuY3Rpb24gc3RvcFRyYWNraW5nKCkge2EuX3ZhbHVlVHJhY2tlciA9CiAgICAgICAgICAgICAgICAgIG51bGw7ZGVsZXRlIGFbYl07fSB9O319ZnVuY3Rpb24gVmEoYSkge2EuX3ZhbHVlVHJhY2tlciB8fCAoYS5fdmFsdWVUcmFja2VyID0gVWEoYSkpO31mdW5jdGlvbiBXYShhKSB7aWYgKCFhKSByZXR1cm4gITE7dmFyIGIgPSBhLl92YWx1ZVRyYWNrZXI7aWYgKCFiKSByZXR1cm4gITA7dmFyIGMgPSBiLmdldFZhbHVlKCk7dmFyIGQgPSAiIjthICYmIChkID0gVGEoYSkgPyBhLmNoZWNrZWQgPyAidHJ1ZSIgOiAiZmFsc2UiIDogYS52YWx1ZSk7YSA9IGQ7cmV0dXJuIGEgIT09IGMgPyAoYi5zZXRWYWx1ZShhKSwgITApIDogITE7fWZ1bmN0aW9uIFhhKGEpIHthID0gYSB8fCAoInVuZGVmaW5lZCIgIT09IHR5cGVvZiBkb2N1bWVudCA/IGRvY3VtZW50IDogdm9pZCAwKTtpZiAoInVuZGVmaW5lZCIgPT09IHR5cGVvZiBhKSByZXR1cm4gbnVsbDt0cnkge3JldHVybiBhLmFjdGl2ZUVsZW1lbnQgfHwgYS5ib2R5O30gY2F0Y2ggKGIpIHtyZXR1cm4gYS5ib2R5O319CiAgICAgICAgICBmdW5jdGlvbiBZYShhLCBiKSB7dmFyIGMgPSBiLmNoZWNrZWQ7cmV0dXJuIEEoe30sIGIsIHsgZGVmYXVsdENoZWNrZWQ6IHZvaWQgMCwgZGVmYXVsdFZhbHVlOiB2b2lkIDAsIHZhbHVlOiB2b2lkIDAsIGNoZWNrZWQ6IG51bGwgIT0gYyA/IGMgOiBhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQgfSk7fWZ1bmN0aW9uIFphKGEsIGIpIHt2YXIgYyA9IG51bGwgPT0gYi5kZWZhdWx0VmFsdWUgPyAiIiA6IGIuZGVmYXVsdFZhbHVlLGQgPSBudWxsICE9IGIuY2hlY2tlZCA/IGIuY2hlY2tlZCA6IGIuZGVmYXVsdENoZWNrZWQ7YyA9IFNhKG51bGwgIT0gYi52YWx1ZSA/IGIudmFsdWUgOiBjKTthLl93cmFwcGVyU3RhdGUgPSB7IGluaXRpYWxDaGVja2VkOiBkLCBpbml0aWFsVmFsdWU6IGMsIGNvbnRyb2xsZWQ6ICJjaGVja2JveCIgPT09IGIudHlwZSB8fCAicmFkaW8iID09PSBiLnR5cGUgPyBudWxsICE9IGIuY2hlY2tlZCA6IG51bGwgIT0gYi52YWx1ZSB9O31mdW5jdGlvbiBhYihhLCBiKSB7YiA9IGIuY2hlY2tlZDtudWxsICE9IGIgJiYgdGEoYSwgImNoZWNrZWQiLCBiLCAhMSk7fQogICAgICAgICAgZnVuY3Rpb24gYmIoYSwgYikge2FiKGEsIGIpO3ZhciBjID0gU2EoYi52YWx1ZSksZCA9IGIudHlwZTtpZiAobnVsbCAhPSBjKSB7aWYgKCJudW1iZXIiID09PSBkKSB7aWYgKDAgPT09IGMgJiYgIiIgPT09IGEudmFsdWUgfHwgYS52YWx1ZSAhPSBjKSBhLnZhbHVlID0gIiIgKyBjO30gZWxzZSBhLnZhbHVlICE9PSAiIiArIGMgJiYgKGEudmFsdWUgPSAiIiArIGMpO30gZWxzZSBpZiAoInN1Ym1pdCIgPT09IGQgfHwgInJlc2V0IiA9PT0gZCkge2EucmVtb3ZlQXR0cmlidXRlKCJ2YWx1ZSIpO3JldHVybjt9Yi5oYXNPd25Qcm9wZXJ0eSgidmFsdWUiKSA/IGNiKGEsIGIudHlwZSwgYykgOiBiLmhhc093blByb3BlcnR5KCJkZWZhdWx0VmFsdWUiKSAmJiBjYihhLCBiLnR5cGUsIFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbCA9PSBiLmNoZWNrZWQgJiYgbnVsbCAhPSBiLmRlZmF1bHRDaGVja2VkICYmIChhLmRlZmF1bHRDaGVja2VkID0gISFiLmRlZmF1bHRDaGVja2VkKTt9CiAgICAgICAgICBmdW5jdGlvbiBkYihhLCBiLCBjKSB7aWYgKGIuaGFzT3duUHJvcGVydHkoInZhbHVlIikgfHwgYi5oYXNPd25Qcm9wZXJ0eSgiZGVmYXVsdFZhbHVlIikpIHt2YXIgZCA9IGIudHlwZTtpZiAoISgic3VibWl0IiAhPT0gZCAmJiAicmVzZXQiICE9PSBkIHx8IHZvaWQgMCAhPT0gYi52YWx1ZSAmJiBudWxsICE9PSBiLnZhbHVlKSkgcmV0dXJuO2IgPSAiIiArIGEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7YyB8fCBiID09PSBhLnZhbHVlIHx8IChhLnZhbHVlID0gYik7YS5kZWZhdWx0VmFsdWUgPSBiO31jID0gYS5uYW1lOyIiICE9PSBjICYmIChhLm5hbWUgPSAiIik7YS5kZWZhdWx0Q2hlY2tlZCA9ICEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkOyIiICE9PSBjICYmIChhLm5hbWUgPSBjKTt9CiAgICAgICAgICBmdW5jdGlvbiBjYihhLCBiLCBjKSB7aWYgKCJudW1iZXIiICE9PSBiIHx8IFhhKGEub3duZXJEb2N1bWVudCkgIT09IGEpIG51bGwgPT0gYyA/IGEuZGVmYXVsdFZhbHVlID0gIiIgKyBhLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlIDogYS5kZWZhdWx0VmFsdWUgIT09ICIiICsgYyAmJiAoYS5kZWZhdWx0VmFsdWUgPSAiIiArIGMpO312YXIgZWIgPSBBcnJheS5pc0FycmF5OwogICAgICAgICAgZnVuY3Rpb24gZmIoYSwgYiwgYywgZCkge2EgPSBhLm9wdGlvbnM7aWYgKGIpIHtiID0ge307Zm9yICh2YXIgZSA9IDA7IGUgPCBjLmxlbmd0aDsgZSsrKSBiWyIkIiArIGNbZV1dID0gITA7Zm9yIChjID0gMDsgYyA8IGEubGVuZ3RoOyBjKyspIGUgPSBiLmhhc093blByb3BlcnR5KCIkIiArIGFbY10udmFsdWUpLCBhW2NdLnNlbGVjdGVkICE9PSBlICYmIChhW2NdLnNlbGVjdGVkID0gZSksIGUgJiYgZCAmJiAoYVtjXS5kZWZhdWx0U2VsZWN0ZWQgPSAhMCk7fSBlbHNlIHtjID0gIiIgKyBTYShjKTtiID0gbnVsbDtmb3IgKGUgPSAwOyBlIDwgYS5sZW5ndGg7IGUrKykge2lmIChhW2VdLnZhbHVlID09PSBjKSB7YVtlXS5zZWxlY3RlZCA9ICEwO2QgJiYgKGFbZV0uZGVmYXVsdFNlbGVjdGVkID0gITApO3JldHVybjt9bnVsbCAhPT0gYiB8fCBhW2VdLmRpc2FibGVkIHx8IChiID0gYVtlXSk7fW51bGwgIT09IGIgJiYgKGIuc2VsZWN0ZWQgPSAhMCk7fX0KICAgICAgICAgIGZ1bmN0aW9uIGdiKGEsIGIpIHtpZiAobnVsbCAhPSBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSB0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sIGIsIHsgdmFsdWU6IHZvaWQgMCwgZGVmYXVsdFZhbHVlOiB2b2lkIDAsIGNoaWxkcmVuOiAiIiArIGEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUgfSk7fWZ1bmN0aW9uIGhiKGEsIGIpIHt2YXIgYyA9IGIudmFsdWU7aWYgKG51bGwgPT0gYykge2MgPSBiLmNoaWxkcmVuO2IgPSBiLmRlZmF1bHRWYWx1ZTtpZiAobnVsbCAhPSBjKSB7aWYgKG51bGwgIT0gYikgdGhyb3cgRXJyb3IocCg5MikpO2lmIChlYihjKSkge2lmICgxIDwgYy5sZW5ndGgpIHRocm93IEVycm9yKHAoOTMpKTtjID0gY1swXTt9YiA9IGM7fW51bGwgPT0gYiAmJiAoYiA9ICIiKTtjID0gYjt9YS5fd3JhcHBlclN0YXRlID0geyBpbml0aWFsVmFsdWU6IFNhKGMpIH07fQogICAgICAgICAgZnVuY3Rpb24gaWIoYSwgYikge3ZhciBjID0gU2EoYi52YWx1ZSksZCA9IFNhKGIuZGVmYXVsdFZhbHVlKTtudWxsICE9IGMgJiYgKGMgPSAiIiArIGMsIGMgIT09IGEudmFsdWUgJiYgKGEudmFsdWUgPSBjKSwgbnVsbCA9PSBiLmRlZmF1bHRWYWx1ZSAmJiBhLmRlZmF1bHRWYWx1ZSAhPT0gYyAmJiAoYS5kZWZhdWx0VmFsdWUgPSBjKSk7bnVsbCAhPSBkICYmIChhLmRlZmF1bHRWYWx1ZSA9ICIiICsgZCk7fWZ1bmN0aW9uIGpiKGEpIHt2YXIgYiA9IGEudGV4dENvbnRlbnQ7YiA9PT0gYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSAmJiAiIiAhPT0gYiAmJiBudWxsICE9PSBiICYmIChhLnZhbHVlID0gYik7fWZ1bmN0aW9uIGtiKGEpIHtzd2l0Y2ggKGEpIHtjYXNlICJzdmciOnJldHVybiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciO2Nhc2UgIm1hdGgiOnJldHVybiAiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCI7ZGVmYXVsdDpyZXR1cm4gImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiO319CiAgICAgICAgICBmdW5jdGlvbiBsYihhLCBiKSB7cmV0dXJuIG51bGwgPT0gYSB8fCAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIgPT09IGEgPyBrYihiKSA6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgPT09IGEgJiYgImZvcmVpZ25PYmplY3QiID09PSBiID8gImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiIDogYTt9CiAgICAgICAgICB2YXIgbWIsbmIgPSBmdW5jdGlvbiAoYSkge3JldHVybiAidW5kZWZpbmVkIiAhPT0gdHlwZW9mIE1TQXBwICYmIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uID8gZnVuY3Rpb24gKGIsIGMsIGQsIGUpIHtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAoKSB7cmV0dXJuIGEoYiwgYywgZCwgZSk7fSk7fSA6IGE7fShmdW5jdGlvbiAoYSwgYikge2lmICgiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciICE9PSBhLm5hbWVzcGFjZVVSSSB8fCAiaW5uZXJIVE1MIiBpbiBhKSBhLmlubmVySFRNTCA9IGI7ZWxzZSB7bWIgPSBtYiB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTttYi5pbm5lckhUTUwgPSAiPHN2Zz4iICsgYi52YWx1ZU9mKCkudG9TdHJpbmcoKSArICI8L3N2Zz4iO2ZvciAoYiA9IG1iLmZpcnN0Q2hpbGQ7IGEuZmlyc3RDaGlsZDspIGEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IgKDsgYi5maXJzdENoaWxkOykgYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpO319KTsKICAgICAgICAgIGZ1bmN0aW9uIG9iKGEsIGIpIHtpZiAoYikge3ZhciBjID0gYS5maXJzdENoaWxkO2lmIChjICYmIGMgPT09IGEubGFzdENoaWxkICYmIDMgPT09IGMubm9kZVR5cGUpIHtjLm5vZGVWYWx1ZSA9IGI7cmV0dXJuO319YS50ZXh0Q29udGVudCA9IGI7fQogICAgICAgICAgdmFyIHBiID0geyBhbmltYXRpb25JdGVyYXRpb25Db3VudDogITAsIGFzcGVjdFJhdGlvOiAhMCwgYm9yZGVySW1hZ2VPdXRzZXQ6ICEwLCBib3JkZXJJbWFnZVNsaWNlOiAhMCwgYm9yZGVySW1hZ2VXaWR0aDogITAsIGJveEZsZXg6ICEwLCBib3hGbGV4R3JvdXA6ICEwLCBib3hPcmRpbmFsR3JvdXA6ICEwLCBjb2x1bW5Db3VudDogITAsIGNvbHVtbnM6ICEwLCBmbGV4OiAhMCwgZmxleEdyb3c6ICEwLCBmbGV4UG9zaXRpdmU6ICEwLCBmbGV4U2hyaW5rOiAhMCwgZmxleE5lZ2F0aXZlOiAhMCwgZmxleE9yZGVyOiAhMCwgZ3JpZEFyZWE6ICEwLCBncmlkUm93OiAhMCwgZ3JpZFJvd0VuZDogITAsIGdyaWRSb3dTcGFuOiAhMCwgZ3JpZFJvd1N0YXJ0OiAhMCwgZ3JpZENvbHVtbjogITAsIGdyaWRDb2x1bW5FbmQ6ICEwLCBncmlkQ29sdW1uU3BhbjogITAsIGdyaWRDb2x1bW5TdGFydDogITAsIGZvbnRXZWlnaHQ6ICEwLCBsaW5lQ2xhbXA6ICEwLCBsaW5lSGVpZ2h0OiAhMCwgb3BhY2l0eTogITAsIG9yZGVyOiAhMCwgb3JwaGFuczogITAsIHRhYlNpemU6ICEwLCB3aWRvd3M6ICEwLCB6SW5kZXg6ICEwLAogICAgICAgICAgICAgIHpvb206ICEwLCBmaWxsT3BhY2l0eTogITAsIGZsb29kT3BhY2l0eTogITAsIHN0b3BPcGFjaXR5OiAhMCwgc3Ryb2tlRGFzaGFycmF5OiAhMCwgc3Ryb2tlRGFzaG9mZnNldDogITAsIHN0cm9rZU1pdGVybGltaXQ6ICEwLCBzdHJva2VPcGFjaXR5OiAhMCwgc3Ryb2tlV2lkdGg6ICEwIH0scWIgPSBbIldlYmtpdCIsICJtcyIsICJNb3oiLCAiTyJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7cWIuZm9yRWFjaChmdW5jdGlvbiAoYikge2IgPSBiICsgYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGEuc3Vic3RyaW5nKDEpO3BiW2JdID0gcGJbYV07fSk7fSk7ZnVuY3Rpb24gcmIoYSwgYiwgYykge3JldHVybiBudWxsID09IGIgfHwgImJvb2xlYW4iID09PSB0eXBlb2YgYiB8fCAiIiA9PT0gYiA/ICIiIDogYyB8fCAibnVtYmVyIiAhPT0gdHlwZW9mIGIgfHwgMCA9PT0gYiB8fCBwYi5oYXNPd25Qcm9wZXJ0eShhKSAmJiBwYlthXSA/ICgiIiArIGIpLnRyaW0oKSA6IGIgKyAicHgiO30KICAgICAgICAgIGZ1bmN0aW9uIHNiKGEsIGIpIHthID0gYS5zdHlsZTtmb3IgKHZhciBjIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KGMpKSB7dmFyIGQgPSAwID09PSBjLmluZGV4T2YoIi0tIiksZSA9IHJiKGMsIGJbY10sIGQpOyJmbG9hdCIgPT09IGMgJiYgKGMgPSAiY3NzRmxvYXQiKTtkID8gYS5zZXRQcm9wZXJ0eShjLCBlKSA6IGFbY10gPSBlO319dmFyIHRiID0gQSh7IG1lbnVpdGVtOiAhMCB9LCB7IGFyZWE6ICEwLCBiYXNlOiAhMCwgYnI6ICEwLCBjb2w6ICEwLCBlbWJlZDogITAsIGhyOiAhMCwgaW1nOiAhMCwgaW5wdXQ6ICEwLCBrZXlnZW46ICEwLCBsaW5rOiAhMCwgbWV0YTogITAsIHBhcmFtOiAhMCwgc291cmNlOiAhMCwgdHJhY2s6ICEwLCB3YnI6ICEwIH0pOwogICAgICAgICAgZnVuY3Rpb24gdWIoYSwgYikge2lmIChiKSB7aWYgKHRiW2FdICYmIChudWxsICE9IGIuY2hpbGRyZW4gfHwgbnVsbCAhPSBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSkgdGhyb3cgRXJyb3IocCgxMzcsIGEpKTtpZiAobnVsbCAhPSBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSB7aWYgKG51bGwgIT0gYi5jaGlsZHJlbikgdGhyb3cgRXJyb3IocCg2MCkpO2lmICgib2JqZWN0IiAhPT0gdHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgfHwgISgiX19odG1sIiBpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSkgdGhyb3cgRXJyb3IocCg2MSkpO31pZiAobnVsbCAhPSBiLnN0eWxlICYmICJvYmplY3QiICE9PSB0eXBlb2YgYi5zdHlsZSkgdGhyb3cgRXJyb3IocCg2MikpO319CiAgICAgICAgICBmdW5jdGlvbiB2YihhLCBiKSB7aWYgKC0xID09PSBhLmluZGV4T2YoIi0iKSkgcmV0dXJuICJzdHJpbmciID09PSB0eXBlb2YgYi5pcztzd2l0Y2ggKGEpIHtjYXNlICJhbm5vdGF0aW9uLXhtbCI6Y2FzZSAiY29sb3ItcHJvZmlsZSI6Y2FzZSAiZm9udC1mYWNlIjpjYXNlICJmb250LWZhY2Utc3JjIjpjYXNlICJmb250LWZhY2UtdXJpIjpjYXNlICJmb250LWZhY2UtZm9ybWF0IjpjYXNlICJmb250LWZhY2UtbmFtZSI6Y2FzZSAibWlzc2luZy1nbHlwaCI6cmV0dXJuICExO2RlZmF1bHQ6cmV0dXJuICEwO319dmFyIHdiID0gbnVsbDtmdW5jdGlvbiB4YihhKSB7YSA9IGEudGFyZ2V0IHx8IGEuc3JjRWxlbWVudCB8fCB3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCAmJiAoYSA9IGEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzID09PSBhLm5vZGVUeXBlID8gYS5wYXJlbnROb2RlIDogYTt9dmFyIHliID0gbnVsbCx6YiA9IG51bGwsQWIgPSBudWxsOwogICAgICAgICAgZnVuY3Rpb24gQmIoYSkge2lmIChhID0gQ2IoYSkpIHtpZiAoImZ1bmN0aW9uIiAhPT0gdHlwZW9mIHliKSB0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiID0gYS5zdGF0ZU5vZGU7YiAmJiAoYiA9IERiKGIpLCB5YihhLnN0YXRlTm9kZSwgYS50eXBlLCBiKSk7fX1mdW5jdGlvbiBFYihhKSB7emIgPyBBYiA/IEFiLnB1c2goYSkgOiBBYiA9IFthXSA6IHpiID0gYTt9ZnVuY3Rpb24gRmIoKSB7aWYgKHpiKSB7dmFyIGEgPSB6YixiID0gQWI7QWIgPSB6YiA9IG51bGw7QmIoYSk7aWYgKGIpIGZvciAoYSA9IDA7IGEgPCBiLmxlbmd0aDsgYSsrKSBCYihiW2FdKTt9fWZ1bmN0aW9uIEdiKGEsIGIpIHtyZXR1cm4gYShiKTt9ZnVuY3Rpb24gSGIoKSB7fXZhciBJYiA9ICExO2Z1bmN0aW9uIEpiKGEsIGIsIGMpIHtpZiAoSWIpIHJldHVybiBhKGIsIGMpO0liID0gITA7dHJ5IHtyZXR1cm4gR2IoYSwgYiwgYyk7fSBmaW5hbGx5IHtpZiAoSWIgPSAhMSwgbnVsbCAhPT0gemIgfHwgbnVsbCAhPT0gQWIpIEhiKCksIEZiKCk7fX0KICAgICAgICAgIGZ1bmN0aW9uIEtiKGEsIGIpIHt2YXIgYyA9IGEuc3RhdGVOb2RlO2lmIChudWxsID09PSBjKSByZXR1cm4gbnVsbDt2YXIgZCA9IERiKGMpO2lmIChudWxsID09PSBkKSByZXR1cm4gbnVsbDtjID0gZFtiXTthOiBzd2l0Y2ggKGIpIHtjYXNlICJvbkNsaWNrIjpjYXNlICJvbkNsaWNrQ2FwdHVyZSI6Y2FzZSAib25Eb3VibGVDbGljayI6Y2FzZSAib25Eb3VibGVDbGlja0NhcHR1cmUiOmNhc2UgIm9uTW91c2VEb3duIjpjYXNlICJvbk1vdXNlRG93bkNhcHR1cmUiOmNhc2UgIm9uTW91c2VNb3ZlIjpjYXNlICJvbk1vdXNlTW92ZUNhcHR1cmUiOmNhc2UgIm9uTW91c2VVcCI6Y2FzZSAib25Nb3VzZVVwQ2FwdHVyZSI6Y2FzZSAib25Nb3VzZUVudGVyIjooZCA9ICFkLmRpc2FibGVkKSB8fCAoYSA9IGEudHlwZSwgZCA9ICEoImJ1dHRvbiIgPT09IGEgfHwgImlucHV0IiA9PT0gYSB8fCAic2VsZWN0IiA9PT0gYSB8fCAidGV4dGFyZWEiID09PSBhKSk7YSA9ICFkO2JyZWFrIGE7ZGVmYXVsdDphID0gITE7fWlmIChhKSByZXR1cm4gbnVsbDtpZiAoYyAmJiAiZnVuY3Rpb24iICE9PQogICAgICAgICAgICB0eXBlb2YgYykgdGhyb3cgRXJyb3IocCgyMzEsIGIsIHR5cGVvZiBjKSk7cmV0dXJuIGM7fXZhciBMYiA9ICExO2lmIChpYSkgdHJ5IHt2YXIgTWIgPSB7fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsICJwYXNzaXZlIiwgeyBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtMYiA9ICEwO30gfSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoInRlc3QiLCBNYiwgTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCJ0ZXN0IiwgTWIsIE1iKTt9IGNhdGNoIChhKSB7TGIgPSAhMTt9ZnVuY3Rpb24gTmIoYSwgYiwgYywgZCwgZSwgZiwgZywgaCwgaykge3ZhciBsID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTt0cnkge2IuYXBwbHkoYywgbCk7fSBjYXRjaCAobSkge3RoaXMub25FcnJvcihtKTt9fXZhciBPYiA9ICExLFBiID0gbnVsbCxRYiA9ICExLFJiID0gbnVsbCxTYiA9IHsgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihhKSB7T2IgPSAhMDtQYiA9IGE7fSB9O2Z1bmN0aW9uIFRiKGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgsIGspIHtPYiA9ICExO1BiID0gbnVsbDtOYi5hcHBseShTYiwgYXJndW1lbnRzKTt9CiAgICAgICAgICBmdW5jdGlvbiBVYihhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBrKSB7VGIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtpZiAoT2IpIHtpZiAoT2IpIHt2YXIgbCA9IFBiO09iID0gITE7UGIgPSBudWxsO30gZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FiIHx8IChRYiA9ICEwLCBSYiA9IGwpO319ZnVuY3Rpb24gVmIoYSkge3ZhciBiID0gYSxjID0gYTtpZiAoYS5hbHRlcm5hdGUpIGZvciAoOyBiLnJldHVybjspIGIgPSBiLnJldHVybjtlbHNlIHthID0gYjtkbyBiID0gYSwgMCAhPT0gKGIuZmxhZ3MgJiA0MDk4KSAmJiAoYyA9IGIucmV0dXJuKSwgYSA9IGIucmV0dXJuOyB3aGlsZSAoYSk7fXJldHVybiAzID09PSBiLnRhZyA/IGMgOiBudWxsO31mdW5jdGlvbiBXYihhKSB7aWYgKDEzID09PSBhLnRhZykge3ZhciBiID0gYS5tZW1vaXplZFN0YXRlO251bGwgPT09IGIgJiYgKGEgPSBhLmFsdGVybmF0ZSwgbnVsbCAhPT0gYSAmJiAoYiA9IGEubWVtb2l6ZWRTdGF0ZSkpO2lmIChudWxsICE9PSBiKSByZXR1cm4gYi5kZWh5ZHJhdGVkO31yZXR1cm4gbnVsbDt9ZnVuY3Rpb24gWGIoYSkge2lmIChWYihhKSAhPT0gYSkgdGhyb3cgRXJyb3IocCgxODgpKTt9CiAgICAgICAgICBmdW5jdGlvbiBZYihhKSB7dmFyIGIgPSBhLmFsdGVybmF0ZTtpZiAoIWIpIHtiID0gVmIoYSk7aWYgKG51bGwgPT09IGIpIHRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIgIT09IGEgPyBudWxsIDogYTt9Zm9yICh2YXIgYyA9IGEsIGQgPSBiOzspIHt2YXIgZSA9IGMucmV0dXJuO2lmIChudWxsID09PSBlKSBicmVhazt2YXIgZiA9IGUuYWx0ZXJuYXRlO2lmIChudWxsID09PSBmKSB7ZCA9IGUucmV0dXJuO2lmIChudWxsICE9PSBkKSB7YyA9IGQ7Y29udGludWU7fWJyZWFrO31pZiAoZS5jaGlsZCA9PT0gZi5jaGlsZCkge2ZvciAoZiA9IGUuY2hpbGQ7IGY7KSB7aWYgKGYgPT09IGMpIHJldHVybiBYYihlKSwgYTtpZiAoZiA9PT0gZCkgcmV0dXJuIFhiKGUpLCBiO2YgPSBmLnNpYmxpbmc7fXRocm93IEVycm9yKHAoMTg4KSk7fWlmIChjLnJldHVybiAhPT0gZC5yZXR1cm4pIGMgPSBlLCBkID0gZjtlbHNlIHtmb3IgKHZhciBnID0gITEsIGggPSBlLmNoaWxkOyBoOykge2lmIChoID09PSBjKSB7ZyA9ICEwO2MgPSBlO2QgPSBmO2JyZWFrO31pZiAoaCA9PT0gZCkge2cgPSAhMDtkID0gZTtjID0gZjticmVhazt9aCA9IGguc2libGluZzt9aWYgKCFnKSB7Zm9yIChoID0gZi5jaGlsZDsgaDspIHtpZiAoaCA9PT0KICAgICAgICAgICAgICAgICAgICBjKSB7ZyA9ICEwO2MgPSBmO2QgPSBlO2JyZWFrO31pZiAoaCA9PT0gZCkge2cgPSAhMDtkID0gZjtjID0gZTticmVhazt9aCA9IGguc2libGluZzt9aWYgKCFnKSB0aHJvdyBFcnJvcihwKDE4OSkpO319aWYgKGMuYWx0ZXJuYXRlICE9PSBkKSB0aHJvdyBFcnJvcihwKDE5MCkpO31pZiAoMyAhPT0gYy50YWcpIHRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQgPT09IGMgPyBhIDogYjt9ZnVuY3Rpb24gWmIoYSkge2EgPSBZYihhKTtyZXR1cm4gbnVsbCAhPT0gYSA/ICRiKGEpIDogbnVsbDt9ZnVuY3Rpb24gJGIoYSkge2lmICg1ID09PSBhLnRhZyB8fCA2ID09PSBhLnRhZykgcmV0dXJuIGE7Zm9yIChhID0gYS5jaGlsZDsgbnVsbCAhPT0gYTspIHt2YXIgYiA9ICRiKGEpO2lmIChudWxsICE9PSBiKSByZXR1cm4gYjthID0gYS5zaWJsaW5nO31yZXR1cm4gbnVsbDt9CiAgICAgICAgICB2YXIgYWMgPSBjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjID0gY2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2MgPSBjYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYyA9IGNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCID0gY2EudW5zdGFibGVfbm93LGVjID0gY2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmMgPSBjYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYyA9IGNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjID0gY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWMgPSBjYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYyA9IGNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYyA9IG51bGwsbGMgPSBudWxsO2Z1bmN0aW9uIG1jKGEpIHtpZiAobGMgJiYgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KSB0cnkge2xjLm9uQ29tbWl0RmliZXJSb290KGtjLCBhLCB2b2lkIDAsIDEyOCA9PT0gKGEuY3VycmVudC5mbGFncyAmIDEyOCkpO30gY2F0Y2ggKGIpIHt9fQogICAgICAgICAgdmFyIG9jID0gTWF0aC5jbHozMiA/IE1hdGguY2x6MzIgOiBuYyxwYyA9IE1hdGgubG9nLHFjID0gTWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSkge2EgPj4+PSAwO3JldHVybiAwID09PSBhID8gMzIgOiAzMSAtIChwYyhhKSAvIHFjIHwgMCkgfCAwO312YXIgcmMgPSA2NCxzYyA9IDQxOTQzMDQ7CiAgICAgICAgICBmdW5jdGlvbiB0YyhhKSB7c3dpdGNoIChhICYgLWEpIHtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSAmIDQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSAmIDEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7CiAgICAgICAgICAgICAgZGVmYXVsdDpyZXR1cm4gYTt9fWZ1bmN0aW9uIHVjKGEsIGIpIHt2YXIgYyA9IGEucGVuZGluZ0xhbmVzO2lmICgwID09PSBjKSByZXR1cm4gMDt2YXIgZCA9IDAsZSA9IGEuc3VzcGVuZGVkTGFuZXMsZiA9IGEucGluZ2VkTGFuZXMsZyA9IGMgJiAyNjg0MzU0NTU7aWYgKDAgIT09IGcpIHt2YXIgaCA9IGcgJiB+ZTswICE9PSBoID8gZCA9IHRjKGgpIDogKGYgJj0gZywgMCAhPT0gZiAmJiAoZCA9IHRjKGYpKSk7fSBlbHNlIGcgPSBjICYgfmUsIDAgIT09IGcgPyBkID0gdGMoZykgOiAwICE9PSBmICYmIChkID0gdGMoZikpO2lmICgwID09PSBkKSByZXR1cm4gMDtpZiAoMCAhPT0gYiAmJiBiICE9PSBkICYmIDAgPT09IChiICYgZSkgJiYgKGUgPSBkICYgLWQsIGYgPSBiICYgLWIsIGUgPj0gZiB8fCAxNiA9PT0gZSAmJiAwICE9PSAoZiAmIDQxOTQyNDApKSkgcmV0dXJuIGI7MCAhPT0gKGQgJiA0KSAmJiAoZCB8PSBjICYgMTYpO2IgPSBhLmVudGFuZ2xlZExhbmVzO2lmICgwICE9PSBiKSBmb3IgKGEgPSBhLmVudGFuZ2xlbWVudHMsIGIgJj0gZDsgMCA8IGI7KSBjID0gMzEgLSBvYyhiKSwgZSA9IDEgPDwgYywgZCB8PSBhW2NdLCBiICY9IH5lO3JldHVybiBkO30KICAgICAgICAgIGZ1bmN0aW9uIHZjKGEsIGIpIHtzd2l0Y2ggKGEpIHtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYiArIDI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIgKyA1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybiAtMTtkZWZhdWx0OnJldHVybiAtMTt9fQogICAgICAgICAgZnVuY3Rpb24gd2MoYSwgYikge2ZvciAodmFyIGMgPSBhLnN1c3BlbmRlZExhbmVzLCBkID0gYS5waW5nZWRMYW5lcywgZSA9IGEuZXhwaXJhdGlvblRpbWVzLCBmID0gYS5wZW5kaW5nTGFuZXM7IDAgPCBmOykge3ZhciBnID0gMzEgLSBvYyhmKSxoID0gMSA8PCBnLGsgPSBlW2ddO2lmICgtMSA9PT0gaykge2lmICgwID09PSAoaCAmIGMpIHx8IDAgIT09IChoICYgZCkpIGVbZ10gPSB2YyhoLCBiKTt9IGVsc2UgayA8PSBiICYmIChhLmV4cGlyZWRMYW5lcyB8PSBoKTtmICY9IH5oO319ZnVuY3Rpb24geGMoYSkge2EgPSBhLnBlbmRpbmdMYW5lcyAmIC0xMDczNzQxODI1O3JldHVybiAwICE9PSBhID8gYSA6IGEgJiAxMDczNzQxODI0ID8gMTA3Mzc0MTgyNCA6IDA7fWZ1bmN0aW9uIHljKCkge3ZhciBhID0gcmM7cmMgPDw9IDE7MCA9PT0gKHJjICYgNDE5NDI0MCkgJiYgKHJjID0gNjQpO3JldHVybiBhO31mdW5jdGlvbiB6YyhhKSB7Zm9yICh2YXIgYiA9IFtdLCBjID0gMDsgMzEgPiBjOyBjKyspIGIucHVzaChhKTtyZXR1cm4gYjt9CiAgICAgICAgICBmdW5jdGlvbiBBYyhhLCBiLCBjKSB7YS5wZW5kaW5nTGFuZXMgfD0gYjs1MzY4NzA5MTIgIT09IGIgJiYgKGEuc3VzcGVuZGVkTGFuZXMgPSAwLCBhLnBpbmdlZExhbmVzID0gMCk7YSA9IGEuZXZlbnRUaW1lcztiID0gMzEgLSBvYyhiKTthW2JdID0gYzt9ZnVuY3Rpb24gQmMoYSwgYikge3ZhciBjID0gYS5wZW5kaW5nTGFuZXMgJiB+YjthLnBlbmRpbmdMYW5lcyA9IGI7YS5zdXNwZW5kZWRMYW5lcyA9IDA7YS5waW5nZWRMYW5lcyA9IDA7YS5leHBpcmVkTGFuZXMgJj0gYjthLm11dGFibGVSZWFkTGFuZXMgJj0gYjthLmVudGFuZ2xlZExhbmVzICY9IGI7YiA9IGEuZW50YW5nbGVtZW50czt2YXIgZCA9IGEuZXZlbnRUaW1lcztmb3IgKGEgPSBhLmV4cGlyYXRpb25UaW1lczsgMCA8IGM7KSB7dmFyIGUgPSAzMSAtIG9jKGMpLGYgPSAxIDw8IGU7YltlXSA9IDA7ZFtlXSA9IC0xO2FbZV0gPSAtMTtjICY9IH5mO319CiAgICAgICAgICBmdW5jdGlvbiBDYyhhLCBiKSB7dmFyIGMgPSBhLmVudGFuZ2xlZExhbmVzIHw9IGI7Zm9yIChhID0gYS5lbnRhbmdsZW1lbnRzOyBjOykge3ZhciBkID0gMzEgLSBvYyhjKSxlID0gMSA8PCBkO2UgJiBiIHwgYVtkXSAmIGIgJiYgKGFbZF0gfD0gYik7YyAmPSB+ZTt9fXZhciBDID0gMDtmdW5jdGlvbiBEYyhhKSB7YSAmPSAtYTtyZXR1cm4gMSA8IGEgPyA0IDwgYSA/IDAgIT09IChhICYgMjY4NDM1NDU1KSA/IDE2IDogNTM2ODcwOTEyIDogNCA6IDE7fXZhciBFYyxGYyxHYyxIYyxJYyxKYyA9ICExLEtjID0gW10sTGMgPSBudWxsLE1jID0gbnVsbCxOYyA9IG51bGwsT2MgPSBuZXcgTWFwKCksUGMgPSBuZXcgTWFwKCksUWMgPSBbXSxSYyA9ICJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0Ii5zcGxpdCgiICIpOwogICAgICAgICAgZnVuY3Rpb24gU2MoYSwgYikge3N3aXRjaCAoYSkge2Nhc2UgImZvY3VzaW4iOmNhc2UgImZvY3Vzb3V0IjpMYyA9IG51bGw7YnJlYWs7Y2FzZSAiZHJhZ2VudGVyIjpjYXNlICJkcmFnbGVhdmUiOk1jID0gbnVsbDticmVhaztjYXNlICJtb3VzZW92ZXIiOmNhc2UgIm1vdXNlb3V0IjpOYyA9IG51bGw7YnJlYWs7Y2FzZSAicG9pbnRlcm92ZXIiOmNhc2UgInBvaW50ZXJvdXQiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSAiZ290cG9pbnRlcmNhcHR1cmUiOmNhc2UgImxvc3Rwb2ludGVyY2FwdHVyZSI6UGMuZGVsZXRlKGIucG9pbnRlcklkKTt9fQogICAgICAgICAgZnVuY3Rpb24gVGMoYSwgYiwgYywgZCwgZSwgZikge2lmIChudWxsID09PSBhIHx8IGEubmF0aXZlRXZlbnQgIT09IGYpIHJldHVybiBhID0geyBibG9ja2VkT246IGIsIGRvbUV2ZW50TmFtZTogYywgZXZlbnRTeXN0ZW1GbGFnczogZCwgbmF0aXZlRXZlbnQ6IGYsIHRhcmdldENvbnRhaW5lcnM6IFtlXSB9LCBudWxsICE9PSBiICYmIChiID0gQ2IoYiksIG51bGwgIT09IGIgJiYgRmMoYikpLCBhO2EuZXZlbnRTeXN0ZW1GbGFncyB8PSBkO2IgPSBhLnRhcmdldENvbnRhaW5lcnM7bnVsbCAhPT0gZSAmJiAtMSA9PT0gYi5pbmRleE9mKGUpICYmIGIucHVzaChlKTtyZXR1cm4gYTt9CiAgICAgICAgICBmdW5jdGlvbiBVYyhhLCBiLCBjLCBkLCBlKSB7c3dpdGNoIChiKSB7Y2FzZSAiZm9jdXNpbiI6cmV0dXJuIExjID0gVGMoTGMsIGEsIGIsIGMsIGQsIGUpLCAhMDtjYXNlICJkcmFnZW50ZXIiOnJldHVybiBNYyA9IFRjKE1jLCBhLCBiLCBjLCBkLCBlKSwgITA7Y2FzZSAibW91c2VvdmVyIjpyZXR1cm4gTmMgPSBUYyhOYywgYSwgYiwgYywgZCwgZSksICEwO2Nhc2UgInBvaW50ZXJvdmVyIjp2YXIgZiA9IGUucG9pbnRlcklkO09jLnNldChmLCBUYyhPYy5nZXQoZikgfHwgbnVsbCwgYSwgYiwgYywgZCwgZSkpO3JldHVybiAhMDtjYXNlICJnb3Rwb2ludGVyY2FwdHVyZSI6cmV0dXJuIGYgPSBlLnBvaW50ZXJJZCwgUGMuc2V0KGYsIFRjKFBjLmdldChmKSB8fCBudWxsLCBhLCBiLCBjLCBkLCBlKSksICEwO31yZXR1cm4gITE7fQogICAgICAgICAgZnVuY3Rpb24gVmMoYSkge3ZhciBiID0gV2MoYS50YXJnZXQpO2lmIChudWxsICE9PSBiKSB7dmFyIGMgPSBWYihiKTtpZiAobnVsbCAhPT0gYykgaWYgKGIgPSBjLnRhZywgMTMgPT09IGIpIHtpZiAoYiA9IFdiKGMpLCBudWxsICE9PSBiKSB7YS5ibG9ja2VkT24gPSBiO0ljKGEucHJpb3JpdHksIGZ1bmN0aW9uICgpIHtHYyhjKTt9KTtyZXR1cm47fX0gZWxzZSBpZiAoMyA9PT0gYiAmJiBjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKSB7YS5ibG9ja2VkT24gPSAzID09PSBjLnRhZyA/IGMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gOiBudWxsO3JldHVybjt9fWEuYmxvY2tlZE9uID0gbnVsbDt9CiAgICAgICAgICBmdW5jdGlvbiBYYyhhKSB7aWYgKG51bGwgIT09IGEuYmxvY2tlZE9uKSByZXR1cm4gITE7Zm9yICh2YXIgYiA9IGEudGFyZ2V0Q29udGFpbmVyczsgMCA8IGIubGVuZ3RoOykge3ZhciBjID0gWWMoYS5kb21FdmVudE5hbWUsIGEuZXZlbnRTeXN0ZW1GbGFncywgYlswXSwgYS5uYXRpdmVFdmVudCk7aWYgKG51bGwgPT09IGMpIHtjID0gYS5uYXRpdmVFdmVudDt2YXIgZCA9IG5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSwgYyk7d2IgPSBkO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2IgPSBudWxsO30gZWxzZSByZXR1cm4gYiA9IENiKGMpLCBudWxsICE9PSBiICYmIEZjKGIpLCBhLmJsb2NrZWRPbiA9IGMsICExO2Iuc2hpZnQoKTt9cmV0dXJuICEwO31mdW5jdGlvbiBaYyhhLCBiLCBjKSB7WGMoYSkgJiYgYy5kZWxldGUoYik7fWZ1bmN0aW9uICRjKCkge0pjID0gITE7bnVsbCAhPT0gTGMgJiYgWGMoTGMpICYmIChMYyA9IG51bGwpO251bGwgIT09IE1jICYmIFhjKE1jKSAmJiAoTWMgPSBudWxsKTtudWxsICE9PSBOYyAmJiBYYyhOYykgJiYgKE5jID0gbnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyk7fQogICAgICAgICAgZnVuY3Rpb24gYWQoYSwgYikge2EuYmxvY2tlZE9uID09PSBiICYmIChhLmJsb2NrZWRPbiA9IG51bGwsIEpjIHx8IChKYyA9ICEwLCBjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCAkYykpKTt9CiAgICAgICAgICBmdW5jdGlvbiBiZChhKSB7ZnVuY3Rpb24gYihiKSB7cmV0dXJuIGFkKGIsIGEpO31pZiAoMCA8IEtjLmxlbmd0aCkge2FkKEtjWzBdLCBhKTtmb3IgKHZhciBjID0gMTsgYyA8IEtjLmxlbmd0aDsgYysrKSB7dmFyIGQgPSBLY1tjXTtkLmJsb2NrZWRPbiA9PT0gYSAmJiAoZC5ibG9ja2VkT24gPSBudWxsKTt9fW51bGwgIT09IExjICYmIGFkKExjLCBhKTtudWxsICE9PSBNYyAmJiBhZChNYywgYSk7bnVsbCAhPT0gTmMgJiYgYWQoTmMsIGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IgKGMgPSAwOyBjIDwgUWMubGVuZ3RoOyBjKyspIGQgPSBRY1tjXSwgZC5ibG9ja2VkT24gPT09IGEgJiYgKGQuYmxvY2tlZE9uID0gbnVsbCk7Zm9yICg7IDAgPCBRYy5sZW5ndGggJiYgKGMgPSBRY1swXSwgbnVsbCA9PT0gYy5ibG9ja2VkT24pOykgVmMoYyksIG51bGwgPT09IGMuYmxvY2tlZE9uICYmIFFjLnNoaWZ0KCk7fXZhciBjZCA9IHVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkID0gITA7CiAgICAgICAgICBmdW5jdGlvbiBlZChhLCBiLCBjLCBkKSB7dmFyIGUgPSBDLGYgPSBjZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb24gPSBudWxsO3RyeSB7QyA9IDEsIGZkKGEsIGIsIGMsIGQpO30gZmluYWxseSB7QyA9IGUsIGNkLnRyYW5zaXRpb24gPSBmO319ZnVuY3Rpb24gZ2QoYSwgYiwgYywgZCkge3ZhciBlID0gQyxmID0gY2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uID0gbnVsbDt0cnkge0MgPSA0LCBmZChhLCBiLCBjLCBkKTt9IGZpbmFsbHkge0MgPSBlLCBjZC50cmFuc2l0aW9uID0gZjt9fQogICAgICAgICAgZnVuY3Rpb24gZmQoYSwgYiwgYywgZCkge2lmIChkZCkge3ZhciBlID0gWWMoYSwgYiwgYywgZCk7aWYgKG51bGwgPT09IGUpIGhkKGEsIGIsIGQsIGlkLCBjKSwgU2MoYSwgZCk7ZWxzZSBpZiAoVWMoZSwgYSwgYiwgYywgZCkpIGQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZiAoU2MoYSwgZCksIGIgJiA0ICYmIC0xIDwgUmMuaW5kZXhPZihhKSkge2ZvciAoOyBudWxsICE9PSBlOykge3ZhciBmID0gQ2IoZSk7bnVsbCAhPT0gZiAmJiBFYyhmKTtmID0gWWMoYSwgYiwgYywgZCk7bnVsbCA9PT0gZiAmJiBoZChhLCBiLCBkLCBpZCwgYyk7aWYgKGYgPT09IGUpIGJyZWFrO2UgPSBmO31udWxsICE9PSBlICYmIGQuc3RvcFByb3BhZ2F0aW9uKCk7fSBlbHNlIGhkKGEsIGIsIGQsIG51bGwsIGMpO319dmFyIGlkID0gbnVsbDsKICAgICAgICAgIGZ1bmN0aW9uIFljKGEsIGIsIGMsIGQpIHtpZCA9IG51bGw7YSA9IHhiKGQpO2EgPSBXYyhhKTtpZiAobnVsbCAhPT0gYSkgaWYgKGIgPSBWYihhKSwgbnVsbCA9PT0gYikgYSA9IG51bGw7ZWxzZSBpZiAoYyA9IGIudGFnLCAxMyA9PT0gYykge2EgPSBXYihiKTtpZiAobnVsbCAhPT0gYSkgcmV0dXJuIGE7YSA9IG51bGw7fSBlbHNlIGlmICgzID09PSBjKSB7aWYgKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpIHJldHVybiAzID09PSBiLnRhZyA/IGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gOiBudWxsO2EgPSBudWxsO30gZWxzZSBiICE9PSBhICYmIChhID0gbnVsbCk7aWQgPSBhO3JldHVybiBudWxsO30KICAgICAgICAgIGZ1bmN0aW9uIGpkKGEpIHtzd2l0Y2ggKGEpIHtjYXNlICJjYW5jZWwiOmNhc2UgImNsaWNrIjpjYXNlICJjbG9zZSI6Y2FzZSAiY29udGV4dG1lbnUiOmNhc2UgImNvcHkiOmNhc2UgImN1dCI6Y2FzZSAiYXV4Y2xpY2siOmNhc2UgImRibGNsaWNrIjpjYXNlICJkcmFnZW5kIjpjYXNlICJkcmFnc3RhcnQiOmNhc2UgImRyb3AiOmNhc2UgImZvY3VzaW4iOmNhc2UgImZvY3Vzb3V0IjpjYXNlICJpbnB1dCI6Y2FzZSAiaW52YWxpZCI6Y2FzZSAia2V5ZG93biI6Y2FzZSAia2V5cHJlc3MiOmNhc2UgImtleXVwIjpjYXNlICJtb3VzZWRvd24iOmNhc2UgIm1vdXNldXAiOmNhc2UgInBhc3RlIjpjYXNlICJwYXVzZSI6Y2FzZSAicGxheSI6Y2FzZSAicG9pbnRlcmNhbmNlbCI6Y2FzZSAicG9pbnRlcmRvd24iOmNhc2UgInBvaW50ZXJ1cCI6Y2FzZSAicmF0ZWNoYW5nZSI6Y2FzZSAicmVzZXQiOmNhc2UgInJlc2l6ZSI6Y2FzZSAic2Vla2VkIjpjYXNlICJzdWJtaXQiOmNhc2UgInRvdWNoY2FuY2VsIjpjYXNlICJ0b3VjaGVuZCI6Y2FzZSAidG91Y2hzdGFydCI6Y2FzZSAidm9sdW1lY2hhbmdlIjpjYXNlICJjaGFuZ2UiOmNhc2UgInNlbGVjdGlvbmNoYW5nZSI6Y2FzZSAidGV4dElucHV0IjpjYXNlICJjb21wb3NpdGlvbnN0YXJ0IjpjYXNlICJjb21wb3NpdGlvbmVuZCI6Y2FzZSAiY29tcG9zaXRpb251cGRhdGUiOmNhc2UgImJlZm9yZWJsdXIiOmNhc2UgImFmdGVyYmx1ciI6Y2FzZSAiYmVmb3JlaW5wdXQiOmNhc2UgImJsdXIiOmNhc2UgImZ1bGxzY3JlZW5jaGFuZ2UiOmNhc2UgImZvY3VzIjpjYXNlICJoYXNoY2hhbmdlIjpjYXNlICJwb3BzdGF0ZSI6Y2FzZSAic2VsZWN0IjpjYXNlICJzZWxlY3RzdGFydCI6cmV0dXJuIDE7Y2FzZSAiZHJhZyI6Y2FzZSAiZHJhZ2VudGVyIjpjYXNlICJkcmFnZXhpdCI6Y2FzZSAiZHJhZ2xlYXZlIjpjYXNlICJkcmFnb3ZlciI6Y2FzZSAibW91c2Vtb3ZlIjpjYXNlICJtb3VzZW91dCI6Y2FzZSAibW91c2VvdmVyIjpjYXNlICJwb2ludGVybW92ZSI6Y2FzZSAicG9pbnRlcm91dCI6Y2FzZSAicG9pbnRlcm92ZXIiOmNhc2UgInNjcm9sbCI6Y2FzZSAidG9nZ2xlIjpjYXNlICJ0b3VjaG1vdmUiOmNhc2UgIndoZWVsIjpjYXNlICJtb3VzZWVudGVyIjpjYXNlICJtb3VzZWxlYXZlIjpjYXNlICJwb2ludGVyZW50ZXIiOmNhc2UgInBvaW50ZXJsZWF2ZSI6cmV0dXJuIDQ7CiAgICAgICAgICAgICAgY2FzZSAibWVzc2FnZSI6c3dpdGNoIChlYygpKSB7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2O31kZWZhdWx0OnJldHVybiAxNjt9fXZhciBrZCA9IG51bGwsbGQgPSBudWxsLG1kID0gbnVsbDtmdW5jdGlvbiBuZCgpIHtpZiAobWQpIHJldHVybiBtZDt2YXIgYSxiID0gbGQsYyA9IGIubGVuZ3RoLGQsZSA9ICJ2YWx1ZSIgaW4ga2QgPyBrZC52YWx1ZSA6IGtkLnRleHRDb250ZW50LGYgPSBlLmxlbmd0aDtmb3IgKGEgPSAwOyBhIDwgYyAmJiBiW2FdID09PSBlW2FdOyBhKyspO3ZhciBnID0gYyAtIGE7Zm9yIChkID0gMTsgZCA8PSBnICYmIGJbYyAtIGRdID09PSBlW2YgLSBkXTsgZCsrKTtyZXR1cm4gbWQgPSBlLnNsaWNlKGEsIDEgPCBkID8gMSAtIGQgOiB2b2lkIDApO30KICAgICAgICAgIGZ1bmN0aW9uIG9kKGEpIHt2YXIgYiA9IGEua2V5Q29kZTsiY2hhckNvZGUiIGluIGEgPyAoYSA9IGEuY2hhckNvZGUsIDAgPT09IGEgJiYgMTMgPT09IGIgJiYgKGEgPSAxMykpIDogYSA9IGI7MTAgPT09IGEgJiYgKGEgPSAxMyk7cmV0dXJuIDMyIDw9IGEgfHwgMTMgPT09IGEgPyBhIDogMDt9ZnVuY3Rpb24gcGQoKSB7cmV0dXJuICEwO31mdW5jdGlvbiBxZCgpIHtyZXR1cm4gITE7fQogICAgICAgICAgZnVuY3Rpb24gcmQoYSkge2Z1bmN0aW9uIGIoYiwgZCwgZSwgZiwgZykge3RoaXMuX3JlYWN0TmFtZSA9IGI7dGhpcy5fdGFyZ2V0SW5zdCA9IGU7dGhpcy50eXBlID0gZDt0aGlzLm5hdGl2ZUV2ZW50ID0gZjt0aGlzLnRhcmdldCA9IGc7dGhpcy5jdXJyZW50VGFyZ2V0ID0gbnVsbDtmb3IgKHZhciBjIGluIGEpIGEuaGFzT3duUHJvcGVydHkoYykgJiYgKGIgPSBhW2NdLCB0aGlzW2NdID0gYiA/IGIoZikgOiBmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IChudWxsICE9IGYuZGVmYXVsdFByZXZlbnRlZCA/IGYuZGVmYXVsdFByZXZlbnRlZCA6ICExID09PSBmLnJldHVyblZhbHVlKSA/IHBkIDogcWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHFkO3JldHVybiB0aGlzO31BKGIucHJvdG90eXBlLCB7IHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSAhMDt2YXIgYSA9IHRoaXMubmF0aXZlRXZlbnQ7YSAmJiAoYS5wcmV2ZW50RGVmYXVsdCA/IGEucHJldmVudERlZmF1bHQoKSA6ICJ1bmtub3duIiAhPT0gdHlwZW9mIGEucmV0dXJuVmFsdWUgJiYgKAogICAgICAgICAgICAgICAgYS5yZXR1cm5WYWx1ZSA9ICExKSwgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBwZCk7fSwgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiBzdG9wUHJvcGFnYXRpb24oKSB7dmFyIGEgPSB0aGlzLm5hdGl2ZUV2ZW50O2EgJiYgKGEuc3RvcFByb3BhZ2F0aW9uID8gYS5zdG9wUHJvcGFnYXRpb24oKSA6ICJ1bmtub3duIiAhPT0gdHlwZW9mIGEuY2FuY2VsQnViYmxlICYmIChhLmNhbmNlbEJ1YmJsZSA9ICEwKSwgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHBkKTt9LCBwZXJzaXN0OiBmdW5jdGlvbiBwZXJzaXN0KCkge30sIGlzUGVyc2lzdGVudDogcGQgfSk7cmV0dXJuIGI7fQogICAgICAgICAgdmFyIHNkID0geyBldmVudFBoYXNlOiAwLCBidWJibGVzOiAwLCBjYW5jZWxhYmxlOiAwLCB0aW1lU3RhbXA6IGZ1bmN0aW9uIHRpbWVTdGFtcChhKSB7cmV0dXJuIGEudGltZVN0YW1wIHx8IERhdGUubm93KCk7fSwgZGVmYXVsdFByZXZlbnRlZDogMCwgaXNUcnVzdGVkOiAwIH0sdGQgPSByZChzZCksdWQgPSBBKHt9LCBzZCwgeyB2aWV3OiAwLCBkZXRhaWw6IDAgfSksdmQgPSByZCh1ZCksd2QseGQseWQsQWQgPSBBKHt9LCB1ZCwgeyBzY3JlZW5YOiAwLCBzY3JlZW5ZOiAwLCBjbGllbnRYOiAwLCBjbGllbnRZOiAwLCBwYWdlWDogMCwgcGFnZVk6IDAsIGN0cmxLZXk6IDAsIHNoaWZ0S2V5OiAwLCBhbHRLZXk6IDAsIG1ldGFLZXk6IDAsIGdldE1vZGlmaWVyU3RhdGU6IHpkLCBidXR0b246IDAsIGJ1dHRvbnM6IDAsIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uIHJlbGF0ZWRUYXJnZXQoYSkge3JldHVybiB2b2lkIDAgPT09IGEucmVsYXRlZFRhcmdldCA/IGEuZnJvbUVsZW1lbnQgPT09IGEuc3JjRWxlbWVudCA/IGEudG9FbGVtZW50IDogYS5mcm9tRWxlbWVudCA6IGEucmVsYXRlZFRhcmdldDt9LCBtb3ZlbWVudFg6IGZ1bmN0aW9uIG1vdmVtZW50WChhKSB7aWYgKCJtb3ZlbWVudFgiIGluCiAgICAgICAgICAgICAgICBhKSByZXR1cm4gYS5tb3ZlbWVudFg7YSAhPT0geWQgJiYgKHlkICYmICJtb3VzZW1vdmUiID09PSBhLnR5cGUgPyAod2QgPSBhLnNjcmVlblggLSB5ZC5zY3JlZW5YLCB4ZCA9IGEuc2NyZWVuWSAtIHlkLnNjcmVlblkpIDogeGQgPSB3ZCA9IDAsIHlkID0gYSk7cmV0dXJuIHdkO30sIG1vdmVtZW50WTogZnVuY3Rpb24gbW92ZW1lbnRZKGEpIHtyZXR1cm4gIm1vdmVtZW50WSIgaW4gYSA/IGEubW92ZW1lbnRZIDogeGQ7fSB9KSxCZCA9IHJkKEFkKSxDZCA9IEEoe30sIEFkLCB7IGRhdGFUcmFuc2ZlcjogMCB9KSxEZCA9IHJkKENkKSxFZCA9IEEoe30sIHVkLCB7IHJlbGF0ZWRUYXJnZXQ6IDAgfSksRmQgPSByZChFZCksR2QgPSBBKHt9LCBzZCwgeyBhbmltYXRpb25OYW1lOiAwLCBlbGFwc2VkVGltZTogMCwgcHNldWRvRWxlbWVudDogMCB9KSxIZCA9IHJkKEdkKSxJZCA9IEEoe30sIHNkLCB7IGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIGNsaXBib2FyZERhdGEoYSkge3JldHVybiAiY2xpcGJvYXJkRGF0YSIgaW4gYSA/IGEuY2xpcGJvYXJkRGF0YSA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO30gfSksSmQgPSByZChJZCksS2QgPSBBKHt9LCBzZCwgeyBkYXRhOiAwIH0pLExkID0gcmQoS2QpLE1kID0geyBFc2M6ICJFc2NhcGUiLAogICAgICAgICAgICAgIFNwYWNlYmFyOiAiICIsIExlZnQ6ICJBcnJvd0xlZnQiLCBVcDogIkFycm93VXAiLCBSaWdodDogIkFycm93UmlnaHQiLCBEb3duOiAiQXJyb3dEb3duIiwgRGVsOiAiRGVsZXRlIiwgV2luOiAiT1MiLCBNZW51OiAiQ29udGV4dE1lbnUiLCBBcHBzOiAiQ29udGV4dE1lbnUiLCBTY3JvbGw6ICJTY3JvbGxMb2NrIiwgTW96UHJpbnRhYmxlS2V5OiAiVW5pZGVudGlmaWVkIiB9LE5kID0geyA4OiAiQmFja3NwYWNlIiwgOTogIlRhYiIsIDEyOiAiQ2xlYXIiLCAxMzogIkVudGVyIiwgMTY6ICJTaGlmdCIsIDE3OiAiQ29udHJvbCIsIDE4OiAiQWx0IiwgMTk6ICJQYXVzZSIsIDIwOiAiQ2Fwc0xvY2siLCAyNzogIkVzY2FwZSIsIDMyOiAiICIsIDMzOiAiUGFnZVVwIiwgMzQ6ICJQYWdlRG93biIsIDM1OiAiRW5kIiwgMzY6ICJIb21lIiwgMzc6ICJBcnJvd0xlZnQiLCAzODogIkFycm93VXAiLCAzOTogIkFycm93UmlnaHQiLCA0MDogIkFycm93RG93biIsIDQ1OiAiSW5zZXJ0IiwgNDY6ICJEZWxldGUiLCAxMTI6ICJGMSIsIDExMzogIkYyIiwgMTE0OiAiRjMiLCAxMTU6ICJGNCIsIDExNjogIkY1IiwgMTE3OiAiRjYiLCAxMTg6ICJGNyIsCiAgICAgICAgICAgICAgMTE5OiAiRjgiLCAxMjA6ICJGOSIsIDEyMTogIkYxMCIsIDEyMjogIkYxMSIsIDEyMzogIkYxMiIsIDE0NDogIk51bUxvY2siLCAxNDU6ICJTY3JvbGxMb2NrIiwgMjI0OiAiTWV0YSIgfSxPZCA9IHsgQWx0OiAiYWx0S2V5IiwgQ29udHJvbDogImN0cmxLZXkiLCBNZXRhOiAibWV0YUtleSIsIFNoaWZ0OiAic2hpZnRLZXkiIH07ZnVuY3Rpb24gUGQoYSkge3ZhciBiID0gdGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlID8gYi5nZXRNb2RpZmllclN0YXRlKGEpIDogKGEgPSBPZFthXSkgPyAhIWJbYV0gOiAhMTt9ZnVuY3Rpb24gemQoKSB7cmV0dXJuIFBkO30KICAgICAgICAgIHZhciBRZCA9IEEoe30sIHVkLCB7IGtleTogZnVuY3Rpb24ga2V5KGEpIHtpZiAoYS5rZXkpIHt2YXIgYiA9IE1kW2Eua2V5XSB8fCBhLmtleTtpZiAoIlVuaWRlbnRpZmllZCIgIT09IGIpIHJldHVybiBiO31yZXR1cm4gImtleXByZXNzIiA9PT0gYS50eXBlID8gKGEgPSBvZChhKSwgMTMgPT09IGEgPyAiRW50ZXIiIDogU3RyaW5nLmZyb21DaGFyQ29kZShhKSkgOiAia2V5ZG93biIgPT09IGEudHlwZSB8fCAia2V5dXAiID09PSBhLnR5cGUgPyBOZFthLmtleUNvZGVdIHx8ICJVbmlkZW50aWZpZWQiIDogIiI7fSwgY29kZTogMCwgbG9jYXRpb246IDAsIGN0cmxLZXk6IDAsIHNoaWZ0S2V5OiAwLCBhbHRLZXk6IDAsIG1ldGFLZXk6IDAsIHJlcGVhdDogMCwgbG9jYWxlOiAwLCBnZXRNb2RpZmllclN0YXRlOiB6ZCwgY2hhckNvZGU6IGZ1bmN0aW9uIGNoYXJDb2RlKGEpIHtyZXR1cm4gImtleXByZXNzIiA9PT0gYS50eXBlID8gb2QoYSkgOiAwO30sIGtleUNvZGU6IGZ1bmN0aW9uIGtleUNvZGUoYSkge3JldHVybiAia2V5ZG93biIgPT09IGEudHlwZSB8fCAia2V5dXAiID09PSBhLnR5cGUgPyBhLmtleUNvZGUgOiAwO30sIHdoaWNoOiBmdW5jdGlvbiB3aGljaChhKSB7cmV0dXJuICJrZXlwcmVzcyIgPT09CiAgICAgICAgICAgICAgICBhLnR5cGUgPyBvZChhKSA6ICJrZXlkb3duIiA9PT0gYS50eXBlIHx8ICJrZXl1cCIgPT09IGEudHlwZSA/IGEua2V5Q29kZSA6IDA7fSB9KSxSZCA9IHJkKFFkKSxTZCA9IEEoe30sIEFkLCB7IHBvaW50ZXJJZDogMCwgd2lkdGg6IDAsIGhlaWdodDogMCwgcHJlc3N1cmU6IDAsIHRhbmdlbnRpYWxQcmVzc3VyZTogMCwgdGlsdFg6IDAsIHRpbHRZOiAwLCB0d2lzdDogMCwgcG9pbnRlclR5cGU6IDAsIGlzUHJpbWFyeTogMCB9KSxUZCA9IHJkKFNkKSxVZCA9IEEoe30sIHVkLCB7IHRvdWNoZXM6IDAsIHRhcmdldFRvdWNoZXM6IDAsIGNoYW5nZWRUb3VjaGVzOiAwLCBhbHRLZXk6IDAsIG1ldGFLZXk6IDAsIGN0cmxLZXk6IDAsIHNoaWZ0S2V5OiAwLCBnZXRNb2RpZmllclN0YXRlOiB6ZCB9KSxWZCA9IHJkKFVkKSxXZCA9IEEoe30sIHNkLCB7IHByb3BlcnR5TmFtZTogMCwgZWxhcHNlZFRpbWU6IDAsIHBzZXVkb0VsZW1lbnQ6IDAgfSksWGQgPSByZChXZCksWWQgPSBBKHt9LCBBZCwgeyBkZWx0YVg6IGZ1bmN0aW9uIGRlbHRhWChhKSB7cmV0dXJuICJkZWx0YVgiIGluIGEgPyBhLmRlbHRhWCA6ICJ3aGVlbERlbHRhWCIgaW4gYSA/IC1hLndoZWVsRGVsdGFYIDogMDt9LAogICAgICAgICAgICAgIGRlbHRhWTogZnVuY3Rpb24gZGVsdGFZKGEpIHtyZXR1cm4gImRlbHRhWSIgaW4gYSA/IGEuZGVsdGFZIDogIndoZWVsRGVsdGFZIiBpbiBhID8gLWEud2hlZWxEZWx0YVkgOiAid2hlZWxEZWx0YSIgaW4gYSA/IC1hLndoZWVsRGVsdGEgOiAwO30sIGRlbHRhWjogMCwgZGVsdGFNb2RlOiAwIH0pLFpkID0gcmQoWWQpLCRkID0gWzksIDEzLCAyNywgMzJdLGFlID0gaWEgJiYgIkNvbXBvc2l0aW9uRXZlbnQiIGluIHdpbmRvdyxiZSA9IG51bGw7aWEgJiYgImRvY3VtZW50TW9kZSIgaW4gZG9jdW1lbnQgJiYgKGJlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2UgPSBpYSAmJiAiVGV4dEV2ZW50IiBpbiB3aW5kb3cgJiYgIWJlLGRlID0gaWEgJiYgKCFhZSB8fCBiZSAmJiA4IDwgYmUgJiYgMTEgPj0gYmUpLGVlID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmUgPSAhMTsKICAgICAgICAgIGZ1bmN0aW9uIGdlKGEsIGIpIHtzd2l0Y2ggKGEpIHtjYXNlICJrZXl1cCI6cmV0dXJuIC0xICE9PSAkZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSAia2V5ZG93biI6cmV0dXJuIDIyOSAhPT0gYi5rZXlDb2RlO2Nhc2UgImtleXByZXNzIjpjYXNlICJtb3VzZWRvd24iOmNhc2UgImZvY3Vzb3V0IjpyZXR1cm4gITA7ZGVmYXVsdDpyZXR1cm4gITE7fX1mdW5jdGlvbiBoZShhKSB7YSA9IGEuZGV0YWlsO3JldHVybiAib2JqZWN0IiA9PT0gdHlwZW9mIGEgJiYgImRhdGEiIGluIGEgPyBhLmRhdGEgOiBudWxsO312YXIgaWUgPSAhMTtmdW5jdGlvbiBqZShhLCBiKSB7c3dpdGNoIChhKSB7Y2FzZSAiY29tcG9zaXRpb25lbmQiOnJldHVybiBoZShiKTtjYXNlICJrZXlwcmVzcyI6aWYgKDMyICE9PSBiLndoaWNoKSByZXR1cm4gbnVsbDtmZSA9ICEwO3JldHVybiBlZTtjYXNlICJ0ZXh0SW5wdXQiOnJldHVybiBhID0gYi5kYXRhLCBhID09PSBlZSAmJiBmZSA/IG51bGwgOiBhO2RlZmF1bHQ6cmV0dXJuIG51bGw7fX0KICAgICAgICAgIGZ1bmN0aW9uIGtlKGEsIGIpIHtpZiAoaWUpIHJldHVybiAiY29tcG9zaXRpb25lbmQiID09PSBhIHx8ICFhZSAmJiBnZShhLCBiKSA/IChhID0gbmQoKSwgbWQgPSBsZCA9IGtkID0gbnVsbCwgaWUgPSAhMSwgYSkgOiBudWxsO3N3aXRjaCAoYSkge2Nhc2UgInBhc3RlIjpyZXR1cm4gbnVsbDtjYXNlICJrZXlwcmVzcyI6aWYgKCEoYi5jdHJsS2V5IHx8IGIuYWx0S2V5IHx8IGIubWV0YUtleSkgfHwgYi5jdHJsS2V5ICYmIGIuYWx0S2V5KSB7aWYgKGIuY2hhciAmJiAxIDwgYi5jaGFyLmxlbmd0aCkgcmV0dXJuIGIuY2hhcjtpZiAoYi53aGljaCkgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCk7fXJldHVybiBudWxsO2Nhc2UgImNvbXBvc2l0aW9uZW5kIjpyZXR1cm4gZGUgJiYgImtvIiAhPT0gYi5sb2NhbGUgPyBudWxsIDogYi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGw7fX0KICAgICAgICAgIHZhciBsZSA9IHsgY29sb3I6ICEwLCBkYXRlOiAhMCwgZGF0ZXRpbWU6ICEwLCAiZGF0ZXRpbWUtbG9jYWwiOiAhMCwgZW1haWw6ICEwLCBtb250aDogITAsIG51bWJlcjogITAsIHBhc3N3b3JkOiAhMCwgcmFuZ2U6ICEwLCBzZWFyY2g6ICEwLCB0ZWw6ICEwLCB0ZXh0OiAhMCwgdGltZTogITAsIHVybDogITAsIHdlZWs6ICEwIH07ZnVuY3Rpb24gbWUoYSkge3ZhciBiID0gYSAmJiBhLm5vZGVOYW1lICYmIGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gImlucHV0IiA9PT0gYiA/ICEhbGVbYS50eXBlXSA6ICJ0ZXh0YXJlYSIgPT09IGIgPyAhMCA6ICExO31mdW5jdGlvbiBuZShhLCBiLCBjLCBkKSB7RWIoZCk7YiA9IG9lKGIsICJvbkNoYW5nZSIpOzAgPCBiLmxlbmd0aCAmJiAoYyA9IG5ldyB0ZCgib25DaGFuZ2UiLCAiY2hhbmdlIiwgbnVsbCwgYywgZCksIGEucHVzaCh7IGV2ZW50OiBjLCBsaXN0ZW5lcnM6IGIgfSkpO312YXIgcGUgPSBudWxsLHFlID0gbnVsbDtmdW5jdGlvbiByZShhKSB7c2UoYSwgMCk7fWZ1bmN0aW9uIHRlKGEpIHt2YXIgYiA9IHVlKGEpO2lmIChXYShiKSkgcmV0dXJuIGE7fQogICAgICAgICAgZnVuY3Rpb24gdmUoYSwgYikge2lmICgiY2hhbmdlIiA9PT0gYSkgcmV0dXJuIGI7fXZhciB3ZSA9ICExO2lmIChpYSkge3ZhciB4ZTtpZiAoaWEpIHt2YXIgeWUgPSAoIm9uaW5wdXQiIGluIGRvY3VtZW50KTtpZiAoIXllKSB7dmFyIHplID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7emUuc2V0QXR0cmlidXRlKCJvbmlucHV0IiwgInJldHVybjsiKTt5ZSA9ICJmdW5jdGlvbiIgPT09IHR5cGVvZiB6ZS5vbmlucHV0O314ZSA9IHllO30gZWxzZSB4ZSA9ICExO3dlID0geGUgJiYgKCFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgOSA8IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7fWZ1bmN0aW9uIEFlKCkge3BlICYmIChwZS5kZXRhY2hFdmVudCgib25wcm9wZXJ0eWNoYW5nZSIsIEJlKSwgcWUgPSBwZSA9IG51bGwpO31mdW5jdGlvbiBCZShhKSB7aWYgKCJ2YWx1ZSIgPT09IGEucHJvcGVydHlOYW1lICYmIHRlKHFlKSkge3ZhciBiID0gW107bmUoYiwgcWUsIGEsIHhiKGEpKTtKYihyZSwgYik7fX0KICAgICAgICAgIGZ1bmN0aW9uIENlKGEsIGIsIGMpIHsiZm9jdXNpbiIgPT09IGEgPyAoQWUoKSwgcGUgPSBiLCBxZSA9IGMsIHBlLmF0dGFjaEV2ZW50KCJvbnByb3BlcnR5Y2hhbmdlIiwgQmUpKSA6ICJmb2N1c291dCIgPT09IGEgJiYgQWUoKTt9ZnVuY3Rpb24gRGUoYSkge2lmICgic2VsZWN0aW9uY2hhbmdlIiA9PT0gYSB8fCAia2V5dXAiID09PSBhIHx8ICJrZXlkb3duIiA9PT0gYSkgcmV0dXJuIHRlKHFlKTt9ZnVuY3Rpb24gRWUoYSwgYikge2lmICgiY2xpY2siID09PSBhKSByZXR1cm4gdGUoYik7fWZ1bmN0aW9uIEZlKGEsIGIpIHtpZiAoImlucHV0IiA9PT0gYSB8fCAiY2hhbmdlIiA9PT0gYSkgcmV0dXJuIHRlKGIpO31mdW5jdGlvbiBHZShhLCBiKSB7cmV0dXJuIGEgPT09IGIgJiYgKDAgIT09IGEgfHwgMSAvIGEgPT09IDEgLyBiKSB8fCBhICE9PSBhICYmIGIgIT09IGI7fXZhciBIZSA9ICJmdW5jdGlvbiIgPT09IHR5cGVvZiBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBHZTsKICAgICAgICAgIGZ1bmN0aW9uIEllKGEsIGIpIHtpZiAoSGUoYSwgYikpIHJldHVybiAhMDtpZiAoIm9iamVjdCIgIT09IHR5cGVvZiBhIHx8IG51bGwgPT09IGEgfHwgIm9iamVjdCIgIT09IHR5cGVvZiBiIHx8IG51bGwgPT09IGIpIHJldHVybiAhMTt2YXIgYyA9IE9iamVjdC5rZXlzKGEpLGQgPSBPYmplY3Qua2V5cyhiKTtpZiAoYy5sZW5ndGggIT09IGQubGVuZ3RoKSByZXR1cm4gITE7Zm9yIChkID0gMDsgZCA8IGMubGVuZ3RoOyBkKyspIHt2YXIgZSA9IGNbZF07aWYgKCFqYS5jYWxsKGIsIGUpIHx8ICFIZShhW2VdLCBiW2VdKSkgcmV0dXJuICExO31yZXR1cm4gITA7fWZ1bmN0aW9uIEplKGEpIHtmb3IgKDsgYSAmJiBhLmZpcnN0Q2hpbGQ7KSBhID0gYS5maXJzdENoaWxkO3JldHVybiBhO30KICAgICAgICAgIGZ1bmN0aW9uIEtlKGEsIGIpIHt2YXIgYyA9IEplKGEpO2EgPSAwO2ZvciAodmFyIGQ7IGM7KSB7aWYgKDMgPT09IGMubm9kZVR5cGUpIHtkID0gYSArIGMudGV4dENvbnRlbnQubGVuZ3RoO2lmIChhIDw9IGIgJiYgZCA+PSBiKSByZXR1cm4geyBub2RlOiBjLCBvZmZzZXQ6IGIgLSBhIH07YSA9IGQ7fWE6IHtmb3IgKDsgYzspIHtpZiAoYy5uZXh0U2libGluZykge2MgPSBjLm5leHRTaWJsaW5nO2JyZWFrIGE7fWMgPSBjLnBhcmVudE5vZGU7fWMgPSB2b2lkIDA7fWMgPSBKZShjKTt9fWZ1bmN0aW9uIExlKGEsIGIpIHtyZXR1cm4gYSAmJiBiID8gYSA9PT0gYiA/ICEwIDogYSAmJiAzID09PSBhLm5vZGVUeXBlID8gITEgOiBiICYmIDMgPT09IGIubm9kZVR5cGUgPyBMZShhLCBiLnBhcmVudE5vZGUpIDogImNvbnRhaW5zIiBpbiBhID8gYS5jb250YWlucyhiKSA6IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPyAhIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgMTYpIDogITEgOiAhMTt9CiAgICAgICAgICBmdW5jdGlvbiBNZSgpIHtmb3IgKHZhciBhID0gd2luZG93LCBiID0gWGEoKTsgYiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KSB7dHJ5IHt2YXIgYyA9ICJzdHJpbmciID09PSB0eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWY7fSBjYXRjaCAoZCkge2MgPSAhMTt9aWYgKGMpIGEgPSBiLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiID0gWGEoYS5kb2N1bWVudCk7fXJldHVybiBiO31mdW5jdGlvbiBOZShhKSB7dmFyIGIgPSBhICYmIGEubm9kZU5hbWUgJiYgYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiICYmICgiaW5wdXQiID09PSBiICYmICgidGV4dCIgPT09IGEudHlwZSB8fCAic2VhcmNoIiA9PT0gYS50eXBlIHx8ICJ0ZWwiID09PSBhLnR5cGUgfHwgInVybCIgPT09IGEudHlwZSB8fCAicGFzc3dvcmQiID09PSBhLnR5cGUpIHx8ICJ0ZXh0YXJlYSIgPT09IGIgfHwgInRydWUiID09PSBhLmNvbnRlbnRFZGl0YWJsZSk7fQogICAgICAgICAgZnVuY3Rpb24gT2UoYSkge3ZhciBiID0gTWUoKSxjID0gYS5mb2N1c2VkRWxlbSxkID0gYS5zZWxlY3Rpb25SYW5nZTtpZiAoYiAhPT0gYyAmJiBjICYmIGMub3duZXJEb2N1bWVudCAmJiBMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjKSkge2lmIChudWxsICE9PSBkICYmIE5lKGMpKSBpZiAoYiA9IGQuc3RhcnQsIGEgPSBkLmVuZCwgdm9pZCAwID09PSBhICYmIChhID0gYiksICJzZWxlY3Rpb25TdGFydCIgaW4gYykgYy5zZWxlY3Rpb25TdGFydCA9IGIsIGMuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oYSwgYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYgKGEgPSAoYiA9IGMub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgJiYgYi5kZWZhdWx0VmlldyB8fCB3aW5kb3csIGEuZ2V0U2VsZWN0aW9uKSB7YSA9IGEuZ2V0U2VsZWN0aW9uKCk7dmFyIGUgPSBjLnRleHRDb250ZW50Lmxlbmd0aCxmID0gTWF0aC5taW4oZC5zdGFydCwgZSk7ZCA9IHZvaWQgMCA9PT0gZC5lbmQgPyBmIDogTWF0aC5taW4oZC5lbmQsIGUpOyFhLmV4dGVuZCAmJiBmID4gZCAmJiAoZSA9IGQsIGQgPSBmLCBmID0gZSk7ZSA9IEtlKGMsIGYpO3ZhciBnID0gS2UoYywKICAgICAgICAgICAgICAgIGQpO2UgJiYgZyAmJiAoMSAhPT0gYS5yYW5nZUNvdW50IHx8IGEuYW5jaG9yTm9kZSAhPT0gZS5ub2RlIHx8IGEuYW5jaG9yT2Zmc2V0ICE9PSBlLm9mZnNldCB8fCBhLmZvY3VzTm9kZSAhPT0gZy5ub2RlIHx8IGEuZm9jdXNPZmZzZXQgIT09IGcub2Zmc2V0KSAmJiAoYiA9IGIuY3JlYXRlUmFuZ2UoKSwgYi5zZXRTdGFydChlLm5vZGUsIGUub2Zmc2V0KSwgYS5yZW1vdmVBbGxSYW5nZXMoKSwgZiA+IGQgPyAoYS5hZGRSYW5nZShiKSwgYS5leHRlbmQoZy5ub2RlLCBnLm9mZnNldCkpIDogKGIuc2V0RW5kKGcubm9kZSwgZy5vZmZzZXQpLCBhLmFkZFJhbmdlKGIpKSk7fWIgPSBbXTtmb3IgKGEgPSBjOyBhID0gYS5wYXJlbnROb2RlOykgMSA9PT0gYS5ub2RlVHlwZSAmJiBiLnB1c2goeyBlbGVtZW50OiBhLCBsZWZ0OiBhLnNjcm9sbExlZnQsIHRvcDogYS5zY3JvbGxUb3AgfSk7ImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGMuZm9jdXMgJiYgYy5mb2N1cygpO2ZvciAoYyA9IDA7IGMgPCBiLmxlbmd0aDsgYysrKSBhID0gYltjXSwgYS5lbGVtZW50LnNjcm9sbExlZnQgPSBhLmxlZnQsIGEuZWxlbWVudC5zY3JvbGxUb3AgPSBhLnRvcDt9fQogICAgICAgICAgdmFyIFBlID0gaWEgJiYgImRvY3VtZW50TW9kZSIgaW4gZG9jdW1lbnQgJiYgMTEgPj0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlID0gbnVsbCxSZSA9IG51bGwsU2UgPSBudWxsLFRlID0gITE7CiAgICAgICAgICBmdW5jdGlvbiBVZShhLCBiLCBjKSB7dmFyIGQgPSBjLndpbmRvdyA9PT0gYyA/IGMuZG9jdW1lbnQgOiA5ID09PSBjLm5vZGVUeXBlID8gYyA6IGMub3duZXJEb2N1bWVudDtUZSB8fCBudWxsID09IFFlIHx8IFFlICE9PSBYYShkKSB8fCAoZCA9IFFlLCAic2VsZWN0aW9uU3RhcnQiIGluIGQgJiYgTmUoZCkgPyBkID0geyBzdGFydDogZC5zZWxlY3Rpb25TdGFydCwgZW5kOiBkLnNlbGVjdGlvbkVuZCB9IDogKGQgPSAoZC5vd25lckRvY3VtZW50ICYmIGQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldFNlbGVjdGlvbigpLCBkID0geyBhbmNob3JOb2RlOiBkLmFuY2hvck5vZGUsIGFuY2hvck9mZnNldDogZC5hbmNob3JPZmZzZXQsIGZvY3VzTm9kZTogZC5mb2N1c05vZGUsIGZvY3VzT2Zmc2V0OiBkLmZvY3VzT2Zmc2V0IH0pLCBTZSAmJiBJZShTZSwgZCkgfHwgKFNlID0gZCwgZCA9IG9lKFJlLCAib25TZWxlY3QiKSwgMCA8IGQubGVuZ3RoICYmIChiID0gbmV3IHRkKCJvblNlbGVjdCIsICJzZWxlY3QiLCBudWxsLCBiLCBjKSwgYS5wdXNoKHsgZXZlbnQ6IGIsIGxpc3RlbmVyczogZCB9KSwgYi50YXJnZXQgPSBRZSkpKTt9CiAgICAgICAgICBmdW5jdGlvbiBWZShhLCBiKSB7dmFyIGMgPSB7fTtjW2EudG9Mb3dlckNhc2UoKV0gPSBiLnRvTG93ZXJDYXNlKCk7Y1siV2Via2l0IiArIGFdID0gIndlYmtpdCIgKyBiO2NbIk1veiIgKyBhXSA9ICJtb3oiICsgYjtyZXR1cm4gYzt9dmFyIFdlID0geyBhbmltYXRpb25lbmQ6IFZlKCJBbmltYXRpb24iLCAiQW5pbWF0aW9uRW5kIiksIGFuaW1hdGlvbml0ZXJhdGlvbjogVmUoIkFuaW1hdGlvbiIsICJBbmltYXRpb25JdGVyYXRpb24iKSwgYW5pbWF0aW9uc3RhcnQ6IFZlKCJBbmltYXRpb24iLCAiQW5pbWF0aW9uU3RhcnQiKSwgdHJhbnNpdGlvbmVuZDogVmUoIlRyYW5zaXRpb24iLCAiVHJhbnNpdGlvbkVuZCIpIH0sWGUgPSB7fSxZZSA9IHt9OwogICAgICAgICAgaWEgJiYgKFllID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iikuc3R5bGUsICJBbmltYXRpb25FdmVudCIgaW4gd2luZG93IHx8IChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbiwgZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sIGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLCAiVHJhbnNpdGlvbkV2ZW50IiBpbiB3aW5kb3cgfHwgZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSkge2lmIChYZVthXSkgcmV0dXJuIFhlW2FdO2lmICghV2VbYV0pIHJldHVybiBhO3ZhciBiID0gV2VbYV0sYztmb3IgKGMgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkoYykgJiYgYyBpbiBZZSkgcmV0dXJuIFhlW2FdID0gYltjXTtyZXR1cm4gYTt9dmFyICRlID0gWmUoImFuaW1hdGlvbmVuZCIpLGFmID0gWmUoImFuaW1hdGlvbml0ZXJhdGlvbiIpLGJmID0gWmUoImFuaW1hdGlvbnN0YXJ0IiksY2YgPSBaZSgidHJhbnNpdGlvbmVuZCIpLGRmID0gbmV3IE1hcCgpLGVmID0gImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsIi5zcGxpdCgiICIpOwogICAgICAgICAgZnVuY3Rpb24gZmYoYSwgYikge2RmLnNldChhLCBiKTtmYShiLCBbYV0pO31mb3IgKHZhciBnZiA9IDA7IGdmIDwgZWYubGVuZ3RoOyBnZisrKSB7dmFyIGhmID0gZWZbZ2ZdLGpmID0gaGYudG9Mb3dlckNhc2UoKSxrZiA9IGhmWzBdLnRvVXBwZXJDYXNlKCkgKyBoZi5zbGljZSgxKTtmZihqZiwgIm9uIiArIGtmKTt9ZmYoJGUsICJvbkFuaW1hdGlvbkVuZCIpO2ZmKGFmLCAib25BbmltYXRpb25JdGVyYXRpb24iKTtmZihiZiwgIm9uQW5pbWF0aW9uU3RhcnQiKTtmZigiZGJsY2xpY2siLCAib25Eb3VibGVDbGljayIpO2ZmKCJmb2N1c2luIiwgIm9uRm9jdXMiKTtmZigiZm9jdXNvdXQiLCAib25CbHVyIik7ZmYoY2YsICJvblRyYW5zaXRpb25FbmQiKTtoYSgib25Nb3VzZUVudGVyIiwgWyJtb3VzZW91dCIsICJtb3VzZW92ZXIiXSk7aGEoIm9uTW91c2VMZWF2ZSIsIFsibW91c2VvdXQiLCAibW91c2VvdmVyIl0pO2hhKCJvblBvaW50ZXJFbnRlciIsIFsicG9pbnRlcm91dCIsICJwb2ludGVyb3ZlciJdKTsKICAgICAgICAgIGhhKCJvblBvaW50ZXJMZWF2ZSIsIFsicG9pbnRlcm91dCIsICJwb2ludGVyb3ZlciJdKTtmYSgib25DaGFuZ2UiLCAiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2UiLnNwbGl0KCIgIikpO2ZhKCJvblNlbGVjdCIsICJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2UiLnNwbGl0KCIgIikpO2ZhKCJvbkJlZm9yZUlucHV0IiwgWyJjb21wb3NpdGlvbmVuZCIsICJrZXlwcmVzcyIsICJ0ZXh0SW5wdXQiLCAicGFzdGUiXSk7ZmEoIm9uQ29tcG9zaXRpb25FbmQiLCAiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd24iLnNwbGl0KCIgIikpO2ZhKCJvbkNvbXBvc2l0aW9uU3RhcnQiLCAiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93biIuc3BsaXQoIiAiKSk7CiAgICAgICAgICBmYSgib25Db21wb3NpdGlvblVwZGF0ZSIsICJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93biIuc3BsaXQoIiAiKSk7dmFyIGxmID0gImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nIi5zcGxpdCgiICIpLG1mID0gbmV3IFNldCgiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlIi5zcGxpdCgiICIpLmNvbmNhdChsZikpOwogICAgICAgICAgZnVuY3Rpb24gbmYoYSwgYiwgYykge3ZhciBkID0gYS50eXBlIHx8ICJ1bmtub3duLWV2ZW50IjthLmN1cnJlbnRUYXJnZXQgPSBjO1ViKGQsIGIsIHZvaWQgMCwgYSk7YS5jdXJyZW50VGFyZ2V0ID0gbnVsbDt9CiAgICAgICAgICBmdW5jdGlvbiBzZShhLCBiKSB7YiA9IDAgIT09IChiICYgNCk7Zm9yICh2YXIgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKSB7dmFyIGQgPSBhW2NdLGUgPSBkLmV2ZW50O2QgPSBkLmxpc3RlbmVyczthOiB7dmFyIGYgPSB2b2lkIDA7aWYgKGIpIGZvciAodmFyIGcgPSBkLmxlbmd0aCAtIDE7IDAgPD0gZzsgZy0tKSB7dmFyIGggPSBkW2ddLGsgPSBoLmluc3RhbmNlLGwgPSBoLmN1cnJlbnRUYXJnZXQ7aCA9IGgubGlzdGVuZXI7aWYgKGsgIT09IGYgJiYgZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSBicmVhayBhO25mKGUsIGgsIGwpO2YgPSBrO30gZWxzZSBmb3IgKGcgPSAwOyBnIDwgZC5sZW5ndGg7IGcrKykge2ggPSBkW2ddO2sgPSBoLmluc3RhbmNlO2wgPSBoLmN1cnJlbnRUYXJnZXQ7aCA9IGgubGlzdGVuZXI7aWYgKGsgIT09IGYgJiYgZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSBicmVhayBhO25mKGUsIGgsIGwpO2YgPSBrO319fWlmIChRYikgdGhyb3cgYSA9IFJiLCBRYiA9ICExLCBSYiA9IG51bGwsIGE7fQogICAgICAgICAgZnVuY3Rpb24gRChhLCBiKSB7dmFyIGMgPSBiW29mXTt2b2lkIDAgPT09IGMgJiYgKGMgPSBiW29mXSA9IG5ldyBTZXQoKSk7dmFyIGQgPSBhICsgIl9fYnViYmxlIjtjLmhhcyhkKSB8fCAocGYoYiwgYSwgMiwgITEpLCBjLmFkZChkKSk7fWZ1bmN0aW9uIHFmKGEsIGIsIGMpIHt2YXIgZCA9IDA7YiAmJiAoZCB8PSA0KTtwZihjLCBhLCBkLCBiKTt9dmFyIHJmID0gIl9yZWFjdExpc3RlbmluZyIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKSB7aWYgKCFhW3JmXSkge2FbcmZdID0gITA7ZGEuZm9yRWFjaChmdW5jdGlvbiAoYikgeyJzZWxlY3Rpb25jaGFuZ2UiICE9PSBiICYmIChtZi5oYXMoYikgfHwgcWYoYiwgITEsIGEpLCBxZihiLCAhMCwgYSkpO30pO3ZhciBiID0gOSA9PT0gYS5ub2RlVHlwZSA/IGEgOiBhLm93bmVyRG9jdW1lbnQ7bnVsbCA9PT0gYiB8fCBiW3JmXSB8fCAoYltyZl0gPSAhMCwgcWYoInNlbGVjdGlvbmNoYW5nZSIsICExLCBiKSk7fX0KICAgICAgICAgIGZ1bmN0aW9uIHBmKGEsIGIsIGMsIGQpIHtzd2l0Y2ggKGpkKGIpKSB7Y2FzZSAxOnZhciBlID0gZWQ7YnJlYWs7Y2FzZSA0OmUgPSBnZDticmVhaztkZWZhdWx0OmUgPSBmZDt9YyA9IGUuYmluZChudWxsLCBiLCBjLCBhKTtlID0gdm9pZCAwOyFMYiB8fCAidG91Y2hzdGFydCIgIT09IGIgJiYgInRvdWNobW92ZSIgIT09IGIgJiYgIndoZWVsIiAhPT0gYiB8fCAoZSA9ICEwKTtkID8gdm9pZCAwICE9PSBlID8gYS5hZGRFdmVudExpc3RlbmVyKGIsIGMsIHsgY2FwdHVyZTogITAsIHBhc3NpdmU6IGUgfSkgOiBhLmFkZEV2ZW50TGlzdGVuZXIoYiwgYywgITApIDogdm9pZCAwICE9PSBlID8gYS5hZGRFdmVudExpc3RlbmVyKGIsIGMsIHsgcGFzc2l2ZTogZSB9KSA6IGEuYWRkRXZlbnRMaXN0ZW5lcihiLCBjLCAhMSk7fQogICAgICAgICAgZnVuY3Rpb24gaGQoYSwgYiwgYywgZCwgZSkge3ZhciBmID0gZDtpZiAoMCA9PT0gKGIgJiAxKSAmJiAwID09PSAoYiAmIDIpICYmIG51bGwgIT09IGQpIGE6IGZvciAoOzspIHtpZiAobnVsbCA9PT0gZCkgcmV0dXJuO3ZhciBnID0gZC50YWc7aWYgKDMgPT09IGcgfHwgNCA9PT0gZykge3ZhciBoID0gZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZiAoaCA9PT0gZSB8fCA4ID09PSBoLm5vZGVUeXBlICYmIGgucGFyZW50Tm9kZSA9PT0gZSkgYnJlYWs7aWYgKDQgPT09IGcpIGZvciAoZyA9IGQucmV0dXJuOyBudWxsICE9PSBnOykge3ZhciBrID0gZy50YWc7aWYgKDMgPT09IGsgfHwgNCA9PT0gaykgaWYgKGsgPSBnLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLCBrID09PSBlIHx8IDggPT09IGsubm9kZVR5cGUgJiYgay5wYXJlbnROb2RlID09PSBlKSByZXR1cm47ZyA9IGcucmV0dXJuO31mb3IgKDsgbnVsbCAhPT0gaDspIHtnID0gV2MoaCk7aWYgKG51bGwgPT09IGcpIHJldHVybjtrID0gZy50YWc7aWYgKDUgPT09IGsgfHwgNiA9PT0gaykge2QgPSBmID0gZztjb250aW51ZSBhO31oID0gaC5wYXJlbnROb2RlO319ZCA9IGQucmV0dXJuO31KYihmdW5jdGlvbiAoKSB7dmFyIGQgPSBmLGUgPSB4YihjKSxnID0gW107CiAgICAgICAgICAgICAgYToge3ZhciBoID0gZGYuZ2V0KGEpO2lmICh2b2lkIDAgIT09IGgpIHt2YXIgayA9IHRkLG4gPSBhO3N3aXRjaCAoYSkge2Nhc2UgImtleXByZXNzIjppZiAoMCA9PT0gb2QoYykpIGJyZWFrIGE7Y2FzZSAia2V5ZG93biI6Y2FzZSAia2V5dXAiOmsgPSBSZDticmVhaztjYXNlICJmb2N1c2luIjpuID0gImZvY3VzIjtrID0gRmQ7YnJlYWs7Y2FzZSAiZm9jdXNvdXQiOm4gPSAiYmx1ciI7ayA9IEZkO2JyZWFrO2Nhc2UgImJlZm9yZWJsdXIiOmNhc2UgImFmdGVyYmx1ciI6ayA9IEZkO2JyZWFrO2Nhc2UgImNsaWNrIjppZiAoMiA9PT0gYy5idXR0b24pIGJyZWFrIGE7Y2FzZSAiYXV4Y2xpY2siOmNhc2UgImRibGNsaWNrIjpjYXNlICJtb3VzZWRvd24iOmNhc2UgIm1vdXNlbW92ZSI6Y2FzZSAibW91c2V1cCI6Y2FzZSAibW91c2VvdXQiOmNhc2UgIm1vdXNlb3ZlciI6Y2FzZSAiY29udGV4dG1lbnUiOmsgPSBCZDticmVhaztjYXNlICJkcmFnIjpjYXNlICJkcmFnZW5kIjpjYXNlICJkcmFnZW50ZXIiOmNhc2UgImRyYWdleGl0IjpjYXNlICJkcmFnbGVhdmUiOmNhc2UgImRyYWdvdmVyIjpjYXNlICJkcmFnc3RhcnQiOmNhc2UgImRyb3AiOmsgPQogICAgICAgICAgICAgICAgICAgICAgRGQ7YnJlYWs7Y2FzZSAidG91Y2hjYW5jZWwiOmNhc2UgInRvdWNoZW5kIjpjYXNlICJ0b3VjaG1vdmUiOmNhc2UgInRvdWNoc3RhcnQiOmsgPSBWZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprID0gSGQ7YnJlYWs7Y2FzZSBjZjprID0gWGQ7YnJlYWs7Y2FzZSAic2Nyb2xsIjprID0gdmQ7YnJlYWs7Y2FzZSAid2hlZWwiOmsgPSBaZDticmVhaztjYXNlICJjb3B5IjpjYXNlICJjdXQiOmNhc2UgInBhc3RlIjprID0gSmQ7YnJlYWs7Y2FzZSAiZ290cG9pbnRlcmNhcHR1cmUiOmNhc2UgImxvc3Rwb2ludGVyY2FwdHVyZSI6Y2FzZSAicG9pbnRlcmNhbmNlbCI6Y2FzZSAicG9pbnRlcmRvd24iOmNhc2UgInBvaW50ZXJtb3ZlIjpjYXNlICJwb2ludGVyb3V0IjpjYXNlICJwb2ludGVyb3ZlciI6Y2FzZSAicG9pbnRlcnVwIjprID0gVGQ7fXZhciB0ID0gMCAhPT0gKGIgJiA0KSxKID0gIXQgJiYgInNjcm9sbCIgPT09IGEseCA9IHQgPyBudWxsICE9PSBoID8gaCArICJDYXB0dXJlIiA6IG51bGwgOiBoO3QgPSBbXTtmb3IgKHZhciB3ID0gZCwgdTsgbnVsbCAhPT0KICAgICAgICAgICAgICAgICAgdzspIHt1ID0gdzt2YXIgRiA9IHUuc3RhdGVOb2RlOzUgPT09IHUudGFnICYmIG51bGwgIT09IEYgJiYgKHUgPSBGLCBudWxsICE9PSB4ICYmIChGID0gS2IodywgeCksIG51bGwgIT0gRiAmJiB0LnB1c2godGYodywgRiwgdSkpKSk7aWYgKEopIGJyZWFrO3cgPSB3LnJldHVybjt9MCA8IHQubGVuZ3RoICYmIChoID0gbmV3IGsoaCwgbiwgbnVsbCwgYywgZSksIGcucHVzaCh7IGV2ZW50OiBoLCBsaXN0ZW5lcnM6IHQgfSkpO319aWYgKDAgPT09IChiICYgNykpIHthOiB7aCA9ICJtb3VzZW92ZXIiID09PSBhIHx8ICJwb2ludGVyb3ZlciIgPT09IGE7ayA9ICJtb3VzZW91dCIgPT09IGEgfHwgInBvaW50ZXJvdXQiID09PSBhO2lmIChoICYmIGMgIT09IHdiICYmIChuID0gYy5yZWxhdGVkVGFyZ2V0IHx8IGMuZnJvbUVsZW1lbnQpICYmIChXYyhuKSB8fCBuW3VmXSkpIGJyZWFrIGE7aWYgKGsgfHwgaCkge2ggPSBlLndpbmRvdyA9PT0gZSA/IGUgOiAoaCA9IGUub3duZXJEb2N1bWVudCkgPyBoLmRlZmF1bHRWaWV3IHx8IGgucGFyZW50V2luZG93IDogd2luZG93O2lmIChrKSB7aWYgKG4gPSBjLnJlbGF0ZWRUYXJnZXQgfHwgYy50b0VsZW1lbnQsIGsgPSBkLCBuID0gbiA/IFdjKG4pIDogbnVsbCwgbnVsbCAhPT0KICAgICAgICAgICAgICAgICAgICAgIG4gJiYgKEogPSBWYihuKSwgbiAhPT0gSiB8fCA1ICE9PSBuLnRhZyAmJiA2ICE9PSBuLnRhZykpIG4gPSBudWxsO30gZWxzZSBrID0gbnVsbCwgbiA9IGQ7aWYgKGsgIT09IG4pIHt0ID0gQmQ7RiA9ICJvbk1vdXNlTGVhdmUiO3ggPSAib25Nb3VzZUVudGVyIjt3ID0gIm1vdXNlIjtpZiAoInBvaW50ZXJvdXQiID09PSBhIHx8ICJwb2ludGVyb3ZlciIgPT09IGEpIHQgPSBUZCwgRiA9ICJvblBvaW50ZXJMZWF2ZSIsIHggPSAib25Qb2ludGVyRW50ZXIiLCB3ID0gInBvaW50ZXIiO0ogPSBudWxsID09IGsgPyBoIDogdWUoayk7dSA9IG51bGwgPT0gbiA/IGggOiB1ZShuKTtoID0gbmV3IHQoRiwgdyArICJsZWF2ZSIsIGssIGMsIGUpO2gudGFyZ2V0ID0gSjtoLnJlbGF0ZWRUYXJnZXQgPSB1O0YgPSBudWxsO1djKGUpID09PSBkICYmICh0ID0gbmV3IHQoeCwgdyArICJlbnRlciIsIG4sIGMsIGUpLCB0LnRhcmdldCA9IHUsIHQucmVsYXRlZFRhcmdldCA9IEosIEYgPSB0KTtKID0gRjtpZiAoayAmJiBuKSBiOiB7dCA9IGs7eCA9IG47dyA9IDA7Zm9yICh1ID0gdDsgdTsgdSA9IHZmKHUpKSB3Kys7dSA9IDA7Zm9yIChGID0geDsgRjsgRiA9IHZmKEYpKSB1Kys7Zm9yICg7IDAgPCB3IC0gdTspIHQgPSB2Zih0KSwgdy0tO2ZvciAoOyAwIDwgdSAtIHc7KSB4ID0KICAgICAgICAgICAgICAgICAgICAgICAgdmYoeCksIHUtLTtmb3IgKDsgdy0tOykge2lmICh0ID09PSB4IHx8IG51bGwgIT09IHggJiYgdCA9PT0geC5hbHRlcm5hdGUpIGJyZWFrIGI7dCA9IHZmKHQpO3ggPSB2Zih4KTt9dCA9IG51bGw7fSBlbHNlIHQgPSBudWxsO251bGwgIT09IGsgJiYgd2YoZywgaCwgaywgdCwgITEpO251bGwgIT09IG4gJiYgbnVsbCAhPT0gSiAmJiB3ZihnLCBKLCBuLCB0LCAhMCk7fX19YToge2ggPSBkID8gdWUoZCkgOiB3aW5kb3c7ayA9IGgubm9kZU5hbWUgJiYgaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmICgic2VsZWN0IiA9PT0gayB8fCAiaW5wdXQiID09PSBrICYmICJmaWxlIiA9PT0gaC50eXBlKSB2YXIgbmEgPSB2ZTtlbHNlIGlmIChtZShoKSkge2lmICh3ZSkgbmEgPSBGZTtlbHNlIHtuYSA9IERlO3ZhciB4YSA9IENlO319IGVsc2UgKGsgPSBoLm5vZGVOYW1lKSAmJiAiaW5wdXQiID09PSBrLnRvTG93ZXJDYXNlKCkgJiYgKCJjaGVja2JveCIgPT09IGgudHlwZSB8fCAicmFkaW8iID09PSBoLnR5cGUpICYmIChuYSA9IEVlKTtpZiAobmEgJiYgKG5hID0gbmEoYSwgZCkpKSB7bmUoZywgbmEsIGMsIGUpO2JyZWFrIGE7fXhhICYmIHhhKGEsIGgsIGQpOyJmb2N1c291dCIgPT09IGEgJiYgKHhhID0gaC5fd3JhcHBlclN0YXRlKSAmJgogICAgICAgICAgICAgICAgICB4YS5jb250cm9sbGVkICYmICJudW1iZXIiID09PSBoLnR5cGUgJiYgY2IoaCwgIm51bWJlciIsIGgudmFsdWUpO314YSA9IGQgPyB1ZShkKSA6IHdpbmRvdztzd2l0Y2ggKGEpIHtjYXNlICJmb2N1c2luIjppZiAobWUoeGEpIHx8ICJ0cnVlIiA9PT0geGEuY29udGVudEVkaXRhYmxlKSBRZSA9IHhhLCBSZSA9IGQsIFNlID0gbnVsbDticmVhaztjYXNlICJmb2N1c291dCI6U2UgPSBSZSA9IFFlID0gbnVsbDticmVhaztjYXNlICJtb3VzZWRvd24iOlRlID0gITA7YnJlYWs7Y2FzZSAiY29udGV4dG1lbnUiOmNhc2UgIm1vdXNldXAiOmNhc2UgImRyYWdlbmQiOlRlID0gITE7VWUoZywgYywgZSk7YnJlYWs7Y2FzZSAic2VsZWN0aW9uY2hhbmdlIjppZiAoUGUpIGJyZWFrO2Nhc2UgImtleWRvd24iOmNhc2UgImtleXVwIjpVZShnLCBjLCBlKTt9dmFyICRhO2lmIChhZSkgYjoge3N3aXRjaCAoYSkge2Nhc2UgImNvbXBvc2l0aW9uc3RhcnQiOnZhciBiYSA9ICJvbkNvbXBvc2l0aW9uU3RhcnQiO2JyZWFrIGI7Y2FzZSAiY29tcG9zaXRpb25lbmQiOmJhID0gIm9uQ29tcG9zaXRpb25FbmQiOwogICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtjYXNlICJjb21wb3NpdGlvbnVwZGF0ZSI6YmEgPSAib25Db21wb3NpdGlvblVwZGF0ZSI7YnJlYWsgYjt9YmEgPSB2b2lkIDA7fSBlbHNlIGllID8gZ2UoYSwgYykgJiYgKGJhID0gIm9uQ29tcG9zaXRpb25FbmQiKSA6ICJrZXlkb3duIiA9PT0gYSAmJiAyMjkgPT09IGMua2V5Q29kZSAmJiAoYmEgPSAib25Db21wb3NpdGlvblN0YXJ0Iik7YmEgJiYgKGRlICYmICJrbyIgIT09IGMubG9jYWxlICYmIChpZSB8fCAib25Db21wb3NpdGlvblN0YXJ0IiAhPT0gYmEgPyAib25Db21wb3NpdGlvbkVuZCIgPT09IGJhICYmIGllICYmICgkYSA9IG5kKCkpIDogKGtkID0gZSwgbGQgPSAidmFsdWUiIGluIGtkID8ga2QudmFsdWUgOiBrZC50ZXh0Q29udGVudCwgaWUgPSAhMCkpLCB4YSA9IG9lKGQsIGJhKSwgMCA8IHhhLmxlbmd0aCAmJiAoYmEgPSBuZXcgTGQoYmEsIGEsIG51bGwsIGMsIGUpLCBnLnB1c2goeyBldmVudDogYmEsIGxpc3RlbmVyczogeGEgfSksICRhID8gYmEuZGF0YSA9ICRhIDogKCRhID0gaGUoYyksIG51bGwgIT09ICRhICYmIChiYS5kYXRhID0gJGEpKSkpO2lmICgkYSA9IGNlID8gamUoYSwgYykgOiBrZShhLCBjKSkgZCA9IG9lKGQsICJvbkJlZm9yZUlucHV0IiksCiAgICAgICAgICAgICAgICAwIDwgZC5sZW5ndGggJiYgKGUgPSBuZXcgTGQoIm9uQmVmb3JlSW5wdXQiLCAiYmVmb3JlaW5wdXQiLCBudWxsLCBjLCBlKSwgZy5wdXNoKHsgZXZlbnQ6IGUsIGxpc3RlbmVyczogZCB9KSwgZS5kYXRhID0gJGEpO31zZShnLCBiKTt9KTt9ZnVuY3Rpb24gdGYoYSwgYiwgYykge3JldHVybiB7IGluc3RhbmNlOiBhLCBsaXN0ZW5lcjogYiwgY3VycmVudFRhcmdldDogYyB9O31mdW5jdGlvbiBvZShhLCBiKSB7Zm9yICh2YXIgYyA9IGIgKyAiQ2FwdHVyZSIsIGQgPSBbXTsgbnVsbCAhPT0gYTspIHt2YXIgZSA9IGEsZiA9IGUuc3RhdGVOb2RlOzUgPT09IGUudGFnICYmIG51bGwgIT09IGYgJiYgKGUgPSBmLCBmID0gS2IoYSwgYyksIG51bGwgIT0gZiAmJiBkLnVuc2hpZnQodGYoYSwgZiwgZSkpLCBmID0gS2IoYSwgYiksIG51bGwgIT0gZiAmJiBkLnB1c2godGYoYSwgZiwgZSkpKTthID0gYS5yZXR1cm47fXJldHVybiBkO31mdW5jdGlvbiB2ZihhKSB7aWYgKG51bGwgPT09IGEpIHJldHVybiBudWxsO2RvIGEgPSBhLnJldHVybjsgd2hpbGUgKGEgJiYgNSAhPT0gYS50YWcpO3JldHVybiBhID8gYSA6IG51bGw7fQogICAgICAgICAgZnVuY3Rpb24gd2YoYSwgYiwgYywgZCwgZSkge2ZvciAodmFyIGYgPSBiLl9yZWFjdE5hbWUsIGcgPSBbXTsgbnVsbCAhPT0gYyAmJiBjICE9PSBkOykge3ZhciBoID0gYyxrID0gaC5hbHRlcm5hdGUsbCA9IGguc3RhdGVOb2RlO2lmIChudWxsICE9PSBrICYmIGsgPT09IGQpIGJyZWFrOzUgPT09IGgudGFnICYmIG51bGwgIT09IGwgJiYgKGggPSBsLCBlID8gKGsgPSBLYihjLCBmKSwgbnVsbCAhPSBrICYmIGcudW5zaGlmdCh0ZihjLCBrLCBoKSkpIDogZSB8fCAoayA9IEtiKGMsIGYpLCBudWxsICE9IGsgJiYgZy5wdXNoKHRmKGMsIGssIGgpKSkpO2MgPSBjLnJldHVybjt9MCAhPT0gZy5sZW5ndGggJiYgYS5wdXNoKHsgZXZlbnQ6IGIsIGxpc3RlbmVyczogZyB9KTt9dmFyIHhmID0gL1xyXG4/L2cseWYgPSAvXHUwMDAwfFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpIHtyZXR1cm4gKCJzdHJpbmciID09PSB0eXBlb2YgYSA/IGEgOiAiIiArIGEpLnJlcGxhY2UoeGYsICJcbiIpLnJlcGxhY2UoeWYsICIiKTt9ZnVuY3Rpb24gQWYoYSwgYiwgYykge2IgPSB6ZihiKTtpZiAoemYoYSkgIT09IGIgJiYgYykgdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKSB7fQogICAgICAgICAgdmFyIENmID0gbnVsbCxEZiA9IG51bGw7ZnVuY3Rpb24gRWYoYSwgYikge3JldHVybiAidGV4dGFyZWEiID09PSBhIHx8ICJub3NjcmlwdCIgPT09IGEgfHwgInN0cmluZyIgPT09IHR5cGVvZiBiLmNoaWxkcmVuIHx8ICJudW1iZXIiID09PSB0eXBlb2YgYi5jaGlsZHJlbiB8fCAib2JqZWN0IiA9PT0gdHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiYgbnVsbCAhPT0gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJiBudWxsICE9IGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO30KICAgICAgICAgIHZhciBGZiA9ICJmdW5jdGlvbiIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IHZvaWQgMCxHZiA9ICJmdW5jdGlvbiIgPT09IHR5cGVvZiBjbGVhclRpbWVvdXQgPyBjbGVhclRpbWVvdXQgOiB2b2lkIDAsSGYgPSAiZnVuY3Rpb24iID09PSB0eXBlb2YgUHJvbWlzZSA/IFByb21pc2UgOiB2b2lkIDAsSmYgPSAiZnVuY3Rpb24iID09PSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPyBxdWV1ZU1pY3JvdGFzayA6ICJ1bmRlZmluZWQiICE9PSB0eXBlb2YgSGYgPyBmdW5jdGlvbiAoYSkge3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpO30gOiBGZjtmdW5jdGlvbiBJZihhKSB7c2V0VGltZW91dChmdW5jdGlvbiAoKSB7dGhyb3cgYTt9KTt9CiAgICAgICAgICBmdW5jdGlvbiBLZihhLCBiKSB7dmFyIGMgPSBiLGQgPSAwO2RvIHt2YXIgZSA9IGMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZiAoZSAmJiA4ID09PSBlLm5vZGVUeXBlKSBpZiAoYyA9IGUuZGF0YSwgIi8kIiA9PT0gYykge2lmICgwID09PSBkKSB7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm47fWQtLTt9IGVsc2UgIiQiICE9PSBjICYmICIkPyIgIT09IGMgJiYgIiQhIiAhPT0gYyB8fCBkKys7YyA9IGU7fSB3aGlsZSAoYyk7YmQoYik7fWZ1bmN0aW9uIExmKGEpIHtmb3IgKDsgbnVsbCAhPSBhOyBhID0gYS5uZXh0U2libGluZykge3ZhciBiID0gYS5ub2RlVHlwZTtpZiAoMSA9PT0gYiB8fCAzID09PSBiKSBicmVhaztpZiAoOCA9PT0gYikge2IgPSBhLmRhdGE7aWYgKCIkIiA9PT0gYiB8fCAiJCEiID09PSBiIHx8ICIkPyIgPT09IGIpIGJyZWFrO2lmICgiLyQiID09PSBiKSByZXR1cm4gbnVsbDt9fXJldHVybiBhO30KICAgICAgICAgIGZ1bmN0aW9uIE1mKGEpIHthID0gYS5wcmV2aW91c1NpYmxpbmc7Zm9yICh2YXIgYiA9IDA7IGE7KSB7aWYgKDggPT09IGEubm9kZVR5cGUpIHt2YXIgYyA9IGEuZGF0YTtpZiAoIiQiID09PSBjIHx8ICIkISIgPT09IGMgfHwgIiQ/IiA9PT0gYykge2lmICgwID09PSBiKSByZXR1cm4gYTtiLS07fSBlbHNlICIvJCIgPT09IGMgJiYgYisrO31hID0gYS5wcmV2aW91c1NpYmxpbmc7fXJldHVybiBudWxsO312YXIgTmYgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZiA9ICJfX3JlYWN0RmliZXIkIiArIE5mLFBmID0gIl9fcmVhY3RQcm9wcyQiICsgTmYsdWYgPSAiX19yZWFjdENvbnRhaW5lciQiICsgTmYsb2YgPSAiX19yZWFjdEV2ZW50cyQiICsgTmYsUWYgPSAiX19yZWFjdExpc3RlbmVycyQiICsgTmYsUmYgPSAiX19yZWFjdEhhbmRsZXMkIiArIE5mOwogICAgICAgICAgZnVuY3Rpb24gV2MoYSkge3ZhciBiID0gYVtPZl07aWYgKGIpIHJldHVybiBiO2ZvciAodmFyIGMgPSBhLnBhcmVudE5vZGU7IGM7KSB7aWYgKGIgPSBjW3VmXSB8fCBjW09mXSkge2MgPSBiLmFsdGVybmF0ZTtpZiAobnVsbCAhPT0gYi5jaGlsZCB8fCBudWxsICE9PSBjICYmIG51bGwgIT09IGMuY2hpbGQpIGZvciAoYSA9IE1mKGEpOyBudWxsICE9PSBhOykge2lmIChjID0gYVtPZl0pIHJldHVybiBjO2EgPSBNZihhKTt9cmV0dXJuIGI7fWEgPSBjO2MgPSBhLnBhcmVudE5vZGU7fXJldHVybiBudWxsO31mdW5jdGlvbiBDYihhKSB7YSA9IGFbT2ZdIHx8IGFbdWZdO3JldHVybiAhYSB8fCA1ICE9PSBhLnRhZyAmJiA2ICE9PSBhLnRhZyAmJiAxMyAhPT0gYS50YWcgJiYgMyAhPT0gYS50YWcgPyBudWxsIDogYTt9ZnVuY3Rpb24gdWUoYSkge2lmICg1ID09PSBhLnRhZyB8fCA2ID09PSBhLnRhZykgcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSkge3JldHVybiBhW1BmXSB8fCBudWxsO312YXIgU2YgPSBbXSxUZiA9IC0xO2Z1bmN0aW9uIFVmKGEpIHtyZXR1cm4geyBjdXJyZW50OiBhIH07fQogICAgICAgICAgZnVuY3Rpb24gRShhKSB7MCA+IFRmIHx8IChhLmN1cnJlbnQgPSBTZltUZl0sIFNmW1RmXSA9IG51bGwsIFRmLS0pO31mdW5jdGlvbiBHKGEsIGIpIHtUZisrO1NmW1RmXSA9IGEuY3VycmVudDthLmN1cnJlbnQgPSBiO312YXIgVmYgPSB7fSxIID0gVWYoVmYpLFdmID0gVWYoITEpLFhmID0gVmY7ZnVuY3Rpb24gWWYoYSwgYikge3ZhciBjID0gYS50eXBlLmNvbnRleHRUeXBlcztpZiAoIWMpIHJldHVybiBWZjt2YXIgZCA9IGEuc3RhdGVOb2RlO2lmIChkICYmIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCA9PT0gYikgcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGUgPSB7fSxmO2ZvciAoZiBpbiBjKSBlW2ZdID0gYltmXTtkICYmIChhID0gYS5zdGF0ZU5vZGUsIGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCA9IGIsIGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQgPSBlKTtyZXR1cm4gZTt9CiAgICAgICAgICBmdW5jdGlvbiBaZihhKSB7YSA9IGEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwgIT09IGEgJiYgdm9pZCAwICE9PSBhO31mdW5jdGlvbiAkZigpIHtFKFdmKTtFKEgpO31mdW5jdGlvbiBhZyhhLCBiLCBjKSB7aWYgKEguY3VycmVudCAhPT0gVmYpIHRocm93IEVycm9yKHAoMTY4KSk7RyhILCBiKTtHKFdmLCBjKTt9ZnVuY3Rpb24gYmcoYSwgYiwgYykge3ZhciBkID0gYS5zdGF0ZU5vZGU7YiA9IGIuY2hpbGRDb250ZXh0VHlwZXM7aWYgKCJmdW5jdGlvbiIgIT09IHR5cGVvZiBkLmdldENoaWxkQ29udGV4dCkgcmV0dXJuIGM7ZCA9IGQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yICh2YXIgZSBpbiBkKSBpZiAoIShlIGluIGIpKSB0aHJvdyBFcnJvcihwKDEwOCwgUmEoYSkgfHwgIlVua25vd24iLCBlKSk7cmV0dXJuIEEoe30sIGMsIGQpO30KICAgICAgICAgIGZ1bmN0aW9uIGNnKGEpIHthID0gKGEgPSBhLnN0YXRlTm9kZSkgJiYgYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCB8fCBWZjtYZiA9IEguY3VycmVudDtHKEgsIGEpO0coV2YsIFdmLmN1cnJlbnQpO3JldHVybiAhMDt9ZnVuY3Rpb24gZGcoYSwgYiwgYykge3ZhciBkID0gYS5zdGF0ZU5vZGU7aWYgKCFkKSB0aHJvdyBFcnJvcihwKDE2OSkpO2MgPyAoYSA9IGJnKGEsIGIsIFhmKSwgZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCA9IGEsIEUoV2YpLCBFKEgpLCBHKEgsIGEpKSA6IEUoV2YpO0coV2YsIGMpO312YXIgZWcgPSBudWxsLGZnID0gITEsZ2cgPSAhMTtmdW5jdGlvbiBoZyhhKSB7bnVsbCA9PT0gZWcgPyBlZyA9IFthXSA6IGVnLnB1c2goYSk7fWZ1bmN0aW9uIGlnKGEpIHtmZyA9ICEwO2hnKGEpO30KICAgICAgICAgIGZ1bmN0aW9uIGpnKCkge2lmICghZ2cgJiYgbnVsbCAhPT0gZWcpIHtnZyA9ICEwO3ZhciBhID0gMCxiID0gQzt0cnkge3ZhciBjID0gZWc7Zm9yIChDID0gMTsgYSA8IGMubGVuZ3RoOyBhKyspIHt2YXIgZCA9IGNbYV07ZG8gZCA9IGQoITApOyB3aGlsZSAobnVsbCAhPT0gZCk7fWVnID0gbnVsbDtmZyA9ICExO30gY2F0Y2ggKGUpIHt0aHJvdyBudWxsICE9PSBlZyAmJiAoZWcgPSBlZy5zbGljZShhICsgMSkpLCBhYyhmYywgamcpLCBlO30gZmluYWxseSB7QyA9IGIsIGdnID0gITE7fX1yZXR1cm4gbnVsbDt9dmFyIGtnID0gW10sbGcgPSAwLG1nID0gbnVsbCxuZyA9IDAsb2cgPSBbXSxwZyA9IDAscWcgPSBudWxsLHJnID0gMSxzZyA9ICIiO2Z1bmN0aW9uIHRnKGEsIGIpIHtrZ1tsZysrXSA9IG5nO2tnW2xnKytdID0gbWc7bWcgPSBhO25nID0gYjt9CiAgICAgICAgICBmdW5jdGlvbiB1ZyhhLCBiLCBjKSB7b2dbcGcrK10gPSByZztvZ1twZysrXSA9IHNnO29nW3BnKytdID0gcWc7cWcgPSBhO3ZhciBkID0gcmc7YSA9IHNnO3ZhciBlID0gMzIgLSBvYyhkKSAtIDE7ZCAmPSB+KDEgPDwgZSk7YyArPSAxO3ZhciBmID0gMzIgLSBvYyhiKSArIGU7aWYgKDMwIDwgZikge3ZhciBnID0gZSAtIGUgJSA1O2YgPSAoZCAmICgxIDw8IGcpIC0gMSkudG9TdHJpbmcoMzIpO2QgPj49IGc7ZSAtPSBnO3JnID0gMSA8PCAzMiAtIG9jKGIpICsgZSB8IGMgPDwgZSB8IGQ7c2cgPSBmICsgYTt9IGVsc2UgcmcgPSAxIDw8IGYgfCBjIDw8IGUgfCBkLCBzZyA9IGE7fWZ1bmN0aW9uIHZnKGEpIHtudWxsICE9PSBhLnJldHVybiAmJiAodGcoYSwgMSksIHVnKGEsIDEsIDApKTt9ZnVuY3Rpb24gd2coYSkge2ZvciAoOyBhID09PSBtZzspIG1nID0ga2dbLS1sZ10sIGtnW2xnXSA9IG51bGwsIG5nID0ga2dbLS1sZ10sIGtnW2xnXSA9IG51bGw7Zm9yICg7IGEgPT09IHFnOykgcWcgPSBvZ1stLXBnXSwgb2dbcGddID0gbnVsbCwgc2cgPSBvZ1stLXBnXSwgb2dbcGddID0gbnVsbCwgcmcgPSBvZ1stLXBnXSwgb2dbcGddID0gbnVsbDt9dmFyIHhnID0gbnVsbCx5ZyA9IG51bGwsSSA9ICExLHpnID0gbnVsbDsKICAgICAgICAgIGZ1bmN0aW9uIEFnKGEsIGIpIHt2YXIgYyA9IEJnKDUsIG51bGwsIG51bGwsIDApO2MuZWxlbWVudFR5cGUgPSAiREVMRVRFRCI7Yy5zdGF0ZU5vZGUgPSBiO2MucmV0dXJuID0gYTtiID0gYS5kZWxldGlvbnM7bnVsbCA9PT0gYiA/IChhLmRlbGV0aW9ucyA9IFtjXSwgYS5mbGFncyB8PSAxNikgOiBiLnB1c2goYyk7fQogICAgICAgICAgZnVuY3Rpb24gQ2coYSwgYikge3N3aXRjaCAoYS50YWcpIHtjYXNlIDU6dmFyIGMgPSBhLnR5cGU7YiA9IDEgIT09IGIubm9kZVR5cGUgfHwgYy50b0xvd2VyQ2FzZSgpICE9PSBiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPyBudWxsIDogYjtyZXR1cm4gbnVsbCAhPT0gYiA/IChhLnN0YXRlTm9kZSA9IGIsIHhnID0gYSwgeWcgPSBMZihiLmZpcnN0Q2hpbGQpLCAhMCkgOiAhMTtjYXNlIDY6cmV0dXJuIGIgPSAiIiA9PT0gYS5wZW5kaW5nUHJvcHMgfHwgMyAhPT0gYi5ub2RlVHlwZSA/IG51bGwgOiBiLCBudWxsICE9PSBiID8gKGEuc3RhdGVOb2RlID0gYiwgeGcgPSBhLCB5ZyA9IG51bGwsICEwKSA6ICExO2Nhc2UgMTM6cmV0dXJuIGIgPSA4ICE9PSBiLm5vZGVUeXBlID8gbnVsbCA6IGIsIG51bGwgIT09IGIgPyAoYyA9IG51bGwgIT09IHFnID8geyBpZDogcmcsIG92ZXJmbG93OiBzZyB9IDogbnVsbCwgYS5tZW1vaXplZFN0YXRlID0geyBkZWh5ZHJhdGVkOiBiLCB0cmVlQ29udGV4dDogYywgcmV0cnlMYW5lOiAxMDczNzQxODI0IH0sIGMgPSBCZygxOCwgbnVsbCwgbnVsbCwgMCksIGMuc3RhdGVOb2RlID0gYiwgYy5yZXR1cm4gPSBhLCBhLmNoaWxkID0gYywgeGcgPSBhLCB5ZyA9CiAgICAgICAgICAgICAgICBudWxsLCAhMCkgOiAhMTtkZWZhdWx0OnJldHVybiAhMTt9fWZ1bmN0aW9uIERnKGEpIHtyZXR1cm4gMCAhPT0gKGEubW9kZSAmIDEpICYmIDAgPT09IChhLmZsYWdzICYgMTI4KTt9ZnVuY3Rpb24gRWcoYSkge2lmIChJKSB7dmFyIGIgPSB5ZztpZiAoYikge3ZhciBjID0gYjtpZiAoIUNnKGEsIGIpKSB7aWYgKERnKGEpKSB0aHJvdyBFcnJvcihwKDQxOCkpO2IgPSBMZihjLm5leHRTaWJsaW5nKTt2YXIgZCA9IHhnO2IgJiYgQ2coYSwgYikgPyBBZyhkLCBjKSA6IChhLmZsYWdzID0gYS5mbGFncyAmIC00MDk3IHwgMiwgSSA9ICExLCB4ZyA9IGEpO319IGVsc2Uge2lmIChEZyhhKSkgdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzID0gYS5mbGFncyAmIC00MDk3IHwgMjtJID0gITE7eGcgPSBhO319fWZ1bmN0aW9uIEZnKGEpIHtmb3IgKGEgPSBhLnJldHVybjsgbnVsbCAhPT0gYSAmJiA1ICE9PSBhLnRhZyAmJiAzICE9PSBhLnRhZyAmJiAxMyAhPT0gYS50YWc7KSBhID0gYS5yZXR1cm47eGcgPSBhO30KICAgICAgICAgIGZ1bmN0aW9uIEdnKGEpIHtpZiAoYSAhPT0geGcpIHJldHVybiAhMTtpZiAoIUkpIHJldHVybiBGZyhhKSwgSSA9ICEwLCAhMTt2YXIgYjsoYiA9IDMgIT09IGEudGFnKSAmJiAhKGIgPSA1ICE9PSBhLnRhZykgJiYgKGIgPSBhLnR5cGUsIGIgPSAiaGVhZCIgIT09IGIgJiYgImJvZHkiICE9PSBiICYmICFFZihhLnR5cGUsIGEubWVtb2l6ZWRQcm9wcykpO2lmIChiICYmIChiID0geWcpKSB7aWYgKERnKGEpKSB0aHJvdyBIZygpLCBFcnJvcihwKDQxOCkpO2ZvciAoOyBiOykgQWcoYSwgYiksIGIgPSBMZihiLm5leHRTaWJsaW5nKTt9RmcoYSk7aWYgKDEzID09PSBhLnRhZykge2EgPSBhLm1lbW9pemVkU3RhdGU7YSA9IG51bGwgIT09IGEgPyBhLmRlaHlkcmF0ZWQgOiBudWxsO2lmICghYSkgdGhyb3cgRXJyb3IocCgzMTcpKTthOiB7YSA9IGEubmV4dFNpYmxpbmc7Zm9yIChiID0gMDsgYTspIHtpZiAoOCA9PT0gYS5ub2RlVHlwZSkge3ZhciBjID0gYS5kYXRhO2lmICgiLyQiID09PSBjKSB7aWYgKDAgPT09IGIpIHt5ZyA9IExmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGE7fWItLTt9IGVsc2UgIiQiICE9PSBjICYmICIkISIgIT09IGMgJiYgIiQ/IiAhPT0gYyB8fCBiKys7fWEgPSBhLm5leHRTaWJsaW5nO315ZyA9CiAgICAgICAgICAgICAgICBudWxsO319IGVsc2UgeWcgPSB4ZyA/IExmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKSA6IG51bGw7cmV0dXJuICEwO31mdW5jdGlvbiBIZygpIHtmb3IgKHZhciBhID0geWc7IGE7KSBhID0gTGYoYS5uZXh0U2libGluZyk7fWZ1bmN0aW9uIElnKCkge3lnID0geGcgPSBudWxsO0kgPSAhMTt9ZnVuY3Rpb24gSmcoYSkge251bGwgPT09IHpnID8gemcgPSBbYV0gOiB6Zy5wdXNoKGEpO312YXIgS2cgPSB1YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLCBiKSB7aWYgKGEgJiYgYS5kZWZhdWx0UHJvcHMpIHtiID0gQSh7fSwgYik7YSA9IGEuZGVmYXVsdFByb3BzO2ZvciAodmFyIGMgaW4gYSkgdm9pZCAwID09PSBiW2NdICYmIChiW2NdID0gYVtjXSk7cmV0dXJuIGI7fXJldHVybiBiO312YXIgTWcgPSBVZihudWxsKSxOZyA9IG51bGwsT2cgPSBudWxsLFBnID0gbnVsbDtmdW5jdGlvbiBRZygpIHtQZyA9IE9nID0gTmcgPSBudWxsO31mdW5jdGlvbiBSZyhhKSB7dmFyIGIgPSBNZy5jdXJyZW50O0UoTWcpO2EuX2N1cnJlbnRWYWx1ZSA9IGI7fQogICAgICAgICAgZnVuY3Rpb24gU2coYSwgYiwgYykge2ZvciAoOyBudWxsICE9PSBhOykge3ZhciBkID0gYS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyAmIGIpICE9PSBiID8gKGEuY2hpbGRMYW5lcyB8PSBiLCBudWxsICE9PSBkICYmIChkLmNoaWxkTGFuZXMgfD0gYikpIDogbnVsbCAhPT0gZCAmJiAoZC5jaGlsZExhbmVzICYgYikgIT09IGIgJiYgKGQuY2hpbGRMYW5lcyB8PSBiKTtpZiAoYSA9PT0gYykgYnJlYWs7YSA9IGEucmV0dXJuO319ZnVuY3Rpb24gVGcoYSwgYikge05nID0gYTtQZyA9IE9nID0gbnVsbDthID0gYS5kZXBlbmRlbmNpZXM7bnVsbCAhPT0gYSAmJiBudWxsICE9PSBhLmZpcnN0Q29udGV4dCAmJiAoMCAhPT0gKGEubGFuZXMgJiBiKSAmJiAoVWcgPSAhMCksIGEuZmlyc3RDb250ZXh0ID0gbnVsbCk7fQogICAgICAgICAgZnVuY3Rpb24gVmcoYSkge3ZhciBiID0gYS5fY3VycmVudFZhbHVlO2lmIChQZyAhPT0gYSkgaWYgKGEgPSB7IGNvbnRleHQ6IGEsIG1lbW9pemVkVmFsdWU6IGIsIG5leHQ6IG51bGwgfSwgbnVsbCA9PT0gT2cpIHtpZiAobnVsbCA9PT0gTmcpIHRocm93IEVycm9yKHAoMzA4KSk7T2cgPSBhO05nLmRlcGVuZGVuY2llcyA9IHsgbGFuZXM6IDAsIGZpcnN0Q29udGV4dDogYSB9O30gZWxzZSBPZyA9IE9nLm5leHQgPSBhO3JldHVybiBiO312YXIgV2cgPSBudWxsO2Z1bmN0aW9uIFhnKGEpIHtudWxsID09PSBXZyA/IFdnID0gW2FdIDogV2cucHVzaChhKTt9ZnVuY3Rpb24gWWcoYSwgYiwgYywgZCkge3ZhciBlID0gYi5pbnRlcmxlYXZlZDtudWxsID09PSBlID8gKGMubmV4dCA9IGMsIFhnKGIpKSA6IChjLm5leHQgPSBlLm5leHQsIGUubmV4dCA9IGMpO2IuaW50ZXJsZWF2ZWQgPSBjO3JldHVybiBaZyhhLCBkKTt9CiAgICAgICAgICBmdW5jdGlvbiBaZyhhLCBiKSB7YS5sYW5lcyB8PSBiO3ZhciBjID0gYS5hbHRlcm5hdGU7bnVsbCAhPT0gYyAmJiAoYy5sYW5lcyB8PSBiKTtjID0gYTtmb3IgKGEgPSBhLnJldHVybjsgbnVsbCAhPT0gYTspIGEuY2hpbGRMYW5lcyB8PSBiLCBjID0gYS5hbHRlcm5hdGUsIG51bGwgIT09IGMgJiYgKGMuY2hpbGRMYW5lcyB8PSBiKSwgYyA9IGEsIGEgPSBhLnJldHVybjtyZXR1cm4gMyA9PT0gYy50YWcgPyBjLnN0YXRlTm9kZSA6IG51bGw7fXZhciAkZyA9ICExO2Z1bmN0aW9uIGFoKGEpIHthLnVwZGF0ZVF1ZXVlID0geyBiYXNlU3RhdGU6IGEubWVtb2l6ZWRTdGF0ZSwgZmlyc3RCYXNlVXBkYXRlOiBudWxsLCBsYXN0QmFzZVVwZGF0ZTogbnVsbCwgc2hhcmVkOiB7IHBlbmRpbmc6IG51bGwsIGludGVybGVhdmVkOiBudWxsLCBsYW5lczogMCB9LCBlZmZlY3RzOiBudWxsIH07fQogICAgICAgICAgZnVuY3Rpb24gYmgoYSwgYikge2EgPSBhLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWUgPT09IGEgJiYgKGIudXBkYXRlUXVldWUgPSB7IGJhc2VTdGF0ZTogYS5iYXNlU3RhdGUsIGZpcnN0QmFzZVVwZGF0ZTogYS5maXJzdEJhc2VVcGRhdGUsIGxhc3RCYXNlVXBkYXRlOiBhLmxhc3RCYXNlVXBkYXRlLCBzaGFyZWQ6IGEuc2hhcmVkLCBlZmZlY3RzOiBhLmVmZmVjdHMgfSk7fWZ1bmN0aW9uIGNoKGEsIGIpIHtyZXR1cm4geyBldmVudFRpbWU6IGEsIGxhbmU6IGIsIHRhZzogMCwgcGF5bG9hZDogbnVsbCwgY2FsbGJhY2s6IG51bGwsIG5leHQ6IG51bGwgfTt9CiAgICAgICAgICBmdW5jdGlvbiBkaChhLCBiLCBjKSB7dmFyIGQgPSBhLnVwZGF0ZVF1ZXVlO2lmIChudWxsID09PSBkKSByZXR1cm4gbnVsbDtkID0gZC5zaGFyZWQ7aWYgKDAgIT09IChLICYgMikpIHt2YXIgZSA9IGQucGVuZGluZztudWxsID09PSBlID8gYi5uZXh0ID0gYiA6IChiLm5leHQgPSBlLm5leHQsIGUubmV4dCA9IGIpO2QucGVuZGluZyA9IGI7cmV0dXJuIFpnKGEsIGMpO31lID0gZC5pbnRlcmxlYXZlZDtudWxsID09PSBlID8gKGIubmV4dCA9IGIsIFhnKGQpKSA6IChiLm5leHQgPSBlLm5leHQsIGUubmV4dCA9IGIpO2QuaW50ZXJsZWF2ZWQgPSBiO3JldHVybiBaZyhhLCBjKTt9ZnVuY3Rpb24gZWgoYSwgYiwgYykge2IgPSBiLnVwZGF0ZVF1ZXVlO2lmIChudWxsICE9PSBiICYmIChiID0gYi5zaGFyZWQsIDAgIT09IChjICYgNDE5NDI0MCkpKSB7dmFyIGQgPSBiLmxhbmVzO2QgJj0gYS5wZW5kaW5nTGFuZXM7YyB8PSBkO2IubGFuZXMgPSBjO0NjKGEsIGMpO319CiAgICAgICAgICBmdW5jdGlvbiBmaChhLCBiKSB7dmFyIGMgPSBhLnVwZGF0ZVF1ZXVlLGQgPSBhLmFsdGVybmF0ZTtpZiAobnVsbCAhPT0gZCAmJiAoZCA9IGQudXBkYXRlUXVldWUsIGMgPT09IGQpKSB7dmFyIGUgPSBudWxsLGYgPSBudWxsO2MgPSBjLmZpcnN0QmFzZVVwZGF0ZTtpZiAobnVsbCAhPT0gYykge2RvIHt2YXIgZyA9IHsgZXZlbnRUaW1lOiBjLmV2ZW50VGltZSwgbGFuZTogYy5sYW5lLCB0YWc6IGMudGFnLCBwYXlsb2FkOiBjLnBheWxvYWQsIGNhbGxiYWNrOiBjLmNhbGxiYWNrLCBuZXh0OiBudWxsIH07bnVsbCA9PT0gZiA/IGUgPSBmID0gZyA6IGYgPSBmLm5leHQgPSBnO2MgPSBjLm5leHQ7fSB3aGlsZSAobnVsbCAhPT0gYyk7bnVsbCA9PT0gZiA/IGUgPSBmID0gYiA6IGYgPSBmLm5leHQgPSBiO30gZWxzZSBlID0gZiA9IGI7YyA9IHsgYmFzZVN0YXRlOiBkLmJhc2VTdGF0ZSwgZmlyc3RCYXNlVXBkYXRlOiBlLCBsYXN0QmFzZVVwZGF0ZTogZiwgc2hhcmVkOiBkLnNoYXJlZCwgZWZmZWN0czogZC5lZmZlY3RzIH07YS51cGRhdGVRdWV1ZSA9IGM7cmV0dXJuO31hID0gYy5sYXN0QmFzZVVwZGF0ZTtudWxsID09PSBhID8gYy5maXJzdEJhc2VVcGRhdGUgPSBiIDogYS5uZXh0ID0KICAgICAgICAgICAgYjtjLmxhc3RCYXNlVXBkYXRlID0gYjt9CiAgICAgICAgICBmdW5jdGlvbiBnaChhLCBiLCBjLCBkKSB7dmFyIGUgPSBhLnVwZGF0ZVF1ZXVlOyRnID0gITE7dmFyIGYgPSBlLmZpcnN0QmFzZVVwZGF0ZSxnID0gZS5sYXN0QmFzZVVwZGF0ZSxoID0gZS5zaGFyZWQucGVuZGluZztpZiAobnVsbCAhPT0gaCkge2Uuc2hhcmVkLnBlbmRpbmcgPSBudWxsO3ZhciBrID0gaCxsID0gay5uZXh0O2submV4dCA9IG51bGw7bnVsbCA9PT0gZyA/IGYgPSBsIDogZy5uZXh0ID0gbDtnID0gazt2YXIgbSA9IGEuYWx0ZXJuYXRlO251bGwgIT09IG0gJiYgKG0gPSBtLnVwZGF0ZVF1ZXVlLCBoID0gbS5sYXN0QmFzZVVwZGF0ZSwgaCAhPT0gZyAmJiAobnVsbCA9PT0gaCA/IG0uZmlyc3RCYXNlVXBkYXRlID0gbCA6IGgubmV4dCA9IGwsIG0ubGFzdEJhc2VVcGRhdGUgPSBrKSk7fWlmIChudWxsICE9PSBmKSB7dmFyIHEgPSBlLmJhc2VTdGF0ZTtnID0gMDttID0gbCA9IGsgPSBudWxsO2ggPSBmO2RvIHt2YXIgciA9IGgubGFuZSx5ID0gaC5ldmVudFRpbWU7aWYgKChkICYgcikgPT09IHIpIHtudWxsICE9PSBtICYmIChtID0gbS5uZXh0ID0geyBldmVudFRpbWU6IHksIGxhbmU6IDAsIHRhZzogaC50YWcsIHBheWxvYWQ6IGgucGF5bG9hZCwgY2FsbGJhY2s6IGguY2FsbGJhY2ssCiAgICAgICAgICAgICAgICAgICAgbmV4dDogbnVsbCB9KTthOiB7dmFyIG4gPSBhLHQgPSBoO3IgPSBiO3kgPSBjO3N3aXRjaCAodC50YWcpIHtjYXNlIDE6biA9IHQucGF5bG9hZDtpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIG4pIHtxID0gbi5jYWxsKHksIHEsIHIpO2JyZWFrIGE7fXEgPSBuO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3MgPSBuLmZsYWdzICYgLTY1NTM3IHwgMTI4O2Nhc2UgMDpuID0gdC5wYXlsb2FkO3IgPSAiZnVuY3Rpb24iID09PSB0eXBlb2YgbiA/IG4uY2FsbCh5LCBxLCByKSA6IG47aWYgKG51bGwgPT09IHIgfHwgdm9pZCAwID09PSByKSBicmVhayBhO3EgPSBBKHt9LCBxLCByKTticmVhayBhO2Nhc2UgMjokZyA9ICEwO319bnVsbCAhPT0gaC5jYWxsYmFjayAmJiAwICE9PSBoLmxhbmUgJiYgKGEuZmxhZ3MgfD0gNjQsIHIgPSBlLmVmZmVjdHMsIG51bGwgPT09IHIgPyBlLmVmZmVjdHMgPSBbaF0gOiByLnB1c2goaCkpO30gZWxzZSB5ID0geyBldmVudFRpbWU6IHksIGxhbmU6IHIsIHRhZzogaC50YWcsIHBheWxvYWQ6IGgucGF5bG9hZCwgY2FsbGJhY2s6IGguY2FsbGJhY2ssIG5leHQ6IG51bGwgfSwgbnVsbCA9PT0gbSA/IChsID0gbSA9IHksIGsgPSBxKSA6IG0gPSBtLm5leHQgPSB5LCBnIHw9IHI7CiAgICAgICAgICAgICAgICBoID0gaC5uZXh0O2lmIChudWxsID09PSBoKSBpZiAoaCA9IGUuc2hhcmVkLnBlbmRpbmcsIG51bGwgPT09IGgpIGJyZWFrO2Vsc2UgciA9IGgsIGggPSByLm5leHQsIHIubmV4dCA9IG51bGwsIGUubGFzdEJhc2VVcGRhdGUgPSByLCBlLnNoYXJlZC5wZW5kaW5nID0gbnVsbDt9IHdoaWxlICgxKTtudWxsID09PSBtICYmIChrID0gcSk7ZS5iYXNlU3RhdGUgPSBrO2UuZmlyc3RCYXNlVXBkYXRlID0gbDtlLmxhc3RCYXNlVXBkYXRlID0gbTtiID0gZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYgKG51bGwgIT09IGIpIHtlID0gYjtkbyBnIHw9IGUubGFuZSwgZSA9IGUubmV4dDsgd2hpbGUgKGUgIT09IGIpO30gZWxzZSBudWxsID09PSBmICYmIChlLnNoYXJlZC5sYW5lcyA9IDApO2hoIHw9IGc7YS5sYW5lcyA9IGc7YS5tZW1vaXplZFN0YXRlID0gcTt9fQogICAgICAgICAgZnVuY3Rpb24gaWgoYSwgYiwgYykge2EgPSBiLmVmZmVjdHM7Yi5lZmZlY3RzID0gbnVsbDtpZiAobnVsbCAhPT0gYSkgZm9yIChiID0gMDsgYiA8IGEubGVuZ3RoOyBiKyspIHt2YXIgZCA9IGFbYl0sZSA9IGQuY2FsbGJhY2s7aWYgKG51bGwgIT09IGUpIHtkLmNhbGxiYWNrID0gbnVsbDtkID0gYztpZiAoImZ1bmN0aW9uIiAhPT0gdHlwZW9mIGUpIHRocm93IEVycm9yKHAoMTkxLCBlKSk7ZS5jYWxsKGQpO319fXZhciBqaCA9IG5ldyBhYS5Db21wb25lbnQoKS5yZWZzO2Z1bmN0aW9uIGtoKGEsIGIsIGMsIGQpIHtiID0gYS5tZW1vaXplZFN0YXRlO2MgPSBjKGQsIGIpO2MgPSBudWxsID09PSBjIHx8IHZvaWQgMCA9PT0gYyA/IGIgOiBBKHt9LCBiLCBjKTthLm1lbW9pemVkU3RhdGUgPSBjOzAgPT09IGEubGFuZXMgJiYgKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlID0gYyk7fQogICAgICAgICAgdmFyIG5oID0geyBpc01vdW50ZWQ6IGZ1bmN0aW9uIGlzTW91bnRlZChhKSB7cmV0dXJuIChhID0gYS5fcmVhY3RJbnRlcm5hbHMpID8gVmIoYSkgPT09IGEgOiAhMTt9LCBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIGVucXVldWVTZXRTdGF0ZShhLCBiLCBjKSB7YSA9IGEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkID0gTCgpLGUgPSBsaChhKSxmID0gY2goZCwgZSk7Zi5wYXlsb2FkID0gYjt2b2lkIDAgIT09IGMgJiYgbnVsbCAhPT0gYyAmJiAoZi5jYWxsYmFjayA9IGMpO2IgPSBkaChhLCBmLCBlKTtudWxsICE9PSBiICYmIChtaChiLCBhLCBlLCBkKSwgZWgoYiwgYSwgZSkpO30sIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIGVucXVldWVSZXBsYWNlU3RhdGUoYSwgYiwgYykge2EgPSBhLl9yZWFjdEludGVybmFsczt2YXIgZCA9IEwoKSxlID0gbGgoYSksZiA9IGNoKGQsIGUpO2YudGFnID0gMTtmLnBheWxvYWQgPSBiO3ZvaWQgMCAhPT0gYyAmJiBudWxsICE9PSBjICYmIChmLmNhbGxiYWNrID0gYyk7YiA9IGRoKGEsIGYsIGUpO251bGwgIT09IGIgJiYgKG1oKGIsIGEsIGUsIGQpLCBlaChiLCBhLCBlKSk7fSwgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiBlbnF1ZXVlRm9yY2VVcGRhdGUoYSwgYikge2EgPSBhLl9yZWFjdEludGVybmFsczt2YXIgYyA9IEwoKSxkID0KICAgICAgICAgICAgICAgIGxoKGEpLGUgPSBjaChjLCBkKTtlLnRhZyA9IDI7dm9pZCAwICE9PSBiICYmIG51bGwgIT09IGIgJiYgKGUuY2FsbGJhY2sgPSBiKTtiID0gZGgoYSwgZSwgZCk7bnVsbCAhPT0gYiAmJiAobWgoYiwgYSwgZCwgYyksIGVoKGIsIGEsIGQpKTt9IH07ZnVuY3Rpb24gb2goYSwgYiwgYywgZCwgZSwgZiwgZykge2EgPSBhLnN0YXRlTm9kZTtyZXR1cm4gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlID8gYS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCwgZiwgZykgOiBiLnByb3RvdHlwZSAmJiBiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCA/ICFJZShjLCBkKSB8fCAhSWUoZSwgZikgOiAhMDt9CiAgICAgICAgICBmdW5jdGlvbiBwaChhLCBiLCBjKSB7dmFyIGQgPSAhMSxlID0gVmY7dmFyIGYgPSBiLmNvbnRleHRUeXBlOyJvYmplY3QiID09PSB0eXBlb2YgZiAmJiBudWxsICE9PSBmID8gZiA9IFZnKGYpIDogKGUgPSBaZihiKSA/IFhmIDogSC5jdXJyZW50LCBkID0gYi5jb250ZXh0VHlwZXMsIGYgPSAoZCA9IG51bGwgIT09IGQgJiYgdm9pZCAwICE9PSBkKSA/IFlmKGEsIGUpIDogVmYpO2IgPSBuZXcgYihjLCBmKTthLm1lbW9pemVkU3RhdGUgPSBudWxsICE9PSBiLnN0YXRlICYmIHZvaWQgMCAhPT0gYi5zdGF0ZSA/IGIuc3RhdGUgOiBudWxsO2IudXBkYXRlciA9IG5oO2Euc3RhdGVOb2RlID0gYjtiLl9yZWFjdEludGVybmFscyA9IGE7ZCAmJiAoYSA9IGEuc3RhdGVOb2RlLCBhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQgPSBlLCBhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0ID0gZik7cmV0dXJuIGI7fQogICAgICAgICAgZnVuY3Rpb24gcWgoYSwgYiwgYywgZCkge2EgPSBiLnN0YXRlOyJmdW5jdGlvbiIgPT09IHR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiYgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsIGQpOyJmdW5jdGlvbiIgPT09IHR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYywgZCk7Yi5zdGF0ZSAhPT0gYSAmJiBuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsIGIuc3RhdGUsIG51bGwpO30KICAgICAgICAgIGZ1bmN0aW9uIHJoKGEsIGIsIGMsIGQpIHt2YXIgZSA9IGEuc3RhdGVOb2RlO2UucHJvcHMgPSBjO2Uuc3RhdGUgPSBhLm1lbW9pemVkU3RhdGU7ZS5yZWZzID0gamg7YWgoYSk7dmFyIGYgPSBiLmNvbnRleHRUeXBlOyJvYmplY3QiID09PSB0eXBlb2YgZiAmJiBudWxsICE9PSBmID8gZS5jb250ZXh0ID0gVmcoZikgOiAoZiA9IFpmKGIpID8gWGYgOiBILmN1cnJlbnQsIGUuY29udGV4dCA9IFlmKGEsIGYpKTtlLnN0YXRlID0gYS5tZW1vaXplZFN0YXRlO2YgPSBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsiZnVuY3Rpb24iID09PSB0eXBlb2YgZiAmJiAoa2goYSwgYiwgZiwgYyksIGUuc3RhdGUgPSBhLm1lbW9pemVkU3RhdGUpOyJmdW5jdGlvbiIgPT09IHR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fCAiZnVuY3Rpb24iID09PSB0eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fCAiZnVuY3Rpb24iICE9PSB0eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmICJmdW5jdGlvbiIgIT09IHR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCB8fCAoYiA9IGUuc3RhdGUsCiAgICAgICAgICAgICJmdW5jdGlvbiIgPT09IHR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCAmJiBlLmNvbXBvbmVudFdpbGxNb3VudCgpLCAiZnVuY3Rpb24iID09PSB0eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLCBiICE9PSBlLnN0YXRlICYmIG5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSwgZS5zdGF0ZSwgbnVsbCksIGdoKGEsIGMsIGUsIGQpLCBlLnN0YXRlID0gYS5tZW1vaXplZFN0YXRlKTsiZnVuY3Rpb24iID09PSB0eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCAmJiAoYS5mbGFncyB8PSA0MTk0MzA4KTt9CiAgICAgICAgICBmdW5jdGlvbiBzaChhLCBiLCBjKSB7YSA9IGMucmVmO2lmIChudWxsICE9PSBhICYmICJmdW5jdGlvbiIgIT09IHR5cGVvZiBhICYmICJvYmplY3QiICE9PSB0eXBlb2YgYSkge2lmIChjLl9vd25lcikge2MgPSBjLl9vd25lcjtpZiAoYykge2lmICgxICE9PSBjLnRhZykgdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZCA9IGMuc3RhdGVOb2RlO31pZiAoIWQpIHRocm93IEVycm9yKHAoMTQ3LCBhKSk7dmFyIGUgPSBkLGYgPSAiIiArIGE7aWYgKG51bGwgIT09IGIgJiYgbnVsbCAhPT0gYi5yZWYgJiYgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGIucmVmICYmIGIucmVmLl9zdHJpbmdSZWYgPT09IGYpIHJldHVybiBiLnJlZjtiID0gZnVuY3Rpb24gYihhKSB7dmFyIGIgPSBlLnJlZnM7YiA9PT0gamggJiYgKGIgPSBlLnJlZnMgPSB7fSk7bnVsbCA9PT0gYSA/IGRlbGV0ZSBiW2ZdIDogYltmXSA9IGE7fTtiLl9zdHJpbmdSZWYgPSBmO3JldHVybiBiO31pZiAoInN0cmluZyIgIT09IHR5cGVvZiBhKSB0aHJvdyBFcnJvcihwKDI4NCkpO2lmICghYy5fb3duZXIpIHRocm93IEVycm9yKHAoMjkwLCBhKSk7fXJldHVybiBhO30KICAgICAgICAgIGZ1bmN0aW9uIHRoKGEsIGIpIHthID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsICJbb2JqZWN0IE9iamVjdF0iID09PSBhID8gIm9iamVjdCB3aXRoIGtleXMgeyIgKyBPYmplY3Qua2V5cyhiKS5qb2luKCIsICIpICsgIn0iIDogYSkpO31mdW5jdGlvbiB1aChhKSB7dmFyIGIgPSBhLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpO30KICAgICAgICAgIGZ1bmN0aW9uIHZoKGEpIHtmdW5jdGlvbiBiKGIsIGMpIHtpZiAoYSkge3ZhciBkID0gYi5kZWxldGlvbnM7bnVsbCA9PT0gZCA/IChiLmRlbGV0aW9ucyA9IFtjXSwgYi5mbGFncyB8PSAxNikgOiBkLnB1c2goYyk7fX1mdW5jdGlvbiBjKGMsIGQpIHtpZiAoIWEpIHJldHVybiBudWxsO2ZvciAoOyBudWxsICE9PSBkOykgYihjLCBkKSwgZCA9IGQuc2libGluZztyZXR1cm4gbnVsbDt9ZnVuY3Rpb24gZChhLCBiKSB7Zm9yIChhID0gbmV3IE1hcCgpOyBudWxsICE9PSBiOykgbnVsbCAhPT0gYi5rZXkgPyBhLnNldChiLmtleSwgYikgOiBhLnNldChiLmluZGV4LCBiKSwgYiA9IGIuc2libGluZztyZXR1cm4gYTt9ZnVuY3Rpb24gZShhLCBiKSB7YSA9IHdoKGEsIGIpO2EuaW5kZXggPSAwO2Euc2libGluZyA9IG51bGw7cmV0dXJuIGE7fWZ1bmN0aW9uIGYoYiwgYywgZCkge2IuaW5kZXggPSBkO2lmICghYSkgcmV0dXJuIGIuZmxhZ3MgfD0gMTA0ODU3NiwgYztkID0gYi5hbHRlcm5hdGU7aWYgKG51bGwgIT09IGQpIHJldHVybiBkID0gZC5pbmRleCwgZCA8IGMgPyAoYi5mbGFncyB8PSAyLCBjKSA6IGQ7Yi5mbGFncyB8PSAyO3JldHVybiBjO31mdW5jdGlvbiBnKGIpIHthICYmCiAgICAgICAgICAgICAgbnVsbCA9PT0gYi5hbHRlcm5hdGUgJiYgKGIuZmxhZ3MgfD0gMik7cmV0dXJuIGI7fWZ1bmN0aW9uIGgoYSwgYiwgYywgZCkge2lmIChudWxsID09PSBiIHx8IDYgIT09IGIudGFnKSByZXR1cm4gYiA9IHhoKGMsIGEubW9kZSwgZCksIGIucmV0dXJuID0gYSwgYjtiID0gZShiLCBjKTtiLnJldHVybiA9IGE7cmV0dXJuIGI7fWZ1bmN0aW9uIGsoYSwgYiwgYywgZCkge3ZhciBmID0gYy50eXBlO2lmIChmID09PSB5YSkgcmV0dXJuIG0oYSwgYiwgYy5wcm9wcy5jaGlsZHJlbiwgZCwgYy5rZXkpO2lmIChudWxsICE9PSBiICYmIChiLmVsZW1lbnRUeXBlID09PSBmIHx8ICJvYmplY3QiID09PSB0eXBlb2YgZiAmJiBudWxsICE9PSBmICYmIGYuJCR0eXBlb2YgPT09IEhhICYmIHVoKGYpID09PSBiLnR5cGUpKSByZXR1cm4gZCA9IGUoYiwgYy5wcm9wcyksIGQucmVmID0gc2goYSwgYiwgYyksIGQucmV0dXJuID0gYSwgZDtkID0geWgoYy50eXBlLCBjLmtleSwgYy5wcm9wcywgbnVsbCwgYS5tb2RlLCBkKTtkLnJlZiA9IHNoKGEsIGIsIGMpO2QucmV0dXJuID0gYTtyZXR1cm4gZDt9ZnVuY3Rpb24gbChhLCBiLCBjLCBkKSB7aWYgKG51bGwgPT09IGIgfHwgNCAhPT0gYi50YWcgfHwKICAgICAgICAgICAgICBiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBjLmNvbnRhaW5lckluZm8gfHwgYi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IGMuaW1wbGVtZW50YXRpb24pIHJldHVybiBiID0gemgoYywgYS5tb2RlLCBkKSwgYi5yZXR1cm4gPSBhLCBiO2IgPSBlKGIsIGMuY2hpbGRyZW4gfHwgW10pO2IucmV0dXJuID0gYTtyZXR1cm4gYjt9ZnVuY3Rpb24gbShhLCBiLCBjLCBkLCBmKSB7aWYgKG51bGwgPT09IGIgfHwgNyAhPT0gYi50YWcpIHJldHVybiBiID0gQWgoYywgYS5tb2RlLCBkLCBmKSwgYi5yZXR1cm4gPSBhLCBiO2IgPSBlKGIsIGMpO2IucmV0dXJuID0gYTtyZXR1cm4gYjt9ZnVuY3Rpb24gcShhLCBiLCBjKSB7aWYgKCJzdHJpbmciID09PSB0eXBlb2YgYiAmJiAiIiAhPT0gYiB8fCAibnVtYmVyIiA9PT0gdHlwZW9mIGIpIHJldHVybiBiID0geGgoIiIgKyBiLCBhLm1vZGUsIGMpLCBiLnJldHVybiA9IGEsIGI7aWYgKCJvYmplY3QiID09PSB0eXBlb2YgYiAmJiBudWxsICE9PSBiKSB7c3dpdGNoIChiLiQkdHlwZW9mKSB7Y2FzZSB2YTpyZXR1cm4gYyA9IHloKGIudHlwZSwgYi5rZXksIGIucHJvcHMsIG51bGwsIGEubW9kZSwgYyksCiAgICAgICAgICAgICAgICAgICAgYy5yZWYgPSBzaChhLCBudWxsLCBiKSwgYy5yZXR1cm4gPSBhLCBjO2Nhc2Ugd2E6cmV0dXJuIGIgPSB6aChiLCBhLm1vZGUsIGMpLCBiLnJldHVybiA9IGEsIGI7Y2FzZSBIYTp2YXIgZCA9IGIuX2luaXQ7cmV0dXJuIHEoYSwgZChiLl9wYXlsb2FkKSwgYyk7fWlmIChlYihiKSB8fCBLYShiKSkgcmV0dXJuIGIgPSBBaChiLCBhLm1vZGUsIGMsIG51bGwpLCBiLnJldHVybiA9IGEsIGI7dGgoYSwgYik7fXJldHVybiBudWxsO31mdW5jdGlvbiByKGEsIGIsIGMsIGQpIHt2YXIgZSA9IG51bGwgIT09IGIgPyBiLmtleSA6IG51bGw7aWYgKCJzdHJpbmciID09PSB0eXBlb2YgYyAmJiAiIiAhPT0gYyB8fCAibnVtYmVyIiA9PT0gdHlwZW9mIGMpIHJldHVybiBudWxsICE9PSBlID8gbnVsbCA6IGgoYSwgYiwgIiIgKyBjLCBkKTtpZiAoIm9iamVjdCIgPT09IHR5cGVvZiBjICYmIG51bGwgIT09IGMpIHtzd2l0Y2ggKGMuJCR0eXBlb2YpIHtjYXNlIHZhOnJldHVybiBjLmtleSA9PT0gZSA/IGsoYSwgYiwgYywgZCkgOiBudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5ID09PSBlID8gbChhLCBiLCBjLCBkKSA6IG51bGw7Y2FzZSBIYTpyZXR1cm4gZSA9IGMuX2luaXQsIHIoYSwKICAgICAgICAgICAgICAgICAgICBiLCBlKGMuX3BheWxvYWQpLCBkKTt9aWYgKGViKGMpIHx8IEthKGMpKSByZXR1cm4gbnVsbCAhPT0gZSA/IG51bGwgOiBtKGEsIGIsIGMsIGQsIG51bGwpO3RoKGEsIGMpO31yZXR1cm4gbnVsbDt9ZnVuY3Rpb24geShhLCBiLCBjLCBkLCBlKSB7aWYgKCJzdHJpbmciID09PSB0eXBlb2YgZCAmJiAiIiAhPT0gZCB8fCAibnVtYmVyIiA9PT0gdHlwZW9mIGQpIHJldHVybiBhID0gYS5nZXQoYykgfHwgbnVsbCwgaChiLCBhLCAiIiArIGQsIGUpO2lmICgib2JqZWN0IiA9PT0gdHlwZW9mIGQgJiYgbnVsbCAhPT0gZCkge3N3aXRjaCAoZC4kJHR5cGVvZikge2Nhc2UgdmE6cmV0dXJuIGEgPSBhLmdldChudWxsID09PSBkLmtleSA/IGMgOiBkLmtleSkgfHwgbnVsbCwgayhiLCBhLCBkLCBlKTtjYXNlIHdhOnJldHVybiBhID0gYS5nZXQobnVsbCA9PT0gZC5rZXkgPyBjIDogZC5rZXkpIHx8IG51bGwsIGwoYiwgYSwgZCwgZSk7Y2FzZSBIYTp2YXIgZiA9IGQuX2luaXQ7cmV0dXJuIHkoYSwgYiwgYywgZihkLl9wYXlsb2FkKSwgZSk7fWlmIChlYihkKSB8fCBLYShkKSkgcmV0dXJuIGEgPSBhLmdldChjKSB8fCBudWxsLCBtKGIsIGEsIGQsIGUsIG51bGwpO3RoKGIsIGQpO31yZXR1cm4gbnVsbDt9CiAgICAgICAgICAgIGZ1bmN0aW9uIG4oZSwgZywgaCwgaykge2ZvciAodmFyIGwgPSBudWxsLCBtID0gbnVsbCwgdSA9IGcsIHcgPSBnID0gMCwgeCA9IG51bGw7IG51bGwgIT09IHUgJiYgdyA8IGgubGVuZ3RoOyB3KyspIHt1LmluZGV4ID4gdyA/ICh4ID0gdSwgdSA9IG51bGwpIDogeCA9IHUuc2libGluZzt2YXIgbiA9IHIoZSwgdSwgaFt3XSwgayk7aWYgKG51bGwgPT09IG4pIHtudWxsID09PSB1ICYmICh1ID0geCk7YnJlYWs7fWEgJiYgdSAmJiBudWxsID09PSBuLmFsdGVybmF0ZSAmJiBiKGUsIHUpO2cgPSBmKG4sIGcsIHcpO251bGwgPT09IG0gPyBsID0gbiA6IG0uc2libGluZyA9IG47bSA9IG47dSA9IHg7fWlmICh3ID09PSBoLmxlbmd0aCkgcmV0dXJuIGMoZSwgdSksIEkgJiYgdGcoZSwgdyksIGw7aWYgKG51bGwgPT09IHUpIHtmb3IgKDsgdyA8IGgubGVuZ3RoOyB3KyspIHUgPSBxKGUsIGhbd10sIGspLCBudWxsICE9PSB1ICYmIChnID0gZih1LCBnLCB3KSwgbnVsbCA9PT0gbSA/IGwgPSB1IDogbS5zaWJsaW5nID0gdSwgbSA9IHUpO0kgJiYgdGcoZSwgdyk7cmV0dXJuIGw7fWZvciAodSA9IGQoZSwgdSk7IHcgPCBoLmxlbmd0aDsgdysrKSB4ID0geSh1LCBlLCB3LCBoW3ddLCBrKSwgbnVsbCAhPT0geCAmJiAoYSAmJiBudWxsICE9PSB4LmFsdGVybmF0ZSAmJiB1LmRlbGV0ZShudWxsID09PQogICAgICAgICAgICAgIHgua2V5ID8gdyA6IHgua2V5KSwgZyA9IGYoeCwgZywgdyksIG51bGwgPT09IG0gPyBsID0geCA6IG0uc2libGluZyA9IHgsIG0gPSB4KTthICYmIHUuZm9yRWFjaChmdW5jdGlvbiAoYSkge3JldHVybiBiKGUsIGEpO30pO0kgJiYgdGcoZSwgdyk7cmV0dXJuIGw7fWZ1bmN0aW9uIHQoZSwgZywgaCwgaykge3ZhciBsID0gS2EoaCk7aWYgKCJmdW5jdGlvbiIgIT09IHR5cGVvZiBsKSB0aHJvdyBFcnJvcihwKDE1MCkpO2ggPSBsLmNhbGwoaCk7aWYgKG51bGwgPT0gaCkgdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IgKHZhciB1ID0gbCA9IG51bGwsIG0gPSBnLCB3ID0gZyA9IDAsIHggPSBudWxsLCBuID0gaC5uZXh0KCk7IG51bGwgIT09IG0gJiYgIW4uZG9uZTsgdysrLCBuID0gaC5uZXh0KCkpIHttLmluZGV4ID4gdyA/ICh4ID0gbSwgbSA9IG51bGwpIDogeCA9IG0uc2libGluZzt2YXIgdCA9IHIoZSwgbSwgbi52YWx1ZSwgayk7aWYgKG51bGwgPT09IHQpIHtudWxsID09PSBtICYmIChtID0geCk7YnJlYWs7fWEgJiYgbSAmJiBudWxsID09PSB0LmFsdGVybmF0ZSAmJiBiKGUsIG0pO2cgPSBmKHQsIGcsIHcpO251bGwgPT09IHUgPyBsID0gdCA6IHUuc2libGluZyA9IHQ7dSA9IHQ7bSA9IHg7fWlmIChuLmRvbmUpIHJldHVybiBjKGUsCiAgICAgICAgICAgICAgbSksIEkgJiYgdGcoZSwgdyksIGw7aWYgKG51bGwgPT09IG0pIHtmb3IgKDsgIW4uZG9uZTsgdysrLCBuID0gaC5uZXh0KCkpIG4gPSBxKGUsIG4udmFsdWUsIGspLCBudWxsICE9PSBuICYmIChnID0gZihuLCBnLCB3KSwgbnVsbCA9PT0gdSA/IGwgPSBuIDogdS5zaWJsaW5nID0gbiwgdSA9IG4pO0kgJiYgdGcoZSwgdyk7cmV0dXJuIGw7fWZvciAobSA9IGQoZSwgbSk7ICFuLmRvbmU7IHcrKywgbiA9IGgubmV4dCgpKSBuID0geShtLCBlLCB3LCBuLnZhbHVlLCBrKSwgbnVsbCAhPT0gbiAmJiAoYSAmJiBudWxsICE9PSBuLmFsdGVybmF0ZSAmJiBtLmRlbGV0ZShudWxsID09PSBuLmtleSA/IHcgOiBuLmtleSksIGcgPSBmKG4sIGcsIHcpLCBudWxsID09PSB1ID8gbCA9IG4gOiB1LnNpYmxpbmcgPSBuLCB1ID0gbik7YSAmJiBtLmZvckVhY2goZnVuY3Rpb24gKGEpIHtyZXR1cm4gYihlLCBhKTt9KTtJICYmIHRnKGUsIHcpO3JldHVybiBsO31mdW5jdGlvbiBKKGEsIGQsIGYsIGgpIHsib2JqZWN0IiA9PT0gdHlwZW9mIGYgJiYgbnVsbCAhPT0gZiAmJiBmLnR5cGUgPT09IHlhICYmIG51bGwgPT09IGYua2V5ICYmIChmID0gZi5wcm9wcy5jaGlsZHJlbik7aWYgKCJvYmplY3QiID09PSB0eXBlb2YgZiAmJiBudWxsICE9PSBmKSB7c3dpdGNoIChmLiQkdHlwZW9mKSB7Y2FzZSB2YTphOiB7Zm9yICh2YXIgayA9CiAgICAgICAgICAgICAgICAgICAgICAgIGYua2V5LCBsID0gZDsgbnVsbCAhPT0gbDspIHtpZiAobC5rZXkgPT09IGspIHtrID0gZi50eXBlO2lmIChrID09PSB5YSkge2lmICg3ID09PSBsLnRhZykge2MoYSwgbC5zaWJsaW5nKTtkID0gZShsLCBmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybiA9IGE7YSA9IGQ7YnJlYWsgYTt9fSBlbHNlIGlmIChsLmVsZW1lbnRUeXBlID09PSBrIHx8ICJvYmplY3QiID09PSB0eXBlb2YgayAmJiBudWxsICE9PSBrICYmIGsuJCR0eXBlb2YgPT09IEhhICYmIHVoKGspID09PSBsLnR5cGUpIHtjKGEsIGwuc2libGluZyk7ZCA9IGUobCwgZi5wcm9wcyk7ZC5yZWYgPSBzaChhLCBsLCBmKTtkLnJldHVybiA9IGE7YSA9IGQ7YnJlYWsgYTt9YyhhLCBsKTticmVhazt9IGVsc2UgYihhLCBsKTtsID0gbC5zaWJsaW5nO31mLnR5cGUgPT09IHlhID8gKGQgPSBBaChmLnByb3BzLmNoaWxkcmVuLCBhLm1vZGUsIGgsIGYua2V5KSwgZC5yZXR1cm4gPSBhLCBhID0gZCkgOiAoaCA9IHloKGYudHlwZSwgZi5rZXksIGYucHJvcHMsIG51bGwsIGEubW9kZSwgaCksIGgucmVmID0gc2goYSwgZCwgZiksIGgucmV0dXJuID0gYSwgYSA9IGgpO31yZXR1cm4gZyhhKTtjYXNlIHdhOmE6IHtmb3IgKGwgPSBmLmtleTsgbnVsbCAhPT0KICAgICAgICAgICAgICAgICAgICAgIGQ7KSB7aWYgKGQua2V5ID09PSBsKSB7aWYgKDQgPT09IGQudGFnICYmIGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gPT09IGYuY29udGFpbmVySW5mbyAmJiBkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiA9PT0gZi5pbXBsZW1lbnRhdGlvbikge2MoYSwgZC5zaWJsaW5nKTtkID0gZShkLCBmLmNoaWxkcmVuIHx8IFtdKTtkLnJldHVybiA9IGE7YSA9IGQ7YnJlYWsgYTt9IGVsc2Uge2MoYSwgZCk7YnJlYWs7fX0gZWxzZSBiKGEsIGQpO2QgPSBkLnNpYmxpbmc7fWQgPSB6aChmLCBhLm1vZGUsIGgpO2QucmV0dXJuID0gYTthID0gZDt9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbCA9IGYuX2luaXQsIEooYSwgZCwgbChmLl9wYXlsb2FkKSwgaCk7fWlmIChlYihmKSkgcmV0dXJuIG4oYSwgZCwgZiwgaCk7aWYgKEthKGYpKSByZXR1cm4gdChhLCBkLCBmLCBoKTt0aChhLCBmKTt9cmV0dXJuICJzdHJpbmciID09PSB0eXBlb2YgZiAmJiAiIiAhPT0gZiB8fCAibnVtYmVyIiA9PT0gdHlwZW9mIGYgPyAoZiA9ICIiICsgZiwgbnVsbCAhPT0gZCAmJiA2ID09PSBkLnRhZyA/IChjKGEsIGQuc2libGluZyksIGQgPSBlKGQsIGYpLCBkLnJldHVybiA9IGEsIGEgPSBkKSA6ICgKICAgICAgICAgICAgICBjKGEsIGQpLCBkID0geGgoZiwgYS5tb2RlLCBoKSwgZC5yZXR1cm4gPSBhLCBhID0gZCksIGcoYSkpIDogYyhhLCBkKTt9cmV0dXJuIEo7fXZhciBCaCA9IHZoKCEwKSxDaCA9IHZoKCExKSxEaCA9IHt9LEVoID0gVWYoRGgpLEZoID0gVWYoRGgpLEdoID0gVWYoRGgpO2Z1bmN0aW9uIEhoKGEpIHtpZiAoYSA9PT0gRGgpIHRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGE7fWZ1bmN0aW9uIEloKGEsIGIpIHtHKEdoLCBiKTtHKEZoLCBhKTtHKEVoLCBEaCk7YSA9IGIubm9kZVR5cGU7c3dpdGNoIChhKSB7Y2FzZSA5OmNhc2UgMTE6YiA9IChiID0gYi5kb2N1bWVudEVsZW1lbnQpID8gYi5uYW1lc3BhY2VVUkkgOiBsYihudWxsLCAiIik7YnJlYWs7ZGVmYXVsdDphID0gOCA9PT0gYSA/IGIucGFyZW50Tm9kZSA6IGIsIGIgPSBhLm5hbWVzcGFjZVVSSSB8fCBudWxsLCBhID0gYS50YWdOYW1lLCBiID0gbGIoYiwgYSk7fUUoRWgpO0coRWgsIGIpO31mdW5jdGlvbiBKaCgpIHtFKEVoKTtFKEZoKTtFKEdoKTt9CiAgICAgICAgICBmdW5jdGlvbiBLaChhKSB7SGgoR2guY3VycmVudCk7dmFyIGIgPSBIaChFaC5jdXJyZW50KTt2YXIgYyA9IGxiKGIsIGEudHlwZSk7YiAhPT0gYyAmJiAoRyhGaCwgYSksIEcoRWgsIGMpKTt9ZnVuY3Rpb24gTGgoYSkge0ZoLmN1cnJlbnQgPT09IGEgJiYgKEUoRWgpLCBFKEZoKSk7fXZhciBNID0gVWYoMCk7CiAgICAgICAgICBmdW5jdGlvbiBNaChhKSB7Zm9yICh2YXIgYiA9IGE7IG51bGwgIT09IGI7KSB7aWYgKDEzID09PSBiLnRhZykge3ZhciBjID0gYi5tZW1vaXplZFN0YXRlO2lmIChudWxsICE9PSBjICYmIChjID0gYy5kZWh5ZHJhdGVkLCBudWxsID09PSBjIHx8ICIkPyIgPT09IGMuZGF0YSB8fCAiJCEiID09PSBjLmRhdGEpKSByZXR1cm4gYjt9IGVsc2UgaWYgKDE5ID09PSBiLnRhZyAmJiB2b2lkIDAgIT09IGIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcikge2lmICgwICE9PSAoYi5mbGFncyAmIDEyOCkpIHJldHVybiBiO30gZWxzZSBpZiAobnVsbCAhPT0gYi5jaGlsZCkge2IuY2hpbGQucmV0dXJuID0gYjtiID0gYi5jaGlsZDtjb250aW51ZTt9aWYgKGIgPT09IGEpIGJyZWFrO2ZvciAoOyBudWxsID09PSBiLnNpYmxpbmc7KSB7aWYgKG51bGwgPT09IGIucmV0dXJuIHx8IGIucmV0dXJuID09PSBhKSByZXR1cm4gbnVsbDtiID0gYi5yZXR1cm47fWIuc2libGluZy5yZXR1cm4gPSBiLnJldHVybjtiID0gYi5zaWJsaW5nO31yZXR1cm4gbnVsbDt9dmFyIE5oID0gW107CiAgICAgICAgICBmdW5jdGlvbiBPaCgpIHtmb3IgKHZhciBhID0gMDsgYSA8IE5oLmxlbmd0aDsgYSsrKSBOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSA9IG51bGw7TmgubGVuZ3RoID0gMDt9dmFyIFBoID0gdWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixRaCA9IHVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoID0gMCxOID0gbnVsbCxPID0gbnVsbCxQID0gbnVsbCxTaCA9ICExLFRoID0gITEsVWggPSAwLFZoID0gMDtmdW5jdGlvbiBRKCkge3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsIGIpIHtpZiAobnVsbCA9PT0gYikgcmV0dXJuICExO2ZvciAodmFyIGMgPSAwOyBjIDwgYi5sZW5ndGggJiYgYyA8IGEubGVuZ3RoOyBjKyspIGlmICghSGUoYVtjXSwgYltjXSkpIHJldHVybiAhMTtyZXR1cm4gITA7fQogICAgICAgICAgZnVuY3Rpb24gWGgoYSwgYiwgYywgZCwgZSwgZikge1JoID0gZjtOID0gYjtiLm1lbW9pemVkU3RhdGUgPSBudWxsO2IudXBkYXRlUXVldWUgPSBudWxsO2IubGFuZXMgPSAwO1BoLmN1cnJlbnQgPSBudWxsID09PSBhIHx8IG51bGwgPT09IGEubWVtb2l6ZWRTdGF0ZSA/IFloIDogWmg7YSA9IGMoZCwgZSk7aWYgKFRoKSB7ZiA9IDA7ZG8ge1RoID0gITE7VWggPSAwO2lmICgyNSA8PSBmKSB0aHJvdyBFcnJvcihwKDMwMSkpO2YgKz0gMTtQID0gTyA9IG51bGw7Yi51cGRhdGVRdWV1ZSA9IG51bGw7UGguY3VycmVudCA9ICRoO2EgPSBjKGQsIGUpO30gd2hpbGUgKFRoKTt9UGguY3VycmVudCA9IGFpO2IgPSBudWxsICE9PSBPICYmIG51bGwgIT09IE8ubmV4dDtSaCA9IDA7UCA9IE8gPSBOID0gbnVsbDtTaCA9ICExO2lmIChiKSB0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhO31mdW5jdGlvbiBiaSgpIHt2YXIgYSA9IDAgIT09IFVoO1VoID0gMDtyZXR1cm4gYTt9CiAgICAgICAgICBmdW5jdGlvbiBjaSgpIHt2YXIgYSA9IHsgbWVtb2l6ZWRTdGF0ZTogbnVsbCwgYmFzZVN0YXRlOiBudWxsLCBiYXNlUXVldWU6IG51bGwsIHF1ZXVlOiBudWxsLCBuZXh0OiBudWxsIH07bnVsbCA9PT0gUCA/IE4ubWVtb2l6ZWRTdGF0ZSA9IFAgPSBhIDogUCA9IFAubmV4dCA9IGE7cmV0dXJuIFA7fWZ1bmN0aW9uIGRpKCkge2lmIChudWxsID09PSBPKSB7dmFyIGEgPSBOLmFsdGVybmF0ZTthID0gbnVsbCAhPT0gYSA/IGEubWVtb2l6ZWRTdGF0ZSA6IG51bGw7fSBlbHNlIGEgPSBPLm5leHQ7dmFyIGIgPSBudWxsID09PSBQID8gTi5tZW1vaXplZFN0YXRlIDogUC5uZXh0O2lmIChudWxsICE9PSBiKSBQID0gYiwgTyA9IGE7ZWxzZSB7aWYgKG51bGwgPT09IGEpIHRocm93IEVycm9yKHAoMzEwKSk7TyA9IGE7YSA9IHsgbWVtb2l6ZWRTdGF0ZTogTy5tZW1vaXplZFN0YXRlLCBiYXNlU3RhdGU6IE8uYmFzZVN0YXRlLCBiYXNlUXVldWU6IE8uYmFzZVF1ZXVlLCBxdWV1ZTogTy5xdWV1ZSwgbmV4dDogbnVsbCB9O251bGwgPT09IFAgPyBOLm1lbW9pemVkU3RhdGUgPSBQID0gYSA6IFAgPSBQLm5leHQgPSBhO31yZXR1cm4gUDt9CiAgICAgICAgICBmdW5jdGlvbiBlaShhLCBiKSB7cmV0dXJuICJmdW5jdGlvbiIgPT09IHR5cGVvZiBiID8gYihhKSA6IGI7fQogICAgICAgICAgZnVuY3Rpb24gZmkoYSkge3ZhciBiID0gZGkoKSxjID0gYi5xdWV1ZTtpZiAobnVsbCA9PT0gYykgdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSBhO3ZhciBkID0gTyxlID0gZC5iYXNlUXVldWUsZiA9IGMucGVuZGluZztpZiAobnVsbCAhPT0gZikge2lmIChudWxsICE9PSBlKSB7dmFyIGcgPSBlLm5leHQ7ZS5uZXh0ID0gZi5uZXh0O2YubmV4dCA9IGc7fWQuYmFzZVF1ZXVlID0gZSA9IGY7Yy5wZW5kaW5nID0gbnVsbDt9aWYgKG51bGwgIT09IGUpIHtmID0gZS5uZXh0O2QgPSBkLmJhc2VTdGF0ZTt2YXIgaCA9IGcgPSBudWxsLGsgPSBudWxsLGwgPSBmO2RvIHt2YXIgbSA9IGwubGFuZTtpZiAoKFJoICYgbSkgPT09IG0pIG51bGwgIT09IGsgJiYgKGsgPSBrLm5leHQgPSB7IGxhbmU6IDAsIGFjdGlvbjogbC5hY3Rpb24sIGhhc0VhZ2VyU3RhdGU6IGwuaGFzRWFnZXJTdGF0ZSwgZWFnZXJTdGF0ZTogbC5lYWdlclN0YXRlLCBuZXh0OiBudWxsIH0pLCBkID0gbC5oYXNFYWdlclN0YXRlID8gbC5lYWdlclN0YXRlIDogYShkLCBsLmFjdGlvbik7ZWxzZSB7dmFyIHEgPSB7IGxhbmU6IG0sIGFjdGlvbjogbC5hY3Rpb24sIGhhc0VhZ2VyU3RhdGU6IGwuaGFzRWFnZXJTdGF0ZSwKICAgICAgICAgICAgICAgICAgICBlYWdlclN0YXRlOiBsLmVhZ2VyU3RhdGUsIG5leHQ6IG51bGwgfTtudWxsID09PSBrID8gKGggPSBrID0gcSwgZyA9IGQpIDogayA9IGsubmV4dCA9IHE7Ti5sYW5lcyB8PSBtO2hoIHw9IG07fWwgPSBsLm5leHQ7fSB3aGlsZSAobnVsbCAhPT0gbCAmJiBsICE9PSBmKTtudWxsID09PSBrID8gZyA9IGQgOiBrLm5leHQgPSBoO0hlKGQsIGIubWVtb2l6ZWRTdGF0ZSkgfHwgKFVnID0gITApO2IubWVtb2l6ZWRTdGF0ZSA9IGQ7Yi5iYXNlU3RhdGUgPSBnO2IuYmFzZVF1ZXVlID0gaztjLmxhc3RSZW5kZXJlZFN0YXRlID0gZDt9YSA9IGMuaW50ZXJsZWF2ZWQ7aWYgKG51bGwgIT09IGEpIHtlID0gYTtkbyBmID0gZS5sYW5lLCBOLmxhbmVzIHw9IGYsIGhoIHw9IGYsIGUgPSBlLm5leHQ7IHdoaWxlIChlICE9PSBhKTt9IGVsc2UgbnVsbCA9PT0gZSAmJiAoYy5sYW5lcyA9IDApO3JldHVybiBbYi5tZW1vaXplZFN0YXRlLCBjLmRpc3BhdGNoXTt9CiAgICAgICAgICBmdW5jdGlvbiBnaShhKSB7dmFyIGIgPSBkaSgpLGMgPSBiLnF1ZXVlO2lmIChudWxsID09PSBjKSB0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlciA9IGE7dmFyIGQgPSBjLmRpc3BhdGNoLGUgPSBjLnBlbmRpbmcsZiA9IGIubWVtb2l6ZWRTdGF0ZTtpZiAobnVsbCAhPT0gZSkge2MucGVuZGluZyA9IG51bGw7dmFyIGcgPSBlID0gZS5uZXh0O2RvIGYgPSBhKGYsIGcuYWN0aW9uKSwgZyA9IGcubmV4dDsgd2hpbGUgKGcgIT09IGUpO0hlKGYsIGIubWVtb2l6ZWRTdGF0ZSkgfHwgKFVnID0gITApO2IubWVtb2l6ZWRTdGF0ZSA9IGY7bnVsbCA9PT0gYi5iYXNlUXVldWUgJiYgKGIuYmFzZVN0YXRlID0gZik7Yy5sYXN0UmVuZGVyZWRTdGF0ZSA9IGY7fXJldHVybiBbZiwgZF07fWZ1bmN0aW9uIGhpKCkge30KICAgICAgICAgIGZ1bmN0aW9uIGlpKGEsIGIpIHt2YXIgYyA9IE4sZCA9IGRpKCksZSA9IGIoKSxmID0gIUhlKGQubWVtb2l6ZWRTdGF0ZSwgZSk7ZiAmJiAoZC5tZW1vaXplZFN0YXRlID0gZSwgVWcgPSAhMCk7ZCA9IGQucXVldWU7amkoa2kuYmluZChudWxsLCBjLCBkLCBhKSwgW2FdKTtpZiAoZC5nZXRTbmFwc2hvdCAhPT0gYiB8fCBmIHx8IG51bGwgIT09IFAgJiYgUC5tZW1vaXplZFN0YXRlLnRhZyAmIDEpIHtjLmZsYWdzIHw9IDIwNDg7bGkoOSwgbWkuYmluZChudWxsLCBjLCBkLCBlLCBiKSwgdm9pZCAwLCBudWxsKTtpZiAobnVsbCA9PT0gUikgdGhyb3cgRXJyb3IocCgzNDkpKTswICE9PSAoUmggJiAzMCkgfHwgbmkoYywgYiwgZSk7fXJldHVybiBlO31mdW5jdGlvbiBuaShhLCBiLCBjKSB7YS5mbGFncyB8PSAxNjM4NDthID0geyBnZXRTbmFwc2hvdDogYiwgdmFsdWU6IGMgfTtiID0gTi51cGRhdGVRdWV1ZTtudWxsID09PSBiID8gKGIgPSB7IGxhc3RFZmZlY3Q6IG51bGwsIHN0b3JlczogbnVsbCB9LCBOLnVwZGF0ZVF1ZXVlID0gYiwgYi5zdG9yZXMgPSBbYV0pIDogKGMgPSBiLnN0b3JlcywgbnVsbCA9PT0gYyA/IGIuc3RvcmVzID0gW2FdIDogYy5wdXNoKGEpKTt9CiAgICAgICAgICBmdW5jdGlvbiBtaShhLCBiLCBjLCBkKSB7Yi52YWx1ZSA9IGM7Yi5nZXRTbmFwc2hvdCA9IGQ7b2koYikgJiYgcGkoYSk7fWZ1bmN0aW9uIGtpKGEsIGIsIGMpIHtyZXR1cm4gYyhmdW5jdGlvbiAoKSB7b2koYikgJiYgcGkoYSk7fSk7fWZ1bmN0aW9uIG9pKGEpIHt2YXIgYiA9IGEuZ2V0U25hcHNob3Q7YSA9IGEudmFsdWU7dHJ5IHt2YXIgYyA9IGIoKTtyZXR1cm4gIUhlKGEsIGMpO30gY2F0Y2ggKGQpIHtyZXR1cm4gITA7fX1mdW5jdGlvbiBwaShhKSB7dmFyIGIgPSBaZyhhLCAxKTtudWxsICE9PSBiICYmIG1oKGIsIGEsIDEsIC0xKTt9CiAgICAgICAgICBmdW5jdGlvbiBxaShhKSB7dmFyIGIgPSBjaSgpOyJmdW5jdGlvbiIgPT09IHR5cGVvZiBhICYmIChhID0gYSgpKTtiLm1lbW9pemVkU3RhdGUgPSBiLmJhc2VTdGF0ZSA9IGE7YSA9IHsgcGVuZGluZzogbnVsbCwgaW50ZXJsZWF2ZWQ6IG51bGwsIGxhbmVzOiAwLCBkaXNwYXRjaDogbnVsbCwgbGFzdFJlbmRlcmVkUmVkdWNlcjogZWksIGxhc3RSZW5kZXJlZFN0YXRlOiBhIH07Yi5xdWV1ZSA9IGE7YSA9IGEuZGlzcGF0Y2ggPSByaS5iaW5kKG51bGwsIE4sIGEpO3JldHVybiBbYi5tZW1vaXplZFN0YXRlLCBhXTt9CiAgICAgICAgICBmdW5jdGlvbiBsaShhLCBiLCBjLCBkKSB7YSA9IHsgdGFnOiBhLCBjcmVhdGU6IGIsIGRlc3Ryb3k6IGMsIGRlcHM6IGQsIG5leHQ6IG51bGwgfTtiID0gTi51cGRhdGVRdWV1ZTtudWxsID09PSBiID8gKGIgPSB7IGxhc3RFZmZlY3Q6IG51bGwsIHN0b3JlczogbnVsbCB9LCBOLnVwZGF0ZVF1ZXVlID0gYiwgYi5sYXN0RWZmZWN0ID0gYS5uZXh0ID0gYSkgOiAoYyA9IGIubGFzdEVmZmVjdCwgbnVsbCA9PT0gYyA/IGIubGFzdEVmZmVjdCA9IGEubmV4dCA9IGEgOiAoZCA9IGMubmV4dCwgYy5uZXh0ID0gYSwgYS5uZXh0ID0gZCwgYi5sYXN0RWZmZWN0ID0gYSkpO3JldHVybiBhO31mdW5jdGlvbiBzaSgpIHtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlO31mdW5jdGlvbiB0aShhLCBiLCBjLCBkKSB7dmFyIGUgPSBjaSgpO04uZmxhZ3MgfD0gYTtlLm1lbW9pemVkU3RhdGUgPSBsaSgxIHwgYiwgYywgdm9pZCAwLCB2b2lkIDAgPT09IGQgPyBudWxsIDogZCk7fQogICAgICAgICAgZnVuY3Rpb24gdWkoYSwgYiwgYywgZCkge3ZhciBlID0gZGkoKTtkID0gdm9pZCAwID09PSBkID8gbnVsbCA6IGQ7dmFyIGYgPSB2b2lkIDA7aWYgKG51bGwgIT09IE8pIHt2YXIgZyA9IE8ubWVtb2l6ZWRTdGF0ZTtmID0gZy5kZXN0cm95O2lmIChudWxsICE9PSBkICYmIFdoKGQsIGcuZGVwcykpIHtlLm1lbW9pemVkU3RhdGUgPSBsaShiLCBjLCBmLCBkKTtyZXR1cm47fX1OLmZsYWdzIHw9IGE7ZS5tZW1vaXplZFN0YXRlID0gbGkoMSB8IGIsIGMsIGYsIGQpO31mdW5jdGlvbiB2aShhLCBiKSB7cmV0dXJuIHRpKDgzOTA2NTYsIDgsIGEsIGIpO31mdW5jdGlvbiBqaShhLCBiKSB7cmV0dXJuIHVpKDIwNDgsIDgsIGEsIGIpO31mdW5jdGlvbiB3aShhLCBiKSB7cmV0dXJuIHVpKDQsIDIsIGEsIGIpO31mdW5jdGlvbiB4aShhLCBiKSB7cmV0dXJuIHVpKDQsIDQsIGEsIGIpO30KICAgICAgICAgIGZ1bmN0aW9uIHlpKGEsIGIpIHtpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGIpIHJldHVybiBhID0gYSgpLCBiKGEpLCBmdW5jdGlvbiAoKSB7YihudWxsKTt9O2lmIChudWxsICE9PSBiICYmIHZvaWQgMCAhPT0gYikgcmV0dXJuIGEgPSBhKCksIGIuY3VycmVudCA9IGEsIGZ1bmN0aW9uICgpIHtiLmN1cnJlbnQgPSBudWxsO307fWZ1bmN0aW9uIHppKGEsIGIsIGMpIHtjID0gbnVsbCAhPT0gYyAmJiB2b2lkIDAgIT09IGMgPyBjLmNvbmNhdChbYV0pIDogbnVsbDtyZXR1cm4gdWkoNCwgNCwgeWkuYmluZChudWxsLCBiLCBhKSwgYyk7fWZ1bmN0aW9uIEFpKCkge31mdW5jdGlvbiBCaShhLCBiKSB7dmFyIGMgPSBkaSgpO2IgPSB2b2lkIDAgPT09IGIgPyBudWxsIDogYjt2YXIgZCA9IGMubWVtb2l6ZWRTdGF0ZTtpZiAobnVsbCAhPT0gZCAmJiBudWxsICE9PSBiICYmIFdoKGIsIGRbMV0pKSByZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGUgPSBbYSwgYl07cmV0dXJuIGE7fQogICAgICAgICAgZnVuY3Rpb24gQ2koYSwgYikge3ZhciBjID0gZGkoKTtiID0gdm9pZCAwID09PSBiID8gbnVsbCA6IGI7dmFyIGQgPSBjLm1lbW9pemVkU3RhdGU7aWYgKG51bGwgIT09IGQgJiYgbnVsbCAhPT0gYiAmJiBXaChiLCBkWzFdKSkgcmV0dXJuIGRbMF07YSA9IGEoKTtjLm1lbW9pemVkU3RhdGUgPSBbYSwgYl07cmV0dXJuIGE7fWZ1bmN0aW9uIERpKGEsIGIsIGMpIHtpZiAoMCA9PT0gKFJoICYgMjEpKSByZXR1cm4gYS5iYXNlU3RhdGUgJiYgKGEuYmFzZVN0YXRlID0gITEsIFVnID0gITApLCBhLm1lbW9pemVkU3RhdGUgPSBjO0hlKGMsIGIpIHx8IChjID0geWMoKSwgTi5sYW5lcyB8PSBjLCBoaCB8PSBjLCBhLmJhc2VTdGF0ZSA9ICEwKTtyZXR1cm4gYjt9ZnVuY3Rpb24gRWkoYSwgYikge3ZhciBjID0gQztDID0gMCAhPT0gYyAmJiA0ID4gYyA/IGMgOiA0O2EoITApO3ZhciBkID0gUWgudHJhbnNpdGlvbjtRaC50cmFuc2l0aW9uID0ge307dHJ5IHthKCExKSwgYigpO30gZmluYWxseSB7QyA9IGMsIFFoLnRyYW5zaXRpb24gPSBkO319ZnVuY3Rpb24gRmkoKSB7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZTt9CiAgICAgICAgICBmdW5jdGlvbiBHaShhLCBiLCBjKSB7dmFyIGQgPSBsaChhKTtjID0geyBsYW5lOiBkLCBhY3Rpb246IGMsIGhhc0VhZ2VyU3RhdGU6ICExLCBlYWdlclN0YXRlOiBudWxsLCBuZXh0OiBudWxsIH07aWYgKEhpKGEpKSBJaShiLCBjKTtlbHNlIGlmIChjID0gWWcoYSwgYiwgYywgZCksIG51bGwgIT09IGMpIHt2YXIgZSA9IEwoKTttaChjLCBhLCBkLCBlKTtKaShjLCBiLCBkKTt9fQogICAgICAgICAgZnVuY3Rpb24gcmkoYSwgYiwgYykge3ZhciBkID0gbGgoYSksZSA9IHsgbGFuZTogZCwgYWN0aW9uOiBjLCBoYXNFYWdlclN0YXRlOiAhMSwgZWFnZXJTdGF0ZTogbnVsbCwgbmV4dDogbnVsbCB9O2lmIChIaShhKSkgSWkoYiwgZSk7ZWxzZSB7dmFyIGYgPSBhLmFsdGVybmF0ZTtpZiAoMCA9PT0gYS5sYW5lcyAmJiAobnVsbCA9PT0gZiB8fCAwID09PSBmLmxhbmVzKSAmJiAoZiA9IGIubGFzdFJlbmRlcmVkUmVkdWNlciwgbnVsbCAhPT0gZikpIHRyeSB7dmFyIGcgPSBiLmxhc3RSZW5kZXJlZFN0YXRlLGggPSBmKGcsIGMpO2UuaGFzRWFnZXJTdGF0ZSA9ICEwO2UuZWFnZXJTdGF0ZSA9IGg7aWYgKEhlKGgsIGcpKSB7dmFyIGsgPSBiLmludGVybGVhdmVkO251bGwgPT09IGsgPyAoZS5uZXh0ID0gZSwgWGcoYikpIDogKGUubmV4dCA9IGsubmV4dCwgay5uZXh0ID0gZSk7Yi5pbnRlcmxlYXZlZCA9IGU7cmV0dXJuO319IGNhdGNoIChsKSB7fSBmaW5hbGx5IHt9YyA9IFlnKGEsIGIsIGUsIGQpO251bGwgIT09IGMgJiYgKGUgPSBMKCksIG1oKGMsIGEsIGQsIGUpLCBKaShjLCBiLCBkKSk7fX0KICAgICAgICAgIGZ1bmN0aW9uIEhpKGEpIHt2YXIgYiA9IGEuYWx0ZXJuYXRlO3JldHVybiBhID09PSBOIHx8IG51bGwgIT09IGIgJiYgYiA9PT0gTjt9ZnVuY3Rpb24gSWkoYSwgYikge1RoID0gU2ggPSAhMDt2YXIgYyA9IGEucGVuZGluZztudWxsID09PSBjID8gYi5uZXh0ID0gYiA6IChiLm5leHQgPSBjLm5leHQsIGMubmV4dCA9IGIpO2EucGVuZGluZyA9IGI7fWZ1bmN0aW9uIEppKGEsIGIsIGMpIHtpZiAoMCAhPT0gKGMgJiA0MTk0MjQwKSkge3ZhciBkID0gYi5sYW5lcztkICY9IGEucGVuZGluZ0xhbmVzO2MgfD0gZDtiLmxhbmVzID0gYztDYyhhLCBjKTt9fQogICAgICAgICAgdmFyIGFpID0geyByZWFkQ29udGV4dDogVmcsIHVzZUNhbGxiYWNrOiBRLCB1c2VDb250ZXh0OiBRLCB1c2VFZmZlY3Q6IFEsIHVzZUltcGVyYXRpdmVIYW5kbGU6IFEsIHVzZUluc2VydGlvbkVmZmVjdDogUSwgdXNlTGF5b3V0RWZmZWN0OiBRLCB1c2VNZW1vOiBRLCB1c2VSZWR1Y2VyOiBRLCB1c2VSZWY6IFEsIHVzZVN0YXRlOiBRLCB1c2VEZWJ1Z1ZhbHVlOiBRLCB1c2VEZWZlcnJlZFZhbHVlOiBRLCB1c2VUcmFuc2l0aW9uOiBRLCB1c2VNdXRhYmxlU291cmNlOiBRLCB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogUSwgdXNlSWQ6IFEsIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogITEgfSxZaCA9IHsgcmVhZENvbnRleHQ6IFZnLCB1c2VDYWxsYmFjazogZnVuY3Rpb24gdXNlQ2FsbGJhY2soYSwgYikge2NpKCkubWVtb2l6ZWRTdGF0ZSA9IFthLCB2b2lkIDAgPT09IGIgPyBudWxsIDogYl07cmV0dXJuIGE7fSwgdXNlQ29udGV4dDogVmcsIHVzZUVmZmVjdDogdmksIHVzZUltcGVyYXRpdmVIYW5kbGU6IGZ1bmN0aW9uIHVzZUltcGVyYXRpdmVIYW5kbGUoYSwgYiwgYykge2MgPSBudWxsICE9PSBjICYmIHZvaWQgMCAhPT0gYyA/IGMuY29uY2F0KFthXSkgOiBudWxsO3JldHVybiB0aSg0MTk0MzA4LAogICAgICAgICAgICAgICAgNCwgeWkuYmluZChudWxsLCBiLCBhKSwgYyk7fSwgdXNlTGF5b3V0RWZmZWN0OiBmdW5jdGlvbiB1c2VMYXlvdXRFZmZlY3QoYSwgYikge3JldHVybiB0aSg0MTk0MzA4LCA0LCBhLCBiKTt9LCB1c2VJbnNlcnRpb25FZmZlY3Q6IGZ1bmN0aW9uIHVzZUluc2VydGlvbkVmZmVjdChhLCBiKSB7cmV0dXJuIHRpKDQsIDIsIGEsIGIpO30sIHVzZU1lbW86IGZ1bmN0aW9uIHVzZU1lbW8oYSwgYikge3ZhciBjID0gY2koKTtiID0gdm9pZCAwID09PSBiID8gbnVsbCA6IGI7YSA9IGEoKTtjLm1lbW9pemVkU3RhdGUgPSBbYSwgYl07cmV0dXJuIGE7fSwgdXNlUmVkdWNlcjogZnVuY3Rpb24gdXNlUmVkdWNlcihhLCBiLCBjKSB7dmFyIGQgPSBjaSgpO2IgPSB2b2lkIDAgIT09IGMgPyBjKGIpIDogYjtkLm1lbW9pemVkU3RhdGUgPSBkLmJhc2VTdGF0ZSA9IGI7YSA9IHsgcGVuZGluZzogbnVsbCwgaW50ZXJsZWF2ZWQ6IG51bGwsIGxhbmVzOiAwLCBkaXNwYXRjaDogbnVsbCwgbGFzdFJlbmRlcmVkUmVkdWNlcjogYSwgbGFzdFJlbmRlcmVkU3RhdGU6IGIgfTtkLnF1ZXVlID0gYTthID0gYS5kaXNwYXRjaCA9IEdpLmJpbmQobnVsbCwgTiwgYSk7cmV0dXJuIFtkLm1lbW9pemVkU3RhdGUsIGFdO30sIHVzZVJlZjogZnVuY3Rpb24gdXNlUmVmKGEpIHt2YXIgYiA9CiAgICAgICAgICAgICAgICBjaSgpO2EgPSB7IGN1cnJlbnQ6IGEgfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlID0gYTt9LCB1c2VTdGF0ZTogcWksIHVzZURlYnVnVmFsdWU6IEFpLCB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiB1c2VEZWZlcnJlZFZhbHVlKGEpIHtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlID0gYTt9LCB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiB1c2VUcmFuc2l0aW9uKCkge3ZhciBhID0gcWkoITEpLGIgPSBhWzBdO2EgPSBFaS5iaW5kKG51bGwsIGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZSA9IGE7cmV0dXJuIFtiLCBhXTt9LCB1c2VNdXRhYmxlU291cmNlOiBmdW5jdGlvbiB1c2VNdXRhYmxlU291cmNlKCkge30sIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBmdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZShhLCBiLCBjKSB7dmFyIGQgPSBOLGUgPSBjaSgpO2lmIChJKSB7aWYgKHZvaWQgMCA9PT0gYykgdGhyb3cgRXJyb3IocCg0MDcpKTtjID0gYygpO30gZWxzZSB7YyA9IGIoKTtpZiAobnVsbCA9PT0gUikgdGhyb3cgRXJyb3IocCgzNDkpKTswICE9PSAoUmggJiAzMCkgfHwgbmkoZCwgYiwgYyk7fWUubWVtb2l6ZWRTdGF0ZSA9IGM7dmFyIGYgPSB7IHZhbHVlOiBjLCBnZXRTbmFwc2hvdDogYiB9O2UucXVldWUgPSBmO3ZpKGtpLmJpbmQobnVsbCwgZCwKICAgICAgICAgICAgICAgIGYsIGEpLCBbYV0pO2QuZmxhZ3MgfD0gMjA0ODtsaSg5LCBtaS5iaW5kKG51bGwsIGQsIGYsIGMsIGIpLCB2b2lkIDAsIG51bGwpO3JldHVybiBjO30sIHVzZUlkOiBmdW5jdGlvbiB1c2VJZCgpIHt2YXIgYSA9IGNpKCksYiA9IFIuaWRlbnRpZmllclByZWZpeDtpZiAoSSkge3ZhciBjID0gc2c7dmFyIGQgPSByZztjID0gKGQgJiB+KDEgPDwgMzIgLSBvYyhkKSAtIDEpKS50b1N0cmluZygzMikgKyBjO2IgPSAiOiIgKyBiICsgIlIiICsgYztjID0gVWgrKzswIDwgYyAmJiAoYiArPSAiSCIgKyBjLnRvU3RyaW5nKDMyKSk7YiArPSAiOiI7fSBlbHNlIGMgPSBWaCsrLCBiID0gIjoiICsgYiArICJyIiArIGMudG9TdHJpbmcoMzIpICsgIjoiO3JldHVybiBhLm1lbW9pemVkU3RhdGUgPSBiO30sIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogITEgfSxaaCA9IHsgcmVhZENvbnRleHQ6IFZnLCB1c2VDYWxsYmFjazogQmksIHVzZUNvbnRleHQ6IFZnLCB1c2VFZmZlY3Q6IGppLCB1c2VJbXBlcmF0aXZlSGFuZGxlOiB6aSwgdXNlSW5zZXJ0aW9uRWZmZWN0OiB3aSwgdXNlTGF5b3V0RWZmZWN0OiB4aSwgdXNlTWVtbzogQ2ksIHVzZVJlZHVjZXI6IGZpLCB1c2VSZWY6IHNpLCB1c2VTdGF0ZTogZnVuY3Rpb24gdXNlU3RhdGUoKSB7cmV0dXJuIGZpKGVpKTt9LAogICAgICAgICAgICAgIHVzZURlYnVnVmFsdWU6IEFpLCB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiB1c2VEZWZlcnJlZFZhbHVlKGEpIHt2YXIgYiA9IGRpKCk7cmV0dXJuIERpKGIsIE8ubWVtb2l6ZWRTdGF0ZSwgYSk7fSwgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gdXNlVHJhbnNpdGlvbigpIHt2YXIgYSA9IGZpKGVpKVswXSxiID0gZGkoKS5tZW1vaXplZFN0YXRlO3JldHVybiBbYSwgYl07fSwgdXNlTXV0YWJsZVNvdXJjZTogaGksIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBpaSwgdXNlSWQ6IEZpLCB1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ICExIH0sJGggPSB7IHJlYWRDb250ZXh0OiBWZywgdXNlQ2FsbGJhY2s6IEJpLCB1c2VDb250ZXh0OiBWZywgdXNlRWZmZWN0OiBqaSwgdXNlSW1wZXJhdGl2ZUhhbmRsZTogemksIHVzZUluc2VydGlvbkVmZmVjdDogd2ksIHVzZUxheW91dEVmZmVjdDogeGksIHVzZU1lbW86IENpLCB1c2VSZWR1Y2VyOiBnaSwgdXNlUmVmOiBzaSwgdXNlU3RhdGU6IGZ1bmN0aW9uIHVzZVN0YXRlKCkge3JldHVybiBnaShlaSk7fSwgdXNlRGVidWdWYWx1ZTogQWksIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uIHVzZURlZmVycmVkVmFsdWUoYSkge3ZhciBiID0gZGkoKTtyZXR1cm4gbnVsbCA9PT0KICAgICAgICAgICAgICAgIE8gPyBiLm1lbW9pemVkU3RhdGUgPSBhIDogRGkoYiwgTy5tZW1vaXplZFN0YXRlLCBhKTt9LCB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiB1c2VUcmFuc2l0aW9uKCkge3ZhciBhID0gZ2koZWkpWzBdLGIgPSBkaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuIFthLCBiXTt9LCB1c2VNdXRhYmxlU291cmNlOiBoaSwgdXNlU3luY0V4dGVybmFsU3RvcmU6IGlpLCB1c2VJZDogRmksIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogITEgfTtmdW5jdGlvbiBLaShhLCBiKSB7dHJ5IHt2YXIgYyA9ICIiLGQgPSBiO2RvIGMgKz0gUGEoZCksIGQgPSBkLnJldHVybjsgd2hpbGUgKGQpO3ZhciBlID0gYzt9IGNhdGNoIChmKSB7ZSA9ICJcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6ICIgKyBmLm1lc3NhZ2UgKyAiXG4iICsgZi5zdGFjazt9cmV0dXJuIHsgdmFsdWU6IGEsIHNvdXJjZTogYiwgc3RhY2s6IGUsIGRpZ2VzdDogbnVsbCB9O31mdW5jdGlvbiBMaShhLCBiLCBjKSB7cmV0dXJuIHsgdmFsdWU6IGEsIHNvdXJjZTogbnVsbCwgc3RhY2s6IG51bGwgIT0gYyA/IGMgOiBudWxsLCBkaWdlc3Q6IG51bGwgIT0gYiA/IGIgOiBudWxsIH07fQogICAgICAgICAgZnVuY3Rpb24gTWkoYSwgYikge3RyeSB7Y29uc29sZS5lcnJvcihiLnZhbHVlKTt9IGNhdGNoIChjKSB7c2V0VGltZW91dChmdW5jdGlvbiAoKSB7dGhyb3cgYzt9KTt9fXZhciBOaSA9ICJmdW5jdGlvbiIgPT09IHR5cGVvZiBXZWFrTWFwID8gV2Vha01hcCA6IE1hcDtmdW5jdGlvbiBPaShhLCBiLCBjKSB7YyA9IGNoKC0xLCBjKTtjLnRhZyA9IDM7Yy5wYXlsb2FkID0geyBlbGVtZW50OiBudWxsIH07dmFyIGQgPSBiLnZhbHVlO2MuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7UGkgfHwgKFBpID0gITAsIFFpID0gZCk7TWkoYSwgYik7fTtyZXR1cm4gYzt9CiAgICAgICAgICBmdW5jdGlvbiBSaShhLCBiLCBjKSB7YyA9IGNoKC0xLCBjKTtjLnRhZyA9IDM7dmFyIGQgPSBhLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmICgiZnVuY3Rpb24iID09PSB0eXBlb2YgZCkge3ZhciBlID0gYi52YWx1ZTtjLnBheWxvYWQgPSBmdW5jdGlvbiAoKSB7cmV0dXJuIGQoZSk7fTtjLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge01pKGEsIGIpO307fXZhciBmID0gYS5zdGF0ZU5vZGU7bnVsbCAhPT0gZiAmJiAiZnVuY3Rpb24iID09PSB0eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCAmJiAoYy5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtNaShhLCBiKTsiZnVuY3Rpb24iICE9PSB0eXBlb2YgZCAmJiAobnVsbCA9PT0gU2kgPyBTaSA9IG5ldyBTZXQoW3RoaXNdKSA6IFNpLmFkZCh0aGlzKSk7dmFyIGMgPSBiLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSwgeyBjb21wb25lbnRTdGFjazogbnVsbCAhPT0gYyA/IGMgOiAiIiB9KTt9KTtyZXR1cm4gYzt9CiAgICAgICAgICBmdW5jdGlvbiBUaShhLCBiLCBjKSB7dmFyIGQgPSBhLnBpbmdDYWNoZTtpZiAobnVsbCA9PT0gZCkge2QgPSBhLnBpbmdDYWNoZSA9IG5ldyBOaSgpO3ZhciBlID0gbmV3IFNldCgpO2Quc2V0KGIsIGUpO30gZWxzZSBlID0gZC5nZXQoYiksIHZvaWQgMCA9PT0gZSAmJiAoZSA9IG5ldyBTZXQoKSwgZC5zZXQoYiwgZSkpO2UuaGFzKGMpIHx8IChlLmFkZChjKSwgYSA9IFVpLmJpbmQobnVsbCwgYSwgYiwgYyksIGIudGhlbihhLCBhKSk7fWZ1bmN0aW9uIFZpKGEpIHtkbyB7dmFyIGI7aWYgKGIgPSAxMyA9PT0gYS50YWcpIGIgPSBhLm1lbW9pemVkU3RhdGUsIGIgPSBudWxsICE9PSBiID8gbnVsbCAhPT0gYi5kZWh5ZHJhdGVkID8gITAgOiAhMSA6ICEwO2lmIChiKSByZXR1cm4gYTthID0gYS5yZXR1cm47fSB3aGlsZSAobnVsbCAhPT0gYSk7cmV0dXJuIG51bGw7fQogICAgICAgICAgZnVuY3Rpb24gV2koYSwgYiwgYywgZCwgZSkge2lmICgwID09PSAoYS5tb2RlICYgMSkpIHJldHVybiBhID09PSBiID8gYS5mbGFncyB8PSA2NTUzNiA6IChhLmZsYWdzIHw9IDEyOCwgYy5mbGFncyB8PSAxMzEwNzIsIGMuZmxhZ3MgJj0gLTUyODA1LCAxID09PSBjLnRhZyAmJiAobnVsbCA9PT0gYy5hbHRlcm5hdGUgPyBjLnRhZyA9IDE3IDogKGIgPSBjaCgtMSwgMSksIGIudGFnID0gMiwgZGgoYywgYiwgMSkpKSwgYy5sYW5lcyB8PSAxKSwgYTthLmZsYWdzIHw9IDY1NTM2O2EubGFuZXMgPSBlO3JldHVybiBhO312YXIgWGkgPSB1YS5SZWFjdEN1cnJlbnRPd25lcixVZyA9ICExO2Z1bmN0aW9uIFlpKGEsIGIsIGMsIGQpIHtiLmNoaWxkID0gbnVsbCA9PT0gYSA/IENoKGIsIG51bGwsIGMsIGQpIDogQmgoYiwgYS5jaGlsZCwgYywgZCk7fQogICAgICAgICAgZnVuY3Rpb24gWmkoYSwgYiwgYywgZCwgZSkge2MgPSBjLnJlbmRlcjt2YXIgZiA9IGIucmVmO1RnKGIsIGUpO2QgPSBYaChhLCBiLCBjLCBkLCBmLCBlKTtjID0gYmkoKTtpZiAobnVsbCAhPT0gYSAmJiAhVWcpIHJldHVybiBiLnVwZGF0ZVF1ZXVlID0gYS51cGRhdGVRdWV1ZSwgYi5mbGFncyAmPSAtMjA1MywgYS5sYW5lcyAmPSB+ZSwgJGkoYSwgYiwgZSk7SSAmJiBjICYmIHZnKGIpO2IuZmxhZ3MgfD0gMTtZaShhLCBiLCBkLCBlKTtyZXR1cm4gYi5jaGlsZDt9CiAgICAgICAgICBmdW5jdGlvbiBhaihhLCBiLCBjLCBkLCBlKSB7aWYgKG51bGwgPT09IGEpIHt2YXIgZiA9IGMudHlwZTtpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGYgJiYgIWJqKGYpICYmIHZvaWQgMCA9PT0gZi5kZWZhdWx0UHJvcHMgJiYgbnVsbCA9PT0gYy5jb21wYXJlICYmIHZvaWQgMCA9PT0gYy5kZWZhdWx0UHJvcHMpIHJldHVybiBiLnRhZyA9IDE1LCBiLnR5cGUgPSBmLCBjaihhLCBiLCBmLCBkLCBlKTthID0geWgoYy50eXBlLCBudWxsLCBkLCBiLCBiLm1vZGUsIGUpO2EucmVmID0gYi5yZWY7YS5yZXR1cm4gPSBiO3JldHVybiBiLmNoaWxkID0gYTt9ZiA9IGEuY2hpbGQ7aWYgKDAgPT09IChhLmxhbmVzICYgZSkpIHt2YXIgZyA9IGYubWVtb2l6ZWRQcm9wcztjID0gYy5jb21wYXJlO2MgPSBudWxsICE9PSBjID8gYyA6IEllO2lmIChjKGcsIGQpICYmIGEucmVmID09PSBiLnJlZikgcmV0dXJuICRpKGEsIGIsIGUpO31iLmZsYWdzIHw9IDE7YSA9IHdoKGYsIGQpO2EucmVmID0gYi5yZWY7YS5yZXR1cm4gPSBiO3JldHVybiBiLmNoaWxkID0gYTt9CiAgICAgICAgICBmdW5jdGlvbiBjaihhLCBiLCBjLCBkLCBlKSB7aWYgKG51bGwgIT09IGEpIHt2YXIgZiA9IGEubWVtb2l6ZWRQcm9wcztpZiAoSWUoZiwgZCkgJiYgYS5yZWYgPT09IGIucmVmKSBpZiAoVWcgPSAhMSwgYi5wZW5kaW5nUHJvcHMgPSBkID0gZiwgMCAhPT0gKGEubGFuZXMgJiBlKSkgMCAhPT0gKGEuZmxhZ3MgJiAxMzEwNzIpICYmIChVZyA9ICEwKTtlbHNlIHJldHVybiBiLmxhbmVzID0gYS5sYW5lcywgJGkoYSwgYiwgZSk7fXJldHVybiBkaihhLCBiLCBjLCBkLCBlKTt9CiAgICAgICAgICBmdW5jdGlvbiBlaihhLCBiLCBjKSB7dmFyIGQgPSBiLnBlbmRpbmdQcm9wcyxlID0gZC5jaGlsZHJlbixmID0gbnVsbCAhPT0gYSA/IGEubWVtb2l6ZWRTdGF0ZSA6IG51bGw7aWYgKCJoaWRkZW4iID09PSBkLm1vZGUpIHtpZiAoMCA9PT0gKGIubW9kZSAmIDEpKSBiLm1lbW9pemVkU3RhdGUgPSB7IGJhc2VMYW5lczogMCwgY2FjaGVQb29sOiBudWxsLCB0cmFuc2l0aW9uczogbnVsbCB9LCBHKGZqLCBnaiksIGdqIHw9IGM7ZWxzZSB7aWYgKDAgPT09IChjICYgMTA3Mzc0MTgyNCkpIHJldHVybiBhID0gbnVsbCAhPT0gZiA/IGYuYmFzZUxhbmVzIHwgYyA6IGMsIGIubGFuZXMgPSBiLmNoaWxkTGFuZXMgPSAxMDczNzQxODI0LCBiLm1lbW9pemVkU3RhdGUgPSB7IGJhc2VMYW5lczogYSwgY2FjaGVQb29sOiBudWxsLCB0cmFuc2l0aW9uczogbnVsbCB9LCBiLnVwZGF0ZVF1ZXVlID0gbnVsbCwgRyhmaiwgZ2opLCBnaiB8PSBhLCBudWxsO2IubWVtb2l6ZWRTdGF0ZSA9IHsgYmFzZUxhbmVzOiAwLCBjYWNoZVBvb2w6IG51bGwsIHRyYW5zaXRpb25zOiBudWxsIH07ZCA9IG51bGwgIT09IGYgPyBmLmJhc2VMYW5lcyA6IGM7RyhmaiwgZ2opO2dqIHw9IGQ7fX0gZWxzZSBudWxsICE9PQogICAgICAgICAgICBmID8gKGQgPSBmLmJhc2VMYW5lcyB8IGMsIGIubWVtb2l6ZWRTdGF0ZSA9IG51bGwpIDogZCA9IGMsIEcoZmosIGdqKSwgZ2ogfD0gZDtZaShhLCBiLCBlLCBjKTtyZXR1cm4gYi5jaGlsZDt9ZnVuY3Rpb24gaGooYSwgYikge3ZhciBjID0gYi5yZWY7aWYgKG51bGwgPT09IGEgJiYgbnVsbCAhPT0gYyB8fCBudWxsICE9PSBhICYmIGEucmVmICE9PSBjKSBiLmZsYWdzIHw9IDUxMiwgYi5mbGFncyB8PSAyMDk3MTUyO31mdW5jdGlvbiBkaihhLCBiLCBjLCBkLCBlKSB7dmFyIGYgPSBaZihjKSA/IFhmIDogSC5jdXJyZW50O2YgPSBZZihiLCBmKTtUZyhiLCBlKTtjID0gWGgoYSwgYiwgYywgZCwgZiwgZSk7ZCA9IGJpKCk7aWYgKG51bGwgIT09IGEgJiYgIVVnKSByZXR1cm4gYi51cGRhdGVRdWV1ZSA9IGEudXBkYXRlUXVldWUsIGIuZmxhZ3MgJj0gLTIwNTMsIGEubGFuZXMgJj0gfmUsICRpKGEsIGIsIGUpO0kgJiYgZCAmJiB2ZyhiKTtiLmZsYWdzIHw9IDE7WWkoYSwgYiwgYywgZSk7cmV0dXJuIGIuY2hpbGQ7fQogICAgICAgICAgZnVuY3Rpb24gaWooYSwgYiwgYywgZCwgZSkge2lmIChaZihjKSkge3ZhciBmID0gITA7Y2coYik7fSBlbHNlIGYgPSAhMTtUZyhiLCBlKTtpZiAobnVsbCA9PT0gYi5zdGF0ZU5vZGUpIGpqKGEsIGIpLCBwaChiLCBjLCBkKSwgcmgoYiwgYywgZCwgZSksIGQgPSAhMDtlbHNlIGlmIChudWxsID09PSBhKSB7dmFyIGcgPSBiLnN0YXRlTm9kZSxoID0gYi5tZW1vaXplZFByb3BzO2cucHJvcHMgPSBoO3ZhciBrID0gZy5jb250ZXh0LGwgPSBjLmNvbnRleHRUeXBlOyJvYmplY3QiID09PSB0eXBlb2YgbCAmJiBudWxsICE9PSBsID8gbCA9IFZnKGwpIDogKGwgPSBaZihjKSA/IFhmIDogSC5jdXJyZW50LCBsID0gWWYoYiwgbCkpO3ZhciBtID0gYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscSA9ICJmdW5jdGlvbiIgPT09IHR5cGVvZiBtIHx8ICJmdW5jdGlvbiIgPT09IHR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3EgfHwgImZ1bmN0aW9uIiAhPT0gdHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiYgImZ1bmN0aW9uIiAhPT0gdHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyB8fAogICAgICAgICAgICAgIChoICE9PSBkIHx8IGsgIT09IGwpICYmIHFoKGIsIGcsIGQsIGwpOyRnID0gITE7dmFyIHIgPSBiLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZSA9IHI7Z2goYiwgZCwgZywgZSk7ayA9IGIubWVtb2l6ZWRTdGF0ZTtoICE9PSBkIHx8IHIgIT09IGsgfHwgV2YuY3VycmVudCB8fCAkZyA/ICgiZnVuY3Rpb24iID09PSB0eXBlb2YgbSAmJiAoa2goYiwgYywgbSwgZCksIGsgPSBiLm1lbW9pemVkU3RhdGUpLCAoaCA9ICRnIHx8IG9oKGIsIGMsIGgsIGQsIHIsIGssIGwpKSA/IChxIHx8ICJmdW5jdGlvbiIgIT09IHR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiYgImZ1bmN0aW9uIiAhPT0gdHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50IHx8ICgiZnVuY3Rpb24iID09PSB0eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQgJiYgZy5jb21wb25lbnRXaWxsTW91bnQoKSwgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCAmJiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksICJmdW5jdGlvbiIgPT09IHR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50ICYmIChiLmZsYWdzIHw9IDQxOTQzMDgpKSA6ICgKICAgICAgICAgICAgICAiZnVuY3Rpb24iID09PSB0eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCAmJiAoYi5mbGFncyB8PSA0MTk0MzA4KSwgYi5tZW1vaXplZFByb3BzID0gZCwgYi5tZW1vaXplZFN0YXRlID0gayksIGcucHJvcHMgPSBkLCBnLnN0YXRlID0gaywgZy5jb250ZXh0ID0gbCwgZCA9IGgpIDogKCJmdW5jdGlvbiIgPT09IHR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50ICYmIChiLmZsYWdzIHw9IDQxOTQzMDgpLCBkID0gITEpO30gZWxzZSB7ZyA9IGIuc3RhdGVOb2RlO2JoKGEsIGIpO2ggPSBiLm1lbW9pemVkUHJvcHM7bCA9IGIudHlwZSA9PT0gYi5lbGVtZW50VHlwZSA/IGggOiBMZyhiLnR5cGUsIGgpO2cucHJvcHMgPSBsO3EgPSBiLnBlbmRpbmdQcm9wcztyID0gZy5jb250ZXh0O2sgPSBjLmNvbnRleHRUeXBlOyJvYmplY3QiID09PSB0eXBlb2YgayAmJiBudWxsICE9PSBrID8gayA9IFZnKGspIDogKGsgPSBaZihjKSA/IFhmIDogSC5jdXJyZW50LCBrID0gWWYoYiwgaykpO3ZhciB5ID0gYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG0gPSAiZnVuY3Rpb24iID09PSB0eXBlb2YgeSB8fCAiZnVuY3Rpb24iID09PSB0eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSkgfHwKICAgICAgICAgICAgICAiZnVuY3Rpb24iICE9PSB0eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAmJiAiZnVuY3Rpb24iICE9PSB0eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIHx8IChoICE9PSBxIHx8IHIgIT09IGspICYmIHFoKGIsIGcsIGQsIGspOyRnID0gITE7ciA9IGIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlID0gcjtnaChiLCBkLCBnLCBlKTt2YXIgbiA9IGIubWVtb2l6ZWRTdGF0ZTtoICE9PSBxIHx8IHIgIT09IG4gfHwgV2YuY3VycmVudCB8fCAkZyA/ICgiZnVuY3Rpb24iID09PSB0eXBlb2YgeSAmJiAoa2goYiwgYywgeSwgZCksIG4gPSBiLm1lbW9pemVkU3RhdGUpLCAobCA9ICRnIHx8IG9oKGIsIGMsIGwsIGQsIHIsIG4sIGspIHx8ICExKSA/IChtIHx8ICJmdW5jdGlvbiIgIT09IHR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmICJmdW5jdGlvbiIgIT09IHR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUgfHwgKCJmdW5jdGlvbiIgPT09IHR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUgJiYgZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsIG4sIGspLCAiZnVuY3Rpb24iID09PSB0eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSAmJgogICAgICAgICAgICAgIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCwgbiwgaykpLCAiZnVuY3Rpb24iID09PSB0eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUgJiYgKGIuZmxhZ3MgfD0gNCksICJmdW5jdGlvbiIgPT09IHR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICYmIChiLmZsYWdzIHw9IDEwMjQpKSA6ICgiZnVuY3Rpb24iICE9PSB0eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUgfHwgaCA9PT0gYS5tZW1vaXplZFByb3BzICYmIHIgPT09IGEubWVtb2l6ZWRTdGF0ZSB8fCAoYi5mbGFncyB8PSA0KSwgImZ1bmN0aW9uIiAhPT0gdHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHwgaCA9PT0gYS5tZW1vaXplZFByb3BzICYmIHIgPT09IGEubWVtb2l6ZWRTdGF0ZSB8fCAoYi5mbGFncyB8PSAxMDI0KSwgYi5tZW1vaXplZFByb3BzID0gZCwgYi5tZW1vaXplZFN0YXRlID0gbiksIGcucHJvcHMgPSBkLCBnLnN0YXRlID0gbiwgZy5jb250ZXh0ID0gaywgZCA9IGwpIDogKCJmdW5jdGlvbiIgIT09IHR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSB8fCBoID09PSBhLm1lbW9pemVkUHJvcHMgJiYgciA9PT0KICAgICAgICAgICAgICBhLm1lbW9pemVkU3RhdGUgfHwgKGIuZmxhZ3MgfD0gNCksICJmdW5jdGlvbiIgIT09IHR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlIHx8IGggPT09IGEubWVtb2l6ZWRQcm9wcyAmJiByID09PSBhLm1lbW9pemVkU3RhdGUgfHwgKGIuZmxhZ3MgfD0gMTAyNCksIGQgPSAhMSk7fXJldHVybiBraihhLCBiLCBjLCBkLCBmLCBlKTt9CiAgICAgICAgICBmdW5jdGlvbiBraihhLCBiLCBjLCBkLCBlLCBmKSB7aGooYSwgYik7dmFyIGcgPSAwICE9PSAoYi5mbGFncyAmIDEyOCk7aWYgKCFkICYmICFnKSByZXR1cm4gZSAmJiBkZyhiLCBjLCAhMSksICRpKGEsIGIsIGYpO2QgPSBiLnN0YXRlTm9kZTtYaS5jdXJyZW50ID0gYjt2YXIgaCA9IGcgJiYgImZ1bmN0aW9uIiAhPT0gdHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID8gbnVsbCA6IGQucmVuZGVyKCk7Yi5mbGFncyB8PSAxO251bGwgIT09IGEgJiYgZyA/IChiLmNoaWxkID0gQmgoYiwgYS5jaGlsZCwgbnVsbCwgZiksIGIuY2hpbGQgPSBCaChiLCBudWxsLCBoLCBmKSkgOiBZaShhLCBiLCBoLCBmKTtiLm1lbW9pemVkU3RhdGUgPSBkLnN0YXRlO2UgJiYgZGcoYiwgYywgITApO3JldHVybiBiLmNoaWxkO31mdW5jdGlvbiBsaihhKSB7dmFyIGIgPSBhLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0ID8gYWcoYSwgYi5wZW5kaW5nQ29udGV4dCwgYi5wZW5kaW5nQ29udGV4dCAhPT0gYi5jb250ZXh0KSA6IGIuY29udGV4dCAmJiBhZyhhLCBiLmNvbnRleHQsICExKTtJaChhLCBiLmNvbnRhaW5lckluZm8pO30KICAgICAgICAgIGZ1bmN0aW9uIG1qKGEsIGIsIGMsIGQsIGUpIHtJZygpO0pnKGUpO2IuZmxhZ3MgfD0gMjU2O1lpKGEsIGIsIGMsIGQpO3JldHVybiBiLmNoaWxkO312YXIgbmogPSB7IGRlaHlkcmF0ZWQ6IG51bGwsIHRyZWVDb250ZXh0OiBudWxsLCByZXRyeUxhbmU6IDAgfTtmdW5jdGlvbiBvaihhKSB7cmV0dXJuIHsgYmFzZUxhbmVzOiBhLCBjYWNoZVBvb2w6IG51bGwsIHRyYW5zaXRpb25zOiBudWxsIH07fQogICAgICAgICAgZnVuY3Rpb24gcGooYSwgYiwgYykge3ZhciBkID0gYi5wZW5kaW5nUHJvcHMsZSA9IE0uY3VycmVudCxmID0gITEsZyA9IDAgIT09IChiLmZsYWdzICYgMTI4KSxoOyhoID0gZykgfHwgKGggPSBudWxsICE9PSBhICYmIG51bGwgPT09IGEubWVtb2l6ZWRTdGF0ZSA/ICExIDogMCAhPT0gKGUgJiAyKSk7aWYgKGgpIGYgPSAhMCwgYi5mbGFncyAmPSAtMTI5O2Vsc2UgaWYgKG51bGwgPT09IGEgfHwgbnVsbCAhPT0gYS5tZW1vaXplZFN0YXRlKSBlIHw9IDE7RyhNLCBlICYgMSk7aWYgKG51bGwgPT09IGEpIHtFZyhiKTthID0gYi5tZW1vaXplZFN0YXRlO2lmIChudWxsICE9PSBhICYmIChhID0gYS5kZWh5ZHJhdGVkLCBudWxsICE9PSBhKSkgcmV0dXJuIDAgPT09IChiLm1vZGUgJiAxKSA/IGIubGFuZXMgPSAxIDogIiQhIiA9PT0gYS5kYXRhID8gYi5sYW5lcyA9IDggOiBiLmxhbmVzID0gMTA3Mzc0MTgyNCwgbnVsbDtnID0gZC5jaGlsZHJlbjthID0gZC5mYWxsYmFjaztyZXR1cm4gZiA/IChkID0gYi5tb2RlLCBmID0gYi5jaGlsZCwgZyA9IHsgbW9kZTogImhpZGRlbiIsIGNoaWxkcmVuOiBnIH0sIDAgPT09IChkICYgMSkgJiYgbnVsbCAhPT0gZiA/IChmLmNoaWxkTGFuZXMgPSAwLCBmLnBlbmRpbmdQcm9wcyA9CiAgICAgICAgICAgICAgZykgOiBmID0gcWooZywgZCwgMCwgbnVsbCksIGEgPSBBaChhLCBkLCBjLCBudWxsKSwgZi5yZXR1cm4gPSBiLCBhLnJldHVybiA9IGIsIGYuc2libGluZyA9IGEsIGIuY2hpbGQgPSBmLCBiLmNoaWxkLm1lbW9pemVkU3RhdGUgPSBvaihjKSwgYi5tZW1vaXplZFN0YXRlID0gbmosIGEpIDogcmooYiwgZyk7fWUgPSBhLm1lbW9pemVkU3RhdGU7aWYgKG51bGwgIT09IGUgJiYgKGggPSBlLmRlaHlkcmF0ZWQsIG51bGwgIT09IGgpKSByZXR1cm4gc2ooYSwgYiwgZywgZCwgaCwgZSwgYyk7aWYgKGYpIHtmID0gZC5mYWxsYmFjaztnID0gYi5tb2RlO2UgPSBhLmNoaWxkO2ggPSBlLnNpYmxpbmc7dmFyIGsgPSB7IG1vZGU6ICJoaWRkZW4iLCBjaGlsZHJlbjogZC5jaGlsZHJlbiB9OzAgPT09IChnICYgMSkgJiYgYi5jaGlsZCAhPT0gZSA/IChkID0gYi5jaGlsZCwgZC5jaGlsZExhbmVzID0gMCwgZC5wZW5kaW5nUHJvcHMgPSBrLCBiLmRlbGV0aW9ucyA9IG51bGwpIDogKGQgPSB3aChlLCBrKSwgZC5zdWJ0cmVlRmxhZ3MgPSBlLnN1YnRyZWVGbGFncyAmIDE0NjgwMDY0KTtudWxsICE9PSBoID8gZiA9IHdoKGgsIGYpIDogKGYgPSBBaChmLCBnLCBjLCBudWxsKSwgZi5mbGFncyB8PSAyKTtmLnJldHVybiA9CiAgICAgICAgICAgICAgYjtkLnJldHVybiA9IGI7ZC5zaWJsaW5nID0gZjtiLmNoaWxkID0gZDtkID0gZjtmID0gYi5jaGlsZDtnID0gYS5jaGlsZC5tZW1vaXplZFN0YXRlO2cgPSBudWxsID09PSBnID8gb2ooYykgOiB7IGJhc2VMYW5lczogZy5iYXNlTGFuZXMgfCBjLCBjYWNoZVBvb2w6IG51bGwsIHRyYW5zaXRpb25zOiBnLnRyYW5zaXRpb25zIH07Zi5tZW1vaXplZFN0YXRlID0gZztmLmNoaWxkTGFuZXMgPSBhLmNoaWxkTGFuZXMgJiB+YztiLm1lbW9pemVkU3RhdGUgPSBuajtyZXR1cm4gZDt9ZiA9IGEuY2hpbGQ7YSA9IGYuc2libGluZztkID0gd2goZiwgeyBtb2RlOiAidmlzaWJsZSIsIGNoaWxkcmVuOiBkLmNoaWxkcmVuIH0pOzAgPT09IChiLm1vZGUgJiAxKSAmJiAoZC5sYW5lcyA9IGMpO2QucmV0dXJuID0gYjtkLnNpYmxpbmcgPSBudWxsO251bGwgIT09IGEgJiYgKGMgPSBiLmRlbGV0aW9ucywgbnVsbCA9PT0gYyA/IChiLmRlbGV0aW9ucyA9IFthXSwgYi5mbGFncyB8PSAxNikgOiBjLnB1c2goYSkpO2IuY2hpbGQgPSBkO2IubWVtb2l6ZWRTdGF0ZSA9IG51bGw7cmV0dXJuIGQ7fQogICAgICAgICAgZnVuY3Rpb24gcmooYSwgYikge2IgPSBxaih7IG1vZGU6ICJ2aXNpYmxlIiwgY2hpbGRyZW46IGIgfSwgYS5tb2RlLCAwLCBudWxsKTtiLnJldHVybiA9IGE7cmV0dXJuIGEuY2hpbGQgPSBiO31mdW5jdGlvbiB0aihhLCBiLCBjLCBkKSB7bnVsbCAhPT0gZCAmJiBKZyhkKTtCaChiLCBhLmNoaWxkLCBudWxsLCBjKTthID0gcmooYiwgYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3MgfD0gMjtiLm1lbW9pemVkU3RhdGUgPSBudWxsO3JldHVybiBhO30KICAgICAgICAgIGZ1bmN0aW9uIHNqKGEsIGIsIGMsIGQsIGUsIGYsIGcpIHtpZiAoYykge2lmIChiLmZsYWdzICYgMjU2KSByZXR1cm4gYi5mbGFncyAmPSAtMjU3LCBkID0gTGkoRXJyb3IocCg0MjIpKSksIHRqKGEsIGIsIGcsIGQpO2lmIChudWxsICE9PSBiLm1lbW9pemVkU3RhdGUpIHJldHVybiBiLmNoaWxkID0gYS5jaGlsZCwgYi5mbGFncyB8PSAxMjgsIG51bGw7ZiA9IGQuZmFsbGJhY2s7ZSA9IGIubW9kZTtkID0gcWooeyBtb2RlOiAidmlzaWJsZSIsIGNoaWxkcmVuOiBkLmNoaWxkcmVuIH0sIGUsIDAsIG51bGwpO2YgPSBBaChmLCBlLCBnLCBudWxsKTtmLmZsYWdzIHw9IDI7ZC5yZXR1cm4gPSBiO2YucmV0dXJuID0gYjtkLnNpYmxpbmcgPSBmO2IuY2hpbGQgPSBkOzAgIT09IChiLm1vZGUgJiAxKSAmJiBCaChiLCBhLmNoaWxkLCBudWxsLCBnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGUgPSBvaihnKTtiLm1lbW9pemVkU3RhdGUgPSBuajtyZXR1cm4gZjt9aWYgKDAgPT09IChiLm1vZGUgJiAxKSkgcmV0dXJuIHRqKGEsIGIsIGcsIG51bGwpO2lmICgiJCEiID09PSBlLmRhdGEpIHtkID0gZS5uZXh0U2libGluZyAmJiBlLm5leHRTaWJsaW5nLmRhdGFzZXQ7CiAgICAgICAgICAgICAgaWYgKGQpIHZhciBoID0gZC5kZ3N0O2QgPSBoO2YgPSBFcnJvcihwKDQxOSkpO2QgPSBMaShmLCBkLCB2b2lkIDApO3JldHVybiB0aihhLCBiLCBnLCBkKTt9aCA9IDAgIT09IChnICYgYS5jaGlsZExhbmVzKTtpZiAoVWcgfHwgaCkge2QgPSBSO2lmIChudWxsICE9PSBkKSB7c3dpdGNoIChnICYgLWcpIHtjYXNlIDQ6ZSA9IDI7YnJlYWs7Y2FzZSAxNjplID0gODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZSA9IDMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmUgPSAyNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplID0gMDt9ZSA9IDAgIT09IChlICYgKGQuc3VzcGVuZGVkTGFuZXMgfCBnKSkgPyAwIDogZTsKICAgICAgICAgICAgICAgIDAgIT09IGUgJiYgZSAhPT0gZi5yZXRyeUxhbmUgJiYgKGYucmV0cnlMYW5lID0gZSwgWmcoYSwgZSksIG1oKGQsIGEsIGUsIC0xKSk7fXVqKCk7ZCA9IExpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLCBiLCBnLCBkKTt9aWYgKCIkPyIgPT09IGUuZGF0YSkgcmV0dXJuIGIuZmxhZ3MgfD0gMTI4LCBiLmNoaWxkID0gYS5jaGlsZCwgYiA9IHZqLmJpbmQobnVsbCwgYSksIGUuX3JlYWN0UmV0cnkgPSBiLCBudWxsO2EgPSBmLnRyZWVDb250ZXh0O3lnID0gTGYoZS5uZXh0U2libGluZyk7eGcgPSBiO0kgPSAhMDt6ZyA9IG51bGw7bnVsbCAhPT0gYSAmJiAob2dbcGcrK10gPSByZywgb2dbcGcrK10gPSBzZywgb2dbcGcrK10gPSBxZywgcmcgPSBhLmlkLCBzZyA9IGEub3ZlcmZsb3csIHFnID0gYik7YiA9IHJqKGIsIGQuY2hpbGRyZW4pO2IuZmxhZ3MgfD0gNDA5NjtyZXR1cm4gYjt9ZnVuY3Rpb24gd2ooYSwgYiwgYykge2EubGFuZXMgfD0gYjt2YXIgZCA9IGEuYWx0ZXJuYXRlO251bGwgIT09IGQgJiYgKGQubGFuZXMgfD0gYik7U2coYS5yZXR1cm4sIGIsIGMpO30KICAgICAgICAgIGZ1bmN0aW9uIHhqKGEsIGIsIGMsIGQsIGUpIHt2YXIgZiA9IGEubWVtb2l6ZWRTdGF0ZTtudWxsID09PSBmID8gYS5tZW1vaXplZFN0YXRlID0geyBpc0JhY2t3YXJkczogYiwgcmVuZGVyaW5nOiBudWxsLCByZW5kZXJpbmdTdGFydFRpbWU6IDAsIGxhc3Q6IGQsIHRhaWw6IGMsIHRhaWxNb2RlOiBlIH0gOiAoZi5pc0JhY2t3YXJkcyA9IGIsIGYucmVuZGVyaW5nID0gbnVsbCwgZi5yZW5kZXJpbmdTdGFydFRpbWUgPSAwLCBmLmxhc3QgPSBkLCBmLnRhaWwgPSBjLCBmLnRhaWxNb2RlID0gZSk7fQogICAgICAgICAgZnVuY3Rpb24geWooYSwgYiwgYykge3ZhciBkID0gYi5wZW5kaW5nUHJvcHMsZSA9IGQucmV2ZWFsT3JkZXIsZiA9IGQudGFpbDtZaShhLCBiLCBkLmNoaWxkcmVuLCBjKTtkID0gTS5jdXJyZW50O2lmICgwICE9PSAoZCAmIDIpKSBkID0gZCAmIDEgfCAyLCBiLmZsYWdzIHw9IDEyODtlbHNlIHtpZiAobnVsbCAhPT0gYSAmJiAwICE9PSAoYS5mbGFncyAmIDEyOCkpIGE6IGZvciAoYSA9IGIuY2hpbGQ7IG51bGwgIT09IGE7KSB7aWYgKDEzID09PSBhLnRhZykgbnVsbCAhPT0gYS5tZW1vaXplZFN0YXRlICYmIHdqKGEsIGMsIGIpO2Vsc2UgaWYgKDE5ID09PSBhLnRhZykgd2ooYSwgYywgYik7ZWxzZSBpZiAobnVsbCAhPT0gYS5jaGlsZCkge2EuY2hpbGQucmV0dXJuID0gYTthID0gYS5jaGlsZDtjb250aW51ZTt9aWYgKGEgPT09IGIpIGJyZWFrIGE7Zm9yICg7IG51bGwgPT09IGEuc2libGluZzspIHtpZiAobnVsbCA9PT0gYS5yZXR1cm4gfHwgYS5yZXR1cm4gPT09IGIpIGJyZWFrIGE7YSA9IGEucmV0dXJuO31hLnNpYmxpbmcucmV0dXJuID0gYS5yZXR1cm47YSA9IGEuc2libGluZzt9ZCAmPSAxO31HKE0sIGQpO2lmICgwID09PSAoYi5tb2RlICYgMSkpIGIubWVtb2l6ZWRTdGF0ZSA9CiAgICAgICAgICAgIG51bGw7ZWxzZSBzd2l0Y2ggKGUpIHtjYXNlICJmb3J3YXJkcyI6YyA9IGIuY2hpbGQ7Zm9yIChlID0gbnVsbDsgbnVsbCAhPT0gYzspIGEgPSBjLmFsdGVybmF0ZSwgbnVsbCAhPT0gYSAmJiBudWxsID09PSBNaChhKSAmJiAoZSA9IGMpLCBjID0gYy5zaWJsaW5nO2MgPSBlO251bGwgPT09IGMgPyAoZSA9IGIuY2hpbGQsIGIuY2hpbGQgPSBudWxsKSA6IChlID0gYy5zaWJsaW5nLCBjLnNpYmxpbmcgPSBudWxsKTt4aihiLCAhMSwgZSwgYywgZik7YnJlYWs7Y2FzZSAiYmFja3dhcmRzIjpjID0gbnVsbDtlID0gYi5jaGlsZDtmb3IgKGIuY2hpbGQgPSBudWxsOyBudWxsICE9PSBlOykge2EgPSBlLmFsdGVybmF0ZTtpZiAobnVsbCAhPT0gYSAmJiBudWxsID09PSBNaChhKSkge2IuY2hpbGQgPSBlO2JyZWFrO31hID0gZS5zaWJsaW5nO2Uuc2libGluZyA9IGM7YyA9IGU7ZSA9IGE7fXhqKGIsICEwLCBjLCBudWxsLCBmKTticmVhaztjYXNlICJ0b2dldGhlciI6eGooYiwgITEsIG51bGwsIG51bGwsIHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGUgPSBudWxsO31yZXR1cm4gYi5jaGlsZDt9CiAgICAgICAgICBmdW5jdGlvbiBqaihhLCBiKSB7MCA9PT0gKGIubW9kZSAmIDEpICYmIG51bGwgIT09IGEgJiYgKGEuYWx0ZXJuYXRlID0gbnVsbCwgYi5hbHRlcm5hdGUgPSBudWxsLCBiLmZsYWdzIHw9IDIpO31mdW5jdGlvbiAkaShhLCBiLCBjKSB7bnVsbCAhPT0gYSAmJiAoYi5kZXBlbmRlbmNpZXMgPSBhLmRlcGVuZGVuY2llcyk7aGggfD0gYi5sYW5lcztpZiAoMCA9PT0gKGMgJiBiLmNoaWxkTGFuZXMpKSByZXR1cm4gbnVsbDtpZiAobnVsbCAhPT0gYSAmJiBiLmNoaWxkICE9PSBhLmNoaWxkKSB0aHJvdyBFcnJvcihwKDE1MykpO2lmIChudWxsICE9PSBiLmNoaWxkKSB7YSA9IGIuY2hpbGQ7YyA9IHdoKGEsIGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkID0gYztmb3IgKGMucmV0dXJuID0gYjsgbnVsbCAhPT0gYS5zaWJsaW5nOykgYSA9IGEuc2libGluZywgYyA9IGMuc2libGluZyA9IHdoKGEsIGEucGVuZGluZ1Byb3BzKSwgYy5yZXR1cm4gPSBiO2Muc2libGluZyA9IG51bGw7fXJldHVybiBiLmNoaWxkO30KICAgICAgICAgIGZ1bmN0aW9uIHpqKGEsIGIsIGMpIHtzd2l0Y2ggKGIudGFnKSB7Y2FzZSAzOmxqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OktoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpICYmIGNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLCBiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkID0gYi50eXBlLl9jb250ZXh0LGUgPSBiLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZywgZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWUgPSBlO2JyZWFrO2Nhc2UgMTM6ZCA9IGIubWVtb2l6ZWRTdGF0ZTtpZiAobnVsbCAhPT0gZCkge2lmIChudWxsICE9PSBkLmRlaHlkcmF0ZWQpIHJldHVybiBHKE0sIE0uY3VycmVudCAmIDEpLCBiLmZsYWdzIHw9IDEyOCwgbnVsbDtpZiAoMCAhPT0gKGMgJiBiLmNoaWxkLmNoaWxkTGFuZXMpKSByZXR1cm4gcGooYSwgYiwgYyk7RyhNLCBNLmN1cnJlbnQgJiAxKTthID0gJGkoYSwgYiwgYyk7cmV0dXJuIG51bGwgIT09IGEgPyBhLnNpYmxpbmcgOiBudWxsO31HKE0sIE0uY3VycmVudCAmIDEpO2JyZWFrO2Nhc2UgMTk6ZCA9IDAgIT09IChjICYKICAgICAgICAgICAgICAgIGIuY2hpbGRMYW5lcyk7aWYgKDAgIT09IChhLmZsYWdzICYgMTI4KSkge2lmIChkKSByZXR1cm4geWooYSwgYiwgYyk7Yi5mbGFncyB8PSAxMjg7fWUgPSBiLm1lbW9pemVkU3RhdGU7bnVsbCAhPT0gZSAmJiAoZS5yZW5kZXJpbmcgPSBudWxsLCBlLnRhaWwgPSBudWxsLCBlLmxhc3RFZmZlY3QgPSBudWxsKTtHKE0sIE0uY3VycmVudCk7aWYgKGQpIGJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzID0gMCwgZWooYSwgYiwgYyk7fXJldHVybiAkaShhLCBiLCBjKTt9dmFyIEFqLCBCaiwgQ2osIERqOwogICAgICAgICAgQWogPSBmdW5jdGlvbiBBaihhLCBiKSB7Zm9yICh2YXIgYyA9IGIuY2hpbGQ7IG51bGwgIT09IGM7KSB7aWYgKDUgPT09IGMudGFnIHx8IDYgPT09IGMudGFnKSBhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmICg0ICE9PSBjLnRhZyAmJiBudWxsICE9PSBjLmNoaWxkKSB7Yy5jaGlsZC5yZXR1cm4gPSBjO2MgPSBjLmNoaWxkO2NvbnRpbnVlO31pZiAoYyA9PT0gYikgYnJlYWs7Zm9yICg7IG51bGwgPT09IGMuc2libGluZzspIHtpZiAobnVsbCA9PT0gYy5yZXR1cm4gfHwgYy5yZXR1cm4gPT09IGIpIHJldHVybjtjID0gYy5yZXR1cm47fWMuc2libGluZy5yZXR1cm4gPSBjLnJldHVybjtjID0gYy5zaWJsaW5nO319O0JqID0gZnVuY3Rpb24gQmooKSB7fTsKICAgICAgICAgIENqID0gZnVuY3Rpb24gQ2ooYSwgYiwgYywgZCkge3ZhciBlID0gYS5tZW1vaXplZFByb3BzO2lmIChlICE9PSBkKSB7YSA9IGIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmID0gbnVsbDtzd2l0Y2ggKGMpIHtjYXNlICJpbnB1dCI6ZSA9IFlhKGEsIGUpO2QgPSBZYShhLCBkKTtmID0gW107YnJlYWs7Y2FzZSAic2VsZWN0IjplID0gQSh7fSwgZSwgeyB2YWx1ZTogdm9pZCAwIH0pO2QgPSBBKHt9LCBkLCB7IHZhbHVlOiB2b2lkIDAgfSk7ZiA9IFtdO2JyZWFrO2Nhc2UgInRleHRhcmVhIjplID0gZ2IoYSwgZSk7ZCA9IGdiKGEsIGQpO2YgPSBbXTticmVhaztkZWZhdWx0OiJmdW5jdGlvbiIgIT09IHR5cGVvZiBlLm9uQ2xpY2sgJiYgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGQub25DbGljayAmJiAoYS5vbmNsaWNrID0gQmYpO311YihjLCBkKTt2YXIgZztjID0gbnVsbDtmb3IgKGwgaW4gZSkgaWYgKCFkLmhhc093blByb3BlcnR5KGwpICYmIGUuaGFzT3duUHJvcGVydHkobCkgJiYgbnVsbCAhPSBlW2xdKSBpZiAoInN0eWxlIiA9PT0gbCkge3ZhciBoID0gZVtsXTtmb3IgKGcgaW4gaCkgaC5oYXNPd25Qcm9wZXJ0eShnKSAmJiAoCiAgICAgICAgICAgICAgICBjIHx8IChjID0ge30pLCBjW2ddID0gIiIpO30gZWxzZSAiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiICE9PSBsICYmICJjaGlsZHJlbiIgIT09IGwgJiYgInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIgIT09IGwgJiYgInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIgIT09IGwgJiYgImF1dG9Gb2N1cyIgIT09IGwgJiYgKGVhLmhhc093blByb3BlcnR5KGwpID8gZiB8fCAoZiA9IFtdKSA6IChmID0gZiB8fCBbXSkucHVzaChsLCBudWxsKSk7Zm9yIChsIGluIGQpIHt2YXIgayA9IGRbbF07aCA9IG51bGwgIT0gZSA/IGVbbF0gOiB2b2lkIDA7aWYgKGQuaGFzT3duUHJvcGVydHkobCkgJiYgayAhPT0gaCAmJiAobnVsbCAhPSBrIHx8IG51bGwgIT0gaCkpIGlmICgic3R5bGUiID09PSBsKSB7aWYgKGgpIHtmb3IgKGcgaW4gaCkgIWguaGFzT3duUHJvcGVydHkoZykgfHwgayAmJiBrLmhhc093blByb3BlcnR5KGcpIHx8IChjIHx8IChjID0ge30pLCBjW2ddID0gIiIpO2ZvciAoZyBpbiBrKSBrLmhhc093blByb3BlcnR5KGcpICYmIGhbZ10gIT09IGtbZ10gJiYgKGMgfHwgKGMgPSB7fSksIGNbZ10gPSBrW2ddKTt9IGVsc2UgYyB8fCAoZiB8fCAoZiA9IFtdKSwgZi5wdXNoKGwsCiAgICAgICAgICAgICAgICAgIGMpKSwgYyA9IGs7fSBlbHNlICJkYW5nZXJvdXNseVNldElubmVySFRNTCIgPT09IGwgPyAoayA9IGsgPyBrLl9faHRtbCA6IHZvaWQgMCwgaCA9IGggPyBoLl9faHRtbCA6IHZvaWQgMCwgbnVsbCAhPSBrICYmIGggIT09IGsgJiYgKGYgPSBmIHx8IFtdKS5wdXNoKGwsIGspKSA6ICJjaGlsZHJlbiIgPT09IGwgPyAic3RyaW5nIiAhPT0gdHlwZW9mIGsgJiYgIm51bWJlciIgIT09IHR5cGVvZiBrIHx8IChmID0gZiB8fCBbXSkucHVzaChsLCAiIiArIGspIDogInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIgIT09IGwgJiYgInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIgIT09IGwgJiYgKGVhLmhhc093blByb3BlcnR5KGwpID8gKG51bGwgIT0gayAmJiAib25TY3JvbGwiID09PSBsICYmIEQoInNjcm9sbCIsIGEpLCBmIHx8IGggPT09IGsgfHwgKGYgPSBbXSkpIDogKGYgPSBmIHx8IFtdKS5wdXNoKGwsIGspKTt9YyAmJiAoZiA9IGYgfHwgW10pLnB1c2goInN0eWxlIiwgYyk7dmFyIGwgPSBmO2lmIChiLnVwZGF0ZVF1ZXVlID0gbCkgYi5mbGFncyB8PSA0O319O0RqID0gZnVuY3Rpb24gRGooYSwgYiwgYywgZCkge2MgIT09IGQgJiYgKGIuZmxhZ3MgfD0gNCk7fTsKICAgICAgICAgIGZ1bmN0aW9uIEVqKGEsIGIpIHtpZiAoIUkpIHN3aXRjaCAoYS50YWlsTW9kZSkge2Nhc2UgImhpZGRlbiI6YiA9IGEudGFpbDtmb3IgKHZhciBjID0gbnVsbDsgbnVsbCAhPT0gYjspIG51bGwgIT09IGIuYWx0ZXJuYXRlICYmIChjID0gYiksIGIgPSBiLnNpYmxpbmc7bnVsbCA9PT0gYyA/IGEudGFpbCA9IG51bGwgOiBjLnNpYmxpbmcgPSBudWxsO2JyZWFrO2Nhc2UgImNvbGxhcHNlZCI6YyA9IGEudGFpbDtmb3IgKHZhciBkID0gbnVsbDsgbnVsbCAhPT0gYzspIG51bGwgIT09IGMuYWx0ZXJuYXRlICYmIChkID0gYyksIGMgPSBjLnNpYmxpbmc7bnVsbCA9PT0gZCA/IGIgfHwgbnVsbCA9PT0gYS50YWlsID8gYS50YWlsID0gbnVsbCA6IGEudGFpbC5zaWJsaW5nID0gbnVsbCA6IGQuc2libGluZyA9IG51bGw7fX0KICAgICAgICAgIGZ1bmN0aW9uIFMoYSkge3ZhciBiID0gbnVsbCAhPT0gYS5hbHRlcm5hdGUgJiYgYS5hbHRlcm5hdGUuY2hpbGQgPT09IGEuY2hpbGQsYyA9IDAsZCA9IDA7aWYgKGIpIGZvciAodmFyIGUgPSBhLmNoaWxkOyBudWxsICE9PSBlOykgYyB8PSBlLmxhbmVzIHwgZS5jaGlsZExhbmVzLCBkIHw9IGUuc3VidHJlZUZsYWdzICYgMTQ2ODAwNjQsIGQgfD0gZS5mbGFncyAmIDE0NjgwMDY0LCBlLnJldHVybiA9IGEsIGUgPSBlLnNpYmxpbmc7ZWxzZSBmb3IgKGUgPSBhLmNoaWxkOyBudWxsICE9PSBlOykgYyB8PSBlLmxhbmVzIHwgZS5jaGlsZExhbmVzLCBkIHw9IGUuc3VidHJlZUZsYWdzLCBkIHw9IGUuZmxhZ3MsIGUucmV0dXJuID0gYSwgZSA9IGUuc2libGluZzthLnN1YnRyZWVGbGFncyB8PSBkO2EuY2hpbGRMYW5lcyA9IGM7cmV0dXJuIGI7fQogICAgICAgICAgZnVuY3Rpb24gRmooYSwgYiwgYykge3ZhciBkID0gYi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoIChiLnRhZykge2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLCBudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSAmJiAkZigpLCBTKGIpLCBudWxsO2Nhc2UgMzpkID0gYi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCAmJiAoZC5jb250ZXh0ID0gZC5wZW5kaW5nQ29udGV4dCwgZC5wZW5kaW5nQ29udGV4dCA9IG51bGwpO2lmIChudWxsID09PSBhIHx8IG51bGwgPT09IGEuY2hpbGQpIEdnKGIpID8gYi5mbGFncyB8PSA0IDogbnVsbCA9PT0gYSB8fCBhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkICYmIDAgPT09IChiLmZsYWdzICYgMjU2KSB8fCAoYi5mbGFncyB8PSAxMDI0LCBudWxsICE9PSB6ZyAmJiAoR2ooemcpLCB6ZyA9IG51bGwpKTtCaihhLCBiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZSA9IEhoKEdoLmN1cnJlbnQpOwogICAgICAgICAgICAgICAgYyA9IGIudHlwZTtpZiAobnVsbCAhPT0gYSAmJiBudWxsICE9IGIuc3RhdGVOb2RlKSBDaihhLCBiLCBjLCBkLCBlKSwgYS5yZWYgIT09IGIucmVmICYmIChiLmZsYWdzIHw9IDUxMiwgYi5mbGFncyB8PSAyMDk3MTUyKTtlbHNlIHtpZiAoIWQpIHtpZiAobnVsbCA9PT0gYi5zdGF0ZU5vZGUpIHRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbDt9YSA9IEhoKEVoLmN1cnJlbnQpO2lmIChHZyhiKSkge2QgPSBiLnN0YXRlTm9kZTtjID0gYi50eXBlO3ZhciBmID0gYi5tZW1vaXplZFByb3BzO2RbT2ZdID0gYjtkW1BmXSA9IGY7YSA9IDAgIT09IChiLm1vZGUgJiAxKTtzd2l0Y2ggKGMpIHtjYXNlICJkaWFsb2ciOkQoImNhbmNlbCIsIGQpO0QoImNsb3NlIiwgZCk7YnJlYWs7Y2FzZSAiaWZyYW1lIjpjYXNlICJvYmplY3QiOmNhc2UgImVtYmVkIjpEKCJsb2FkIiwgZCk7YnJlYWs7Y2FzZSAidmlkZW8iOmNhc2UgImF1ZGlvIjpmb3IgKGUgPSAwOyBlIDwgbGYubGVuZ3RoOyBlKyspIEQobGZbZV0sIGQpO2JyZWFrO2Nhc2UgInNvdXJjZSI6RCgiZXJyb3IiLCBkKTticmVhaztjYXNlICJpbWciOmNhc2UgImltYWdlIjpjYXNlICJsaW5rIjpEKCJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgICAgIGQpO0QoImxvYWQiLCBkKTticmVhaztjYXNlICJkZXRhaWxzIjpEKCJ0b2dnbGUiLCBkKTticmVhaztjYXNlICJpbnB1dCI6WmEoZCwgZik7RCgiaW52YWxpZCIsIGQpO2JyZWFrO2Nhc2UgInNlbGVjdCI6ZC5fd3JhcHBlclN0YXRlID0geyB3YXNNdWx0aXBsZTogISFmLm11bHRpcGxlIH07RCgiaW52YWxpZCIsIGQpO2JyZWFrO2Nhc2UgInRleHRhcmVhIjpoYihkLCBmKSwgRCgiaW52YWxpZCIsIGQpO311YihjLCBmKTtlID0gbnVsbDtmb3IgKHZhciBnIGluIGYpIGlmIChmLmhhc093blByb3BlcnR5KGcpKSB7dmFyIGggPSBmW2ddOyJjaGlsZHJlbiIgPT09IGcgPyAic3RyaW5nIiA9PT0gdHlwZW9mIGggPyBkLnRleHRDb250ZW50ICE9PSBoICYmICghMCAhPT0gZi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgJiYgQWYoZC50ZXh0Q29udGVudCwgaCwgYSksIGUgPSBbImNoaWxkcmVuIiwgaF0pIDogIm51bWJlciIgPT09IHR5cGVvZiBoICYmIGQudGV4dENvbnRlbnQgIT09ICIiICsgaCAmJiAoITAgIT09IGYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nICYmIEFmKGQudGV4dENvbnRlbnQsCiAgICAgICAgICAgICAgICAgICAgICBoLCBhKSwgZSA9IFsiY2hpbGRyZW4iLCAiIiArIGhdKSA6IGVhLmhhc093blByb3BlcnR5KGcpICYmIG51bGwgIT0gaCAmJiAib25TY3JvbGwiID09PSBnICYmIEQoInNjcm9sbCIsIGQpO31zd2l0Y2ggKGMpIHtjYXNlICJpbnB1dCI6VmEoZCk7ZGIoZCwgZiwgITApO2JyZWFrO2Nhc2UgInRleHRhcmVhIjpWYShkKTtqYihkKTticmVhaztjYXNlICJzZWxlY3QiOmNhc2UgIm9wdGlvbiI6YnJlYWs7ZGVmYXVsdDoiZnVuY3Rpb24iID09PSB0eXBlb2YgZi5vbkNsaWNrICYmIChkLm9uY2xpY2sgPSBCZik7fWQgPSBlO2IudXBkYXRlUXVldWUgPSBkO251bGwgIT09IGQgJiYgKGIuZmxhZ3MgfD0gNCk7fSBlbHNlIHtnID0gOSA9PT0gZS5ub2RlVHlwZSA/IGUgOiBlLm93bmVyRG9jdW1lbnQ7Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiID09PSBhICYmIChhID0ga2IoYykpOyJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiA9PT0gYSA/ICJzY3JpcHQiID09PSBjID8gKGEgPSBnLmNyZWF0ZUVsZW1lbnQoImRpdiIpLCBhLmlubmVySFRNTCA9ICI8c2NyaXB0Plx4M2Mvc2NyaXB0PiIsIGEgPSBhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpIDoKICAgICAgICAgICAgICAgICAgICAic3RyaW5nIiA9PT0gdHlwZW9mIGQuaXMgPyBhID0gZy5jcmVhdGVFbGVtZW50KGMsIHsgaXM6IGQuaXMgfSkgOiAoYSA9IGcuY3JlYXRlRWxlbWVudChjKSwgInNlbGVjdCIgPT09IGMgJiYgKGcgPSBhLCBkLm11bHRpcGxlID8gZy5tdWx0aXBsZSA9ICEwIDogZC5zaXplICYmIChnLnNpemUgPSBkLnNpemUpKSkgOiBhID0gZy5jcmVhdGVFbGVtZW50TlMoYSwgYyk7YVtPZl0gPSBiO2FbUGZdID0gZDtBaihhLCBiLCAhMSwgITEpO2Iuc3RhdGVOb2RlID0gYTthOiB7ZyA9IHZiKGMsIGQpO3N3aXRjaCAoYykge2Nhc2UgImRpYWxvZyI6RCgiY2FuY2VsIiwgYSk7RCgiY2xvc2UiLCBhKTtlID0gZDticmVhaztjYXNlICJpZnJhbWUiOmNhc2UgIm9iamVjdCI6Y2FzZSAiZW1iZWQiOkQoImxvYWQiLCBhKTtlID0gZDticmVhaztjYXNlICJ2aWRlbyI6Y2FzZSAiYXVkaW8iOmZvciAoZSA9IDA7IGUgPCBsZi5sZW5ndGg7IGUrKykgRChsZltlXSwgYSk7ZSA9IGQ7YnJlYWs7Y2FzZSAic291cmNlIjpEKCJlcnJvciIsIGEpO2UgPSBkO2JyZWFrO2Nhc2UgImltZyI6Y2FzZSAiaW1hZ2UiOmNhc2UgImxpbmsiOkQoImVycm9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhKTtEKCJsb2FkIiwgYSk7ZSA9IGQ7YnJlYWs7Y2FzZSAiZGV0YWlscyI6RCgidG9nZ2xlIiwgYSk7ZSA9IGQ7YnJlYWs7Y2FzZSAiaW5wdXQiOlphKGEsIGQpO2UgPSBZYShhLCBkKTtEKCJpbnZhbGlkIiwgYSk7YnJlYWs7Y2FzZSAib3B0aW9uIjplID0gZDticmVhaztjYXNlICJzZWxlY3QiOmEuX3dyYXBwZXJTdGF0ZSA9IHsgd2FzTXVsdGlwbGU6ICEhZC5tdWx0aXBsZSB9O2UgPSBBKHt9LCBkLCB7IHZhbHVlOiB2b2lkIDAgfSk7RCgiaW52YWxpZCIsIGEpO2JyZWFrO2Nhc2UgInRleHRhcmVhIjpoYihhLCBkKTtlID0gZ2IoYSwgZCk7RCgiaW52YWxpZCIsIGEpO2JyZWFrO2RlZmF1bHQ6ZSA9IGQ7fXViKGMsIGUpO2ggPSBlO2ZvciAoZiBpbiBoKSBpZiAoaC5oYXNPd25Qcm9wZXJ0eShmKSkge3ZhciBrID0gaFtmXTsic3R5bGUiID09PSBmID8gc2IoYSwgaykgOiAiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiID09PSBmID8gKGsgPSBrID8gay5fX2h0bWwgOiB2b2lkIDAsIG51bGwgIT0gayAmJiBuYihhLCBrKSkgOiAiY2hpbGRyZW4iID09PSBmID8gInN0cmluZyIgPT09IHR5cGVvZiBrID8gKCJ0ZXh0YXJlYSIgIT09CiAgICAgICAgICAgICAgICAgICAgICAgIGMgfHwgIiIgIT09IGspICYmIG9iKGEsIGspIDogIm51bWJlciIgPT09IHR5cGVvZiBrICYmIG9iKGEsICIiICsgaykgOiAic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIiAhPT0gZiAmJiAic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiAhPT0gZiAmJiAiYXV0b0ZvY3VzIiAhPT0gZiAmJiAoZWEuaGFzT3duUHJvcGVydHkoZikgPyBudWxsICE9IGsgJiYgIm9uU2Nyb2xsIiA9PT0gZiAmJiBEKCJzY3JvbGwiLCBhKSA6IG51bGwgIT0gayAmJiB0YShhLCBmLCBrLCBnKSk7fXN3aXRjaCAoYykge2Nhc2UgImlucHV0IjpWYShhKTtkYihhLCBkLCAhMSk7YnJlYWs7Y2FzZSAidGV4dGFyZWEiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgIm9wdGlvbiI6bnVsbCAhPSBkLnZhbHVlICYmIGEuc2V0QXR0cmlidXRlKCJ2YWx1ZSIsICIiICsgU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgInNlbGVjdCI6YS5tdWx0aXBsZSA9ICEhZC5tdWx0aXBsZTtmID0gZC52YWx1ZTtudWxsICE9IGYgPyBmYihhLCAhIWQubXVsdGlwbGUsIGYsICExKSA6IG51bGwgIT0gZC5kZWZhdWx0VmFsdWUgJiYgZmIoYSwgISFkLm11bHRpcGxlLCBkLmRlZmF1bHRWYWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAhMCk7YnJlYWs7ZGVmYXVsdDoiZnVuY3Rpb24iID09PSB0eXBlb2YgZS5vbkNsaWNrICYmIChhLm9uY2xpY2sgPSBCZik7fXN3aXRjaCAoYykge2Nhc2UgImJ1dHRvbiI6Y2FzZSAiaW5wdXQiOmNhc2UgInNlbGVjdCI6Y2FzZSAidGV4dGFyZWEiOmQgPSAhIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSAiaW1nIjpkID0gITA7YnJlYWsgYTtkZWZhdWx0OmQgPSAhMTt9fWQgJiYgKGIuZmxhZ3MgfD0gNCk7fW51bGwgIT09IGIucmVmICYmIChiLmZsYWdzIHw9IDUxMiwgYi5mbGFncyB8PSAyMDk3MTUyKTt9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYgKGEgJiYgbnVsbCAhPSBiLnN0YXRlTm9kZSkgRGooYSwgYiwgYS5tZW1vaXplZFByb3BzLCBkKTtlbHNlIHtpZiAoInN0cmluZyIgIT09IHR5cGVvZiBkICYmIG51bGwgPT09IGIuc3RhdGVOb2RlKSB0aHJvdyBFcnJvcihwKDE2NikpO2MgPSBIaChHaC5jdXJyZW50KTtIaChFaC5jdXJyZW50KTtpZiAoR2coYikpIHtkID0gYi5zdGF0ZU5vZGU7YyA9IGIubWVtb2l6ZWRQcm9wcztkW09mXSA9IGI7aWYgKGYgPSBkLm5vZGVWYWx1ZSAhPT0gYykgaWYgKGEgPQogICAgICAgICAgICAgICAgICAgIHhnLCBudWxsICE9PSBhKSBzd2l0Y2ggKGEudGFnKSB7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLCBjLCAwICE9PSAoYS5tb2RlICYgMSkpO2JyZWFrO2Nhc2UgNTohMCAhPT0gYS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyAmJiBBZihkLm5vZGVWYWx1ZSwgYywgMCAhPT0gKGEubW9kZSAmIDEpKTt9ZiAmJiAoYi5mbGFncyB8PSA0KTt9IGVsc2UgZCA9ICg5ID09PSBjLm5vZGVUeXBlID8gYyA6IGMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksIGRbT2ZdID0gYiwgYi5zdGF0ZU5vZGUgPSBkO31TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkID0gYi5tZW1vaXplZFN0YXRlO2lmIChudWxsID09PSBhIHx8IG51bGwgIT09IGEubWVtb2l6ZWRTdGF0ZSAmJiBudWxsICE9PSBhLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCkge2lmIChJICYmIG51bGwgIT09IHlnICYmIDAgIT09IChiLm1vZGUgJiAxKSAmJiAwID09PSAoYi5mbGFncyAmIDEyOCkpIEhnKCksIElnKCksIGIuZmxhZ3MgfD0gOTg1NjAsIGYgPSAhMTtlbHNlIGlmIChmID0gR2coYiksIG51bGwgIT09IGQgJiYgbnVsbCAhPT0gZC5kZWh5ZHJhdGVkKSB7aWYgKG51bGwgPT09CiAgICAgICAgICAgICAgICAgICAgYSkge2lmICghZikgdGhyb3cgRXJyb3IocCgzMTgpKTtmID0gYi5tZW1vaXplZFN0YXRlO2YgPSBudWxsICE9PSBmID8gZi5kZWh5ZHJhdGVkIDogbnVsbDtpZiAoIWYpIHRocm93IEVycm9yKHAoMzE3KSk7ZltPZl0gPSBiO30gZWxzZSBJZygpLCAwID09PSAoYi5mbGFncyAmIDEyOCkgJiYgKGIubWVtb2l6ZWRTdGF0ZSA9IG51bGwpLCBiLmZsYWdzIHw9IDQ7UyhiKTtmID0gITE7fSBlbHNlIG51bGwgIT09IHpnICYmIChHaih6ZyksIHpnID0gbnVsbCksIGYgPSAhMDtpZiAoIWYpIHJldHVybiBiLmZsYWdzICYgNjU1MzYgPyBiIDogbnVsbDt9aWYgKDAgIT09IChiLmZsYWdzICYgMTI4KSkgcmV0dXJuIGIubGFuZXMgPSBjLCBiO2QgPSBudWxsICE9PSBkO2QgIT09IChudWxsICE9PSBhICYmIG51bGwgIT09IGEubWVtb2l6ZWRTdGF0ZSkgJiYgZCAmJiAoYi5jaGlsZC5mbGFncyB8PSA4MTkyLCAwICE9PSAoYi5tb2RlICYgMSkgJiYgKG51bGwgPT09IGEgfHwgMCAhPT0gKE0uY3VycmVudCAmIDEpID8gMCA9PT0gVCAmJiAoVCA9IDMpIDogdWooKSkpO251bGwgIT09IGIudXBkYXRlUXVldWUgJiYgKGIuZmxhZ3MgfD0gNCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksCiAgICAgICAgICAgICAgICBCaihhLCBiKSwgbnVsbCA9PT0gYSAmJiBzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSwgUyhiKSwgbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLCBTKGIpLCBudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkgJiYgJGYoKSwgUyhiKSwgbnVsbDtjYXNlIDE5OkUoTSk7ZiA9IGIubWVtb2l6ZWRTdGF0ZTtpZiAobnVsbCA9PT0gZikgcmV0dXJuIFMoYiksIG51bGw7ZCA9IDAgIT09IChiLmZsYWdzICYgMTI4KTtnID0gZi5yZW5kZXJpbmc7aWYgKG51bGwgPT09IGcpIHtpZiAoZCkgRWooZiwgITEpO2Vsc2Uge2lmICgwICE9PSBUIHx8IG51bGwgIT09IGEgJiYgMCAhPT0gKGEuZmxhZ3MgJiAxMjgpKSBmb3IgKGEgPSBiLmNoaWxkOyBudWxsICE9PSBhOykge2cgPSBNaChhKTtpZiAobnVsbCAhPT0gZykge2IuZmxhZ3MgfD0gMTI4O0VqKGYsICExKTtkID0gZy51cGRhdGVRdWV1ZTtudWxsICE9PSBkICYmIChiLnVwZGF0ZVF1ZXVlID0gZCwgYi5mbGFncyB8PSA0KTtiLnN1YnRyZWVGbGFncyA9IDA7ZCA9IGM7Zm9yIChjID0gYi5jaGlsZDsgbnVsbCAhPT0gYzspIGYgPSBjLCBhID0gZCwgZi5mbGFncyAmPSAxNDY4MDA2NiwKICAgICAgICAgICAgICAgICAgICAgICAgZyA9IGYuYWx0ZXJuYXRlLCBudWxsID09PSBnID8gKGYuY2hpbGRMYW5lcyA9IDAsIGYubGFuZXMgPSBhLCBmLmNoaWxkID0gbnVsbCwgZi5zdWJ0cmVlRmxhZ3MgPSAwLCBmLm1lbW9pemVkUHJvcHMgPSBudWxsLCBmLm1lbW9pemVkU3RhdGUgPSBudWxsLCBmLnVwZGF0ZVF1ZXVlID0gbnVsbCwgZi5kZXBlbmRlbmNpZXMgPSBudWxsLCBmLnN0YXRlTm9kZSA9IG51bGwpIDogKGYuY2hpbGRMYW5lcyA9IGcuY2hpbGRMYW5lcywgZi5sYW5lcyA9IGcubGFuZXMsIGYuY2hpbGQgPSBnLmNoaWxkLCBmLnN1YnRyZWVGbGFncyA9IDAsIGYuZGVsZXRpb25zID0gbnVsbCwgZi5tZW1vaXplZFByb3BzID0gZy5tZW1vaXplZFByb3BzLCBmLm1lbW9pemVkU3RhdGUgPSBnLm1lbW9pemVkU3RhdGUsIGYudXBkYXRlUXVldWUgPSBnLnVwZGF0ZVF1ZXVlLCBmLnR5cGUgPSBnLnR5cGUsIGEgPSBnLmRlcGVuZGVuY2llcywgZi5kZXBlbmRlbmNpZXMgPSBudWxsID09PSBhID8gbnVsbCA6IHsgbGFuZXM6IGEubGFuZXMsIGZpcnN0Q29udGV4dDogYS5maXJzdENvbnRleHQgfSksIGMgPSBjLnNpYmxpbmc7RyhNLCBNLmN1cnJlbnQgJiAxIHwgMik7cmV0dXJuIGIuY2hpbGQ7fWEgPQogICAgICAgICAgICAgICAgICAgICAgYS5zaWJsaW5nO31udWxsICE9PSBmLnRhaWwgJiYgQigpID4gSGogJiYgKGIuZmxhZ3MgfD0gMTI4LCBkID0gITAsIEVqKGYsICExKSwgYi5sYW5lcyA9IDQxOTQzMDQpO319IGVsc2Uge2lmICghZCkgaWYgKGEgPSBNaChnKSwgbnVsbCAhPT0gYSkge2lmIChiLmZsYWdzIHw9IDEyOCwgZCA9ICEwLCBjID0gYS51cGRhdGVRdWV1ZSwgbnVsbCAhPT0gYyAmJiAoYi51cGRhdGVRdWV1ZSA9IGMsIGIuZmxhZ3MgfD0gNCksIEVqKGYsICEwKSwgbnVsbCA9PT0gZi50YWlsICYmICJoaWRkZW4iID09PSBmLnRhaWxNb2RlICYmICFnLmFsdGVybmF0ZSAmJiAhSSkgcmV0dXJuIFMoYiksIG51bGw7fSBlbHNlIDIgKiBCKCkgLSBmLnJlbmRlcmluZ1N0YXJ0VGltZSA+IEhqICYmIDEwNzM3NDE4MjQgIT09IGMgJiYgKGIuZmxhZ3MgfD0gMTI4LCBkID0gITAsIEVqKGYsICExKSwgYi5sYW5lcyA9IDQxOTQzMDQpO2YuaXNCYWNrd2FyZHMgPyAoZy5zaWJsaW5nID0gYi5jaGlsZCwgYi5jaGlsZCA9IGcpIDogKGMgPSBmLmxhc3QsIG51bGwgIT09IGMgPyBjLnNpYmxpbmcgPSBnIDogYi5jaGlsZCA9IGcsIGYubGFzdCA9IGcpO31pZiAobnVsbCAhPT0gZi50YWlsKSByZXR1cm4gYiA9IGYudGFpbCwgZi5yZW5kZXJpbmcgPQogICAgICAgICAgICAgICAgYiwgZi50YWlsID0gYi5zaWJsaW5nLCBmLnJlbmRlcmluZ1N0YXJ0VGltZSA9IEIoKSwgYi5zaWJsaW5nID0gbnVsbCwgYyA9IE0uY3VycmVudCwgRyhNLCBkID8gYyAmIDEgfCAyIDogYyAmIDEpLCBiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLCBkID0gbnVsbCAhPT0gYi5tZW1vaXplZFN0YXRlLCBudWxsICE9PSBhICYmIG51bGwgIT09IGEubWVtb2l6ZWRTdGF0ZSAhPT0gZCAmJiAoYi5mbGFncyB8PSA4MTkyKSwgZCAmJiAwICE9PSAoYi5tb2RlICYgMSkgPyAwICE9PSAoZ2ogJiAxMDczNzQxODI0KSAmJiAoUyhiKSwgYi5zdWJ0cmVlRmxhZ3MgJiA2ICYmIChiLmZsYWdzIHw9IDgxOTIpKSA6IFMoYiksIG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsO310aHJvdyBFcnJvcihwKDE1NiwgYi50YWcpKTt9CiAgICAgICAgICBmdW5jdGlvbiBKaihhLCBiKSB7d2coYik7c3dpdGNoIChiLnRhZykge2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSAmJiAkZigpLCBhID0gYi5mbGFncywgYSAmIDY1NTM2ID8gKGIuZmxhZ3MgPSBhICYgLTY1NTM3IHwgMTI4LCBiKSA6IG51bGw7Y2FzZSAzOnJldHVybiBKaCgpLCBFKFdmKSwgRShIKSwgT2goKSwgYSA9IGIuZmxhZ3MsIDAgIT09IChhICYgNjU1MzYpICYmIDAgPT09IChhICYgMTI4KSA/IChiLmZsYWdzID0gYSAmIC02NTUzNyB8IDEyOCwgYikgOiBudWxsO2Nhc2UgNTpyZXR1cm4gTGgoYiksIG51bGw7Y2FzZSAxMzpFKE0pO2EgPSBiLm1lbW9pemVkU3RhdGU7aWYgKG51bGwgIT09IGEgJiYgbnVsbCAhPT0gYS5kZWh5ZHJhdGVkKSB7aWYgKG51bGwgPT09IGIuYWx0ZXJuYXRlKSB0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCk7fWEgPSBiLmZsYWdzO3JldHVybiBhICYgNjU1MzYgPyAoYi5mbGFncyA9IGEgJiAtNjU1MzcgfCAxMjgsIGIpIDogbnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLCBudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSwgbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLCBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSwKICAgICAgICAgICAgICAgIG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsO319dmFyIEtqID0gITEsVSA9ICExLExqID0gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIFdlYWtTZXQgPyBXZWFrU2V0IDogU2V0LFYgPSBudWxsO2Z1bmN0aW9uIE1qKGEsIGIpIHt2YXIgYyA9IGEucmVmO2lmIChudWxsICE9PSBjKSBpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGMpIHRyeSB7YyhudWxsKTt9IGNhdGNoIChkKSB7VyhhLCBiLCBkKTt9IGVsc2UgYy5jdXJyZW50ID0gbnVsbDt9ZnVuY3Rpb24gTmooYSwgYiwgYykge3RyeSB7YygpO30gY2F0Y2ggKGQpIHtXKGEsIGIsIGQpO319dmFyIE9qID0gITE7CiAgICAgICAgICBmdW5jdGlvbiBQaihhLCBiKSB7Q2YgPSBkZDthID0gTWUoKTtpZiAoTmUoYSkpIHtpZiAoInNlbGVjdGlvblN0YXJ0IiBpbiBhKSB2YXIgYyA9IHsgc3RhcnQ6IGEuc2VsZWN0aW9uU3RhcnQsIGVuZDogYS5zZWxlY3Rpb25FbmQgfTtlbHNlIGE6IHtjID0gKGMgPSBhLm93bmVyRG9jdW1lbnQpICYmIGMuZGVmYXVsdFZpZXcgfHwgd2luZG93O3ZhciBkID0gYy5nZXRTZWxlY3Rpb24gJiYgYy5nZXRTZWxlY3Rpb24oKTtpZiAoZCAmJiAwICE9PSBkLnJhbmdlQ291bnQpIHtjID0gZC5hbmNob3JOb2RlO3ZhciBlID0gZC5hbmNob3JPZmZzZXQsZiA9IGQuZm9jdXNOb2RlO2QgPSBkLmZvY3VzT2Zmc2V0O3RyeSB7Yy5ub2RlVHlwZSwgZi5ub2RlVHlwZTt9IGNhdGNoIChGKSB7YyA9IG51bGw7YnJlYWsgYTt9dmFyIGcgPSAwLGggPSAtMSxrID0gLTEsbCA9IDAsbSA9IDAscSA9IGEsciA9IG51bGw7YjogZm9yICg7Oykge2ZvciAodmFyIHk7Oykge3EgIT09IGMgfHwgMCAhPT0gZSAmJiAzICE9PSBxLm5vZGVUeXBlIHx8IChoID0gZyArIGUpO3EgIT09IGYgfHwgMCAhPT0gZCAmJiAzICE9PSBxLm5vZGVUeXBlIHx8IChrID0gZyArIGQpOzMgPT09IHEubm9kZVR5cGUgJiYgKGcgKz0KICAgICAgICAgICAgICAgICAgICAgIHEubm9kZVZhbHVlLmxlbmd0aCk7aWYgKG51bGwgPT09ICh5ID0gcS5maXJzdENoaWxkKSkgYnJlYWs7ciA9IHE7cSA9IHk7fWZvciAoOzspIHtpZiAocSA9PT0gYSkgYnJlYWsgYjtyID09PSBjICYmICsrbCA9PT0gZSAmJiAoaCA9IGcpO3IgPT09IGYgJiYgKyttID09PSBkICYmIChrID0gZyk7aWYgKG51bGwgIT09ICh5ID0gcS5uZXh0U2libGluZykpIGJyZWFrO3EgPSByO3IgPSBxLnBhcmVudE5vZGU7fXEgPSB5O31jID0gLTEgPT09IGggfHwgLTEgPT09IGsgPyBudWxsIDogeyBzdGFydDogaCwgZW5kOiBrIH07fSBlbHNlIGMgPSBudWxsO31jID0gYyB8fCB7IHN0YXJ0OiAwLCBlbmQ6IDAgfTt9IGVsc2UgYyA9IG51bGw7RGYgPSB7IGZvY3VzZWRFbGVtOiBhLCBzZWxlY3Rpb25SYW5nZTogYyB9O2RkID0gITE7Zm9yIChWID0gYjsgbnVsbCAhPT0gVjspIGlmIChiID0gViwgYSA9IGIuY2hpbGQsIDAgIT09IChiLnN1YnRyZWVGbGFncyAmIDEwMjgpICYmIG51bGwgIT09IGEpIGEucmV0dXJuID0gYiwgViA9IGE7ZWxzZSBmb3IgKDsgbnVsbCAhPT0gVjspIHtiID0gVjt0cnkge3ZhciBuID0gYi5hbHRlcm5hdGU7aWYgKDAgIT09IChiLmZsYWdzICYgMTAyNCkpIHN3aXRjaCAoYi50YWcpIHtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlIDE6aWYgKG51bGwgIT09IG4pIHt2YXIgdCA9IG4ubWVtb2l6ZWRQcm9wcyxKID0gbi5tZW1vaXplZFN0YXRlLHggPSBiLnN0YXRlTm9kZSx3ID0geC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlID09PSBiLnR5cGUgPyB0IDogTGcoYi50eXBlLCB0KSwgSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IHc7fWJyZWFrO2Nhc2UgMzp2YXIgdSA9IGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MSA9PT0gdS5ub2RlVHlwZSA/IHUudGV4dENvbnRlbnQgPSAiIiA6IDkgPT09IHUubm9kZVR5cGUgJiYgdS5kb2N1bWVudEVsZW1lbnQgJiYgdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX0gY2F0Y2ggKEYpIHtXKGIsIGIucmV0dXJuLCBGKTt9YSA9IGIuc2libGluZztpZiAobnVsbCAhPT0gYSkge2EucmV0dXJuID0gYi5yZXR1cm47ViA9IGE7YnJlYWs7fVYgPSBiLnJldHVybjt9biA9IE9qO09qID0gITE7cmV0dXJuIG47fQogICAgICAgICAgZnVuY3Rpb24gUWooYSwgYiwgYykge3ZhciBkID0gYi51cGRhdGVRdWV1ZTtkID0gbnVsbCAhPT0gZCA/IGQubGFzdEVmZmVjdCA6IG51bGw7aWYgKG51bGwgIT09IGQpIHt2YXIgZSA9IGQgPSBkLm5leHQ7ZG8ge2lmICgoZS50YWcgJiBhKSA9PT0gYSkge3ZhciBmID0gZS5kZXN0cm95O2UuZGVzdHJveSA9IHZvaWQgMDt2b2lkIDAgIT09IGYgJiYgTmooYiwgYywgZik7fWUgPSBlLm5leHQ7fSB3aGlsZSAoZSAhPT0gZCk7fX1mdW5jdGlvbiBSaihhLCBiKSB7YiA9IGIudXBkYXRlUXVldWU7YiA9IG51bGwgIT09IGIgPyBiLmxhc3RFZmZlY3QgOiBudWxsO2lmIChudWxsICE9PSBiKSB7dmFyIGMgPSBiID0gYi5uZXh0O2RvIHtpZiAoKGMudGFnICYgYSkgPT09IGEpIHt2YXIgZCA9IGMuY3JlYXRlO2MuZGVzdHJveSA9IGQoKTt9YyA9IGMubmV4dDt9IHdoaWxlIChjICE9PSBiKTt9fWZ1bmN0aW9uIFNqKGEpIHt2YXIgYiA9IGEucmVmO2lmIChudWxsICE9PSBiKSB7dmFyIGMgPSBhLnN0YXRlTm9kZTtzd2l0Y2ggKGEudGFnKSB7Y2FzZSA1OmEgPSBjO2JyZWFrO2RlZmF1bHQ6YSA9IGM7fSJmdW5jdGlvbiIgPT09IHR5cGVvZiBiID8gYihhKSA6IGIuY3VycmVudCA9IGE7fX0KICAgICAgICAgIGZ1bmN0aW9uIFRqKGEpIHt2YXIgYiA9IGEuYWx0ZXJuYXRlO251bGwgIT09IGIgJiYgKGEuYWx0ZXJuYXRlID0gbnVsbCwgVGooYikpO2EuY2hpbGQgPSBudWxsO2EuZGVsZXRpb25zID0gbnVsbDthLnNpYmxpbmcgPSBudWxsOzUgPT09IGEudGFnICYmIChiID0gYS5zdGF0ZU5vZGUsIG51bGwgIT09IGIgJiYgKGRlbGV0ZSBiW09mXSwgZGVsZXRlIGJbUGZdLCBkZWxldGUgYltvZl0sIGRlbGV0ZSBiW1FmXSwgZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGUgPSBudWxsO2EucmV0dXJuID0gbnVsbDthLmRlcGVuZGVuY2llcyA9IG51bGw7YS5tZW1vaXplZFByb3BzID0gbnVsbDthLm1lbW9pemVkU3RhdGUgPSBudWxsO2EucGVuZGluZ1Byb3BzID0gbnVsbDthLnN0YXRlTm9kZSA9IG51bGw7YS51cGRhdGVRdWV1ZSA9IG51bGw7fWZ1bmN0aW9uIFVqKGEpIHtyZXR1cm4gNSA9PT0gYS50YWcgfHwgMyA9PT0gYS50YWcgfHwgNCA9PT0gYS50YWc7fQogICAgICAgICAgZnVuY3Rpb24gVmooYSkge2E6IGZvciAoOzspIHtmb3IgKDsgbnVsbCA9PT0gYS5zaWJsaW5nOykge2lmIChudWxsID09PSBhLnJldHVybiB8fCBVaihhLnJldHVybikpIHJldHVybiBudWxsO2EgPSBhLnJldHVybjt9YS5zaWJsaW5nLnJldHVybiA9IGEucmV0dXJuO2ZvciAoYSA9IGEuc2libGluZzsgNSAhPT0gYS50YWcgJiYgNiAhPT0gYS50YWcgJiYgMTggIT09IGEudGFnOykge2lmIChhLmZsYWdzICYgMikgY29udGludWUgYTtpZiAobnVsbCA9PT0gYS5jaGlsZCB8fCA0ID09PSBhLnRhZykgY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuID0gYSwgYSA9IGEuY2hpbGQ7fWlmICghKGEuZmxhZ3MgJiAyKSkgcmV0dXJuIGEuc3RhdGVOb2RlO319CiAgICAgICAgICBmdW5jdGlvbiBXaihhLCBiLCBjKSB7dmFyIGQgPSBhLnRhZztpZiAoNSA9PT0gZCB8fCA2ID09PSBkKSBhID0gYS5zdGF0ZU5vZGUsIGIgPyA4ID09PSBjLm5vZGVUeXBlID8gYy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKSA6IGMuaW5zZXJ0QmVmb3JlKGEsIGIpIDogKDggPT09IGMubm9kZVR5cGUgPyAoYiA9IGMucGFyZW50Tm9kZSwgYi5pbnNlcnRCZWZvcmUoYSwgYykpIDogKGIgPSBjLCBiLmFwcGVuZENoaWxkKGEpKSwgYyA9IGMuX3JlYWN0Um9vdENvbnRhaW5lciwgbnVsbCAhPT0gYyAmJiB2b2lkIDAgIT09IGMgfHwgbnVsbCAhPT0gYi5vbmNsaWNrIHx8IChiLm9uY2xpY2sgPSBCZikpO2Vsc2UgaWYgKDQgIT09IGQgJiYgKGEgPSBhLmNoaWxkLCBudWxsICE9PSBhKSkgZm9yIChXaihhLCBiLCBjKSwgYSA9IGEuc2libGluZzsgbnVsbCAhPT0gYTspIFdqKGEsIGIsIGMpLCBhID0gYS5zaWJsaW5nO30KICAgICAgICAgIGZ1bmN0aW9uIFhqKGEsIGIsIGMpIHt2YXIgZCA9IGEudGFnO2lmICg1ID09PSBkIHx8IDYgPT09IGQpIGEgPSBhLnN0YXRlTm9kZSwgYiA/IGMuaW5zZXJ0QmVmb3JlKGEsIGIpIDogYy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmICg0ICE9PSBkICYmIChhID0gYS5jaGlsZCwgbnVsbCAhPT0gYSkpIGZvciAoWGooYSwgYiwgYyksIGEgPSBhLnNpYmxpbmc7IG51bGwgIT09IGE7KSBYaihhLCBiLCBjKSwgYSA9IGEuc2libGluZzt9dmFyIFggPSBudWxsLFlqID0gITE7ZnVuY3Rpb24gWmooYSwgYiwgYykge2ZvciAoYyA9IGMuY2hpbGQ7IG51bGwgIT09IGM7KSBhayhhLCBiLCBjKSwgYyA9IGMuc2libGluZzt9CiAgICAgICAgICBmdW5jdGlvbiBhayhhLCBiLCBjKSB7aWYgKGxjICYmICJmdW5jdGlvbiIgPT09IHR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCkgdHJ5IHtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYywgYyk7fSBjYXRjaCAoaCkge31zd2l0Y2ggKGMudGFnKSB7Y2FzZSA1OlUgfHwgTWooYywgYik7Y2FzZSA2OnZhciBkID0gWCxlID0gWWo7WCA9IG51bGw7WmooYSwgYiwgYyk7WCA9IGQ7WWogPSBlO251bGwgIT09IFggJiYgKFlqID8gKGEgPSBYLCBjID0gYy5zdGF0ZU5vZGUsIDggPT09IGEubm9kZVR5cGUgPyBhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYykgOiBhLnJlbW92ZUNoaWxkKGMpKSA6IFgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwgIT09IFggJiYgKFlqID8gKGEgPSBYLCBjID0gYy5zdGF0ZU5vZGUsIDggPT09IGEubm9kZVR5cGUgPyBLZihhLnBhcmVudE5vZGUsIGMpIDogMSA9PT0gYS5ub2RlVHlwZSAmJiBLZihhLCBjKSwgYmQoYSkpIDogS2YoWCwgYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZCA9IFg7ZSA9IFlqO1ggPSBjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqID0gITA7CiAgICAgICAgICAgICAgICBaaihhLCBiLCBjKTtYID0gZDtZaiA9IGU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmICghVSAmJiAoZCA9IGMudXBkYXRlUXVldWUsIG51bGwgIT09IGQgJiYgKGQgPSBkLmxhc3RFZmZlY3QsIG51bGwgIT09IGQpKSkge2UgPSBkID0gZC5uZXh0O2RvIHt2YXIgZiA9IGUsZyA9IGYuZGVzdHJveTtmID0gZi50YWc7dm9pZCAwICE9PSBnICYmICgwICE9PSAoZiAmIDIpID8gTmooYywgYiwgZykgOiAwICE9PSAoZiAmIDQpICYmIE5qKGMsIGIsIGcpKTtlID0gZS5uZXh0O30gd2hpbGUgKGUgIT09IGQpO31aaihhLCBiLCBjKTticmVhaztjYXNlIDE6aWYgKCFVICYmIChNaihjLCBiKSwgZCA9IGMuc3RhdGVOb2RlLCAiZnVuY3Rpb24iID09PSB0eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpIHRyeSB7ZC5wcm9wcyA9IGMubWVtb2l6ZWRQcm9wcywgZC5zdGF0ZSA9IGMubWVtb2l6ZWRTdGF0ZSwgZC5jb21wb25lbnRXaWxsVW5tb3VudCgpO30gY2F0Y2ggKGgpIHtXKGMsIGIsIGgpO31aaihhLCBiLCBjKTticmVhaztjYXNlIDIxOlpqKGEsIGIsIGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlICYgMSA/IChVID0gKGQgPSBVKSB8fCBudWxsICE9PQogICAgICAgICAgICAgICAgYy5tZW1vaXplZFN0YXRlLCBaaihhLCBiLCBjKSwgVSA9IGQpIDogWmooYSwgYiwgYyk7YnJlYWs7ZGVmYXVsdDpaaihhLCBiLCBjKTt9fWZ1bmN0aW9uIGJrKGEpIHt2YXIgYiA9IGEudXBkYXRlUXVldWU7aWYgKG51bGwgIT09IGIpIHthLnVwZGF0ZVF1ZXVlID0gbnVsbDt2YXIgYyA9IGEuc3RhdGVOb2RlO251bGwgPT09IGMgJiYgKGMgPSBhLnN0YXRlTm9kZSA9IG5ldyBMaigpKTtiLmZvckVhY2goZnVuY3Rpb24gKGIpIHt2YXIgZCA9IGNrLmJpbmQobnVsbCwgYSwgYik7Yy5oYXMoYikgfHwgKGMuYWRkKGIpLCBiLnRoZW4oZCwgZCkpO30pO319CiAgICAgICAgICBmdW5jdGlvbiBkayhhLCBiKSB7dmFyIGMgPSBiLmRlbGV0aW9ucztpZiAobnVsbCAhPT0gYykgZm9yICh2YXIgZCA9IDA7IGQgPCBjLmxlbmd0aDsgZCsrKSB7dmFyIGUgPSBjW2RdO3RyeSB7dmFyIGYgPSBhLGcgPSBiLGggPSBnO2E6IGZvciAoOyBudWxsICE9PSBoOykge3N3aXRjaCAoaC50YWcpIHtjYXNlIDU6WCA9IGguc3RhdGVOb2RlO1lqID0gITE7YnJlYWsgYTtjYXNlIDM6WCA9IGguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWogPSAhMDticmVhayBhO2Nhc2UgNDpYID0gaC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaiA9ICEwO2JyZWFrIGE7fWggPSBoLnJldHVybjt9aWYgKG51bGwgPT09IFgpIHRocm93IEVycm9yKHAoMTYwKSk7YWsoZiwgZywgZSk7WCA9IG51bGw7WWogPSAhMTt2YXIgayA9IGUuYWx0ZXJuYXRlO251bGwgIT09IGsgJiYgKGsucmV0dXJuID0gbnVsbCk7ZS5yZXR1cm4gPSBudWxsO30gY2F0Y2ggKGwpIHtXKGUsIGIsIGwpO319aWYgKGIuc3VidHJlZUZsYWdzICYgMTI4NTQpIGZvciAoYiA9IGIuY2hpbGQ7IG51bGwgIT09IGI7KSBlayhiLCBhKSwgYiA9IGIuc2libGluZzt9CiAgICAgICAgICBmdW5jdGlvbiBlayhhLCBiKSB7dmFyIGMgPSBhLmFsdGVybmF0ZSxkID0gYS5mbGFncztzd2l0Y2ggKGEudGFnKSB7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsIGEpO2ZrKGEpO2lmIChkICYgNCkge3RyeSB7UWooMywgYSwgYS5yZXR1cm4pLCBSaigzLCBhKTt9IGNhdGNoICh0KSB7VyhhLCBhLnJldHVybiwgdCk7fXRyeSB7UWooNSwgYSwgYS5yZXR1cm4pO30gY2F0Y2ggKHQpIHtXKGEsIGEucmV0dXJuLCB0KTt9fWJyZWFrO2Nhc2UgMTpkayhiLCBhKTtmayhhKTtkICYgNTEyICYmIG51bGwgIT09IGMgJiYgTWooYywgYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpkayhiLCBhKTtmayhhKTtkICYgNTEyICYmIG51bGwgIT09IGMgJiYgTWooYywgYy5yZXR1cm4pO2lmIChhLmZsYWdzICYgMzIpIHt2YXIgZSA9IGEuc3RhdGVOb2RlO3RyeSB7b2IoZSwgIiIpO30gY2F0Y2ggKHQpIHtXKGEsIGEucmV0dXJuLCB0KTt9fWlmIChkICYgNCAmJiAoZSA9IGEuc3RhdGVOb2RlLCBudWxsICE9IGUpKSB7dmFyIGYgPSBhLm1lbW9pemVkUHJvcHMsZyA9IG51bGwgIT09IGMgPyBjLm1lbW9pemVkUHJvcHMgOiBmLGggPSBhLnR5cGUsayA9IGEudXBkYXRlUXVldWU7CiAgICAgICAgICAgICAgICAgIGEudXBkYXRlUXVldWUgPSBudWxsO2lmIChudWxsICE9PSBrKSB0cnkgeyJpbnB1dCIgPT09IGggJiYgInJhZGlvIiA9PT0gZi50eXBlICYmIG51bGwgIT0gZi5uYW1lICYmIGFiKGUsIGYpO3ZiKGgsIGcpO3ZhciBsID0gdmIoaCwgZik7Zm9yIChnID0gMDsgZyA8IGsubGVuZ3RoOyBnICs9IDIpIHt2YXIgbSA9IGtbZ10scSA9IGtbZyArIDFdOyJzdHlsZSIgPT09IG0gPyBzYihlLCBxKSA6ICJkYW5nZXJvdXNseVNldElubmVySFRNTCIgPT09IG0gPyBuYihlLCBxKSA6ICJjaGlsZHJlbiIgPT09IG0gPyBvYihlLCBxKSA6IHRhKGUsIG0sIHEsIGwpO31zd2l0Y2ggKGgpIHtjYXNlICJpbnB1dCI6YmIoZSwgZik7YnJlYWs7Y2FzZSAidGV4dGFyZWEiOmliKGUsIGYpO2JyZWFrO2Nhc2UgInNlbGVjdCI6dmFyIHIgPSBlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlID0gISFmLm11bHRpcGxlO3ZhciB5ID0gZi52YWx1ZTtudWxsICE9IHkgPyBmYihlLCAhIWYubXVsdGlwbGUsIHksICExKSA6IHIgIT09ICEhZi5tdWx0aXBsZSAmJiAobnVsbCAhPSBmLmRlZmF1bHRWYWx1ZSA/IGZiKGUsICEhZi5tdWx0aXBsZSwKICAgICAgICAgICAgICAgICAgICAgICAgZi5kZWZhdWx0VmFsdWUsICEwKSA6IGZiKGUsICEhZi5tdWx0aXBsZSwgZi5tdWx0aXBsZSA/IFtdIDogIiIsICExKSk7fWVbUGZdID0gZjt9IGNhdGNoICh0KSB7VyhhLCBhLnJldHVybiwgdCk7fX1icmVhaztjYXNlIDY6ZGsoYiwgYSk7ZmsoYSk7aWYgKGQgJiA0KSB7aWYgKG51bGwgPT09IGEuc3RhdGVOb2RlKSB0aHJvdyBFcnJvcihwKDE2MikpO2UgPSBhLnN0YXRlTm9kZTtmID0gYS5tZW1vaXplZFByb3BzO3RyeSB7ZS5ub2RlVmFsdWUgPSBmO30gY2F0Y2ggKHQpIHtXKGEsIGEucmV0dXJuLCB0KTt9fWJyZWFrO2Nhc2UgMzpkayhiLCBhKTtmayhhKTtpZiAoZCAmIDQgJiYgbnVsbCAhPT0gYyAmJiBjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKSB0cnkge2JkKGIuY29udGFpbmVySW5mbyk7fSBjYXRjaCAodCkge1coYSwgYS5yZXR1cm4sIHQpO31icmVhaztjYXNlIDQ6ZGsoYiwgYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLCBhKTtmayhhKTtlID0gYS5jaGlsZDtlLmZsYWdzICYgODE5MiAmJiAoZiA9IG51bGwgIT09IGUubWVtb2l6ZWRTdGF0ZSwgZS5zdGF0ZU5vZGUuaXNIaWRkZW4gPSBmLCAhZiB8fAogICAgICAgICAgICAgICAgbnVsbCAhPT0gZS5hbHRlcm5hdGUgJiYgbnVsbCAhPT0gZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSB8fCAoZ2sgPSBCKCkpKTtkICYgNCAmJiBiayhhKTticmVhaztjYXNlIDIyOm0gPSBudWxsICE9PSBjICYmIG51bGwgIT09IGMubWVtb2l6ZWRTdGF0ZTthLm1vZGUgJiAxID8gKFUgPSAobCA9IFUpIHx8IG0sIGRrKGIsIGEpLCBVID0gbCkgOiBkayhiLCBhKTtmayhhKTtpZiAoZCAmIDgxOTIpIHtsID0gbnVsbCAhPT0gYS5tZW1vaXplZFN0YXRlO2lmICgoYS5zdGF0ZU5vZGUuaXNIaWRkZW4gPSBsKSAmJiAhbSAmJiAwICE9PSAoYS5tb2RlICYgMSkpIGZvciAoViA9IGEsIG0gPSBhLmNoaWxkOyBudWxsICE9PSBtOykge2ZvciAocSA9IFYgPSBtOyBudWxsICE9PSBWOykge3IgPSBWO3kgPSByLmNoaWxkO3N3aXRjaCAoci50YWcpIHtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UWooNCwgciwgci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLCByLnJldHVybik7dmFyIG4gPSByLnN0YXRlTm9kZTtpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpIHtkID0gcjtjID0gci5yZXR1cm47dHJ5IHtiID0gZCwgbi5wcm9wcyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIubWVtb2l6ZWRQcm9wcywgbi5zdGF0ZSA9IGIubWVtb2l6ZWRTdGF0ZSwgbi5jb21wb25lbnRXaWxsVW5tb3VudCgpO30gY2F0Y2ggKHQpIHtXKGQsIGMsIHQpO319YnJlYWs7Y2FzZSA1Ok1qKHIsIHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmIChudWxsICE9PSByLm1lbW9pemVkU3RhdGUpIHtoayhxKTtjb250aW51ZTt9fW51bGwgIT09IHkgPyAoeS5yZXR1cm4gPSByLCBWID0geSkgOiBoayhxKTt9bSA9IG0uc2libGluZzt9YTogZm9yIChtID0gbnVsbCwgcSA9IGE7Oykge2lmICg1ID09PSBxLnRhZykge2lmIChudWxsID09PSBtKSB7bSA9IHE7dHJ5IHtlID0gcS5zdGF0ZU5vZGUsIGwgPyAoZiA9IGUuc3R5bGUsICJmdW5jdGlvbiIgPT09IHR5cGVvZiBmLnNldFByb3BlcnR5ID8gZi5zZXRQcm9wZXJ0eSgiZGlzcGxheSIsICJub25lIiwgImltcG9ydGFudCIpIDogZi5kaXNwbGF5ID0gIm5vbmUiKSA6IChoID0gcS5zdGF0ZU5vZGUsIGsgPSBxLm1lbW9pemVkUHJvcHMuc3R5bGUsIGcgPSB2b2lkIDAgIT09IGsgJiYgbnVsbCAhPT0gayAmJiBrLmhhc093blByb3BlcnR5KCJkaXNwbGF5IikgPyBrLmRpc3BsYXkgOiBudWxsLCBoLnN0eWxlLmRpc3BsYXkgPQogICAgICAgICAgICAgICAgICAgICAgICAgIHJiKCJkaXNwbGF5IiwgZykpO30gY2F0Y2ggKHQpIHtXKGEsIGEucmV0dXJuLCB0KTt9fX0gZWxzZSBpZiAoNiA9PT0gcS50YWcpIHtpZiAobnVsbCA9PT0gbSkgdHJ5IHtxLnN0YXRlTm9kZS5ub2RlVmFsdWUgPSBsID8gIiIgOiBxLm1lbW9pemVkUHJvcHM7fSBjYXRjaCAodCkge1coYSwgYS5yZXR1cm4sIHQpO319IGVsc2UgaWYgKCgyMiAhPT0gcS50YWcgJiYgMjMgIT09IHEudGFnIHx8IG51bGwgPT09IHEubWVtb2l6ZWRTdGF0ZSB8fCBxID09PSBhKSAmJiBudWxsICE9PSBxLmNoaWxkKSB7cS5jaGlsZC5yZXR1cm4gPSBxO3EgPSBxLmNoaWxkO2NvbnRpbnVlO31pZiAocSA9PT0gYSkgYnJlYWsgYTtmb3IgKDsgbnVsbCA9PT0gcS5zaWJsaW5nOykge2lmIChudWxsID09PSBxLnJldHVybiB8fCBxLnJldHVybiA9PT0gYSkgYnJlYWsgYTttID09PSBxICYmIChtID0gbnVsbCk7cSA9IHEucmV0dXJuO31tID09PSBxICYmIChtID0gbnVsbCk7cS5zaWJsaW5nLnJldHVybiA9IHEucmV0dXJuO3EgPSBxLnNpYmxpbmc7fX1icmVhaztjYXNlIDE5OmRrKGIsIGEpO2ZrKGEpO2QgJiA0ICYmIGJrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpkayhiLAogICAgICAgICAgICAgICAgYSksIGZrKGEpO319ZnVuY3Rpb24gZmsoYSkge3ZhciBiID0gYS5mbGFncztpZiAoYiAmIDIpIHt0cnkge2E6IHtmb3IgKHZhciBjID0gYS5yZXR1cm47IG51bGwgIT09IGM7KSB7aWYgKFVqKGMpKSB7dmFyIGQgPSBjO2JyZWFrIGE7fWMgPSBjLnJldHVybjt9dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoIChkLnRhZykge2Nhc2UgNTp2YXIgZSA9IGQuc3RhdGVOb2RlO2QuZmxhZ3MgJiAzMiAmJiAob2IoZSwgIiIpLCBkLmZsYWdzICY9IC0zMyk7dmFyIGYgPSBWaihhKTtYaihhLCBmLCBlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnID0gZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoID0gVmooYSk7V2ooYSwgaCwgZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319IGNhdGNoIChrKSB7VyhhLCBhLnJldHVybiwgayk7fWEuZmxhZ3MgJj0gLTM7fWIgJiA0MDk2ICYmIChhLmZsYWdzICY9IC00MDk3KTt9ZnVuY3Rpb24gaWsoYSwgYiwgYykge1YgPSBhO2prKGEsIGIsIGMpO30KICAgICAgICAgIGZ1bmN0aW9uIGprKGEsIGIsIGMpIHtmb3IgKHZhciBkID0gMCAhPT0gKGEubW9kZSAmIDEpOyBudWxsICE9PSBWOykge3ZhciBlID0gVixmID0gZS5jaGlsZDtpZiAoMjIgPT09IGUudGFnICYmIGQpIHt2YXIgZyA9IG51bGwgIT09IGUubWVtb2l6ZWRTdGF0ZSB8fCBLajtpZiAoIWcpIHt2YXIgaCA9IGUuYWx0ZXJuYXRlLGsgPSBudWxsICE9PSBoICYmIG51bGwgIT09IGgubWVtb2l6ZWRTdGF0ZSB8fCBVO2ggPSBLajt2YXIgbCA9IFU7S2ogPSBnO2lmICgoVSA9IGspICYmICFsKSBmb3IgKFYgPSBlOyBudWxsICE9PSBWOykgZyA9IFYsIGsgPSBnLmNoaWxkLCAyMiA9PT0gZy50YWcgJiYgbnVsbCAhPT0gZy5tZW1vaXplZFN0YXRlID8ga2soZSkgOiBudWxsICE9PSBrID8gKGsucmV0dXJuID0gZywgViA9IGspIDoga2soZSk7Zm9yICg7IG51bGwgIT09IGY7KSBWID0gZiwgamsoZiwgYiwgYyksIGYgPSBmLnNpYmxpbmc7ViA9IGU7S2ogPSBoO1UgPSBsO31sayhhLCBiLCBjKTt9IGVsc2UgMCAhPT0gKGUuc3VidHJlZUZsYWdzICYgODc3MikgJiYgbnVsbCAhPT0gZiA/IChmLnJldHVybiA9IGUsIFYgPSBmKSA6IGxrKGEsIGIsIGMpO319CiAgICAgICAgICBmdW5jdGlvbiBsayhhKSB7Zm9yICg7IG51bGwgIT09IFY7KSB7dmFyIGIgPSBWO2lmICgwICE9PSAoYi5mbGFncyAmIDg3NzIpKSB7dmFyIGMgPSBiLmFsdGVybmF0ZTt0cnkge2lmICgwICE9PSAoYi5mbGFncyAmIDg3NzIpKSBzd2l0Y2ggKGIudGFnKSB7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVIHx8IFJqKDUsIGIpO2JyZWFrO2Nhc2UgMTp2YXIgZCA9IGIuc3RhdGVOb2RlO2lmIChiLmZsYWdzICYgNCAmJiAhVSkgaWYgKG51bGwgPT09IGMpIGQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNlIHt2YXIgZSA9IGIuZWxlbWVudFR5cGUgPT09IGIudHlwZSA/IGMubWVtb2l6ZWRQcm9wcyA6IExnKGIudHlwZSwgYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLCBjLm1lbW9pemVkU3RhdGUsIGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpO312YXIgZiA9IGIudXBkYXRlUXVldWU7bnVsbCAhPT0gZiAmJiBpaChiLCBmLCBkKTticmVhaztjYXNlIDM6dmFyIGcgPSBiLnVwZGF0ZVF1ZXVlO2lmIChudWxsICE9PSBnKSB7YyA9IG51bGw7aWYgKG51bGwgIT09IGIuY2hpbGQpIHN3aXRjaCAoYi5jaGlsZC50YWcpIHtjYXNlIDU6YyA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YyA9IGIuY2hpbGQuc3RhdGVOb2RlO31paChiLCBnLCBjKTt9YnJlYWs7Y2FzZSA1OnZhciBoID0gYi5zdGF0ZU5vZGU7aWYgKG51bGwgPT09IGMgJiYgYi5mbGFncyAmIDQpIHtjID0gaDt2YXIgayA9IGIubWVtb2l6ZWRQcm9wcztzd2l0Y2ggKGIudHlwZSkge2Nhc2UgImJ1dHRvbiI6Y2FzZSAiaW5wdXQiOmNhc2UgInNlbGVjdCI6Y2FzZSAidGV4dGFyZWEiOmsuYXV0b0ZvY3VzICYmIGMuZm9jdXMoKTticmVhaztjYXNlICJpbWciOmsuc3JjICYmIChjLnNyYyA9IGsuc3JjKTt9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmIChudWxsID09PSBiLm1lbW9pemVkU3RhdGUpIHt2YXIgbCA9IGIuYWx0ZXJuYXRlO2lmIChudWxsICE9PSBsKSB7dmFyIG0gPSBsLm1lbW9pemVkU3RhdGU7aWYgKG51bGwgIT09IG0pIHt2YXIgcSA9IG0uZGVoeWRyYXRlZDtudWxsICE9PSBxICYmIGJkKHEpO319fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrOwogICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VSB8fCBiLmZsYWdzICYgNTEyICYmIFNqKGIpO30gY2F0Y2ggKHIpIHtXKGIsIGIucmV0dXJuLCByKTt9fWlmIChiID09PSBhKSB7ViA9IG51bGw7YnJlYWs7fWMgPSBiLnNpYmxpbmc7aWYgKG51bGwgIT09IGMpIHtjLnJldHVybiA9IGIucmV0dXJuO1YgPSBjO2JyZWFrO31WID0gYi5yZXR1cm47fX1mdW5jdGlvbiBoayhhKSB7Zm9yICg7IG51bGwgIT09IFY7KSB7dmFyIGIgPSBWO2lmIChiID09PSBhKSB7ViA9IG51bGw7YnJlYWs7fXZhciBjID0gYi5zaWJsaW5nO2lmIChudWxsICE9PSBjKSB7Yy5yZXR1cm4gPSBiLnJldHVybjtWID0gYzticmVhazt9ViA9IGIucmV0dXJuO319CiAgICAgICAgICBmdW5jdGlvbiBrayhhKSB7Zm9yICg7IG51bGwgIT09IFY7KSB7dmFyIGIgPSBWO3RyeSB7c3dpdGNoIChiLnRhZykge2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGMgPSBiLnJldHVybjt0cnkge1JqKDQsIGIpO30gY2F0Y2ggKGspIHtXKGIsIGMsIGspO31icmVhaztjYXNlIDE6dmFyIGQgPSBiLnN0YXRlTm9kZTtpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpIHt2YXIgZSA9IGIucmV0dXJuO3RyeSB7ZC5jb21wb25lbnREaWRNb3VudCgpO30gY2F0Y2ggKGspIHtXKGIsIGUsIGspO319dmFyIGYgPSBiLnJldHVybjt0cnkge1NqKGIpO30gY2F0Y2ggKGspIHtXKGIsIGYsIGspO31icmVhaztjYXNlIDU6dmFyIGcgPSBiLnJldHVybjt0cnkge1NqKGIpO30gY2F0Y2ggKGspIHtXKGIsIGcsIGspO319fSBjYXRjaCAoaykge1coYiwgYi5yZXR1cm4sIGspO31pZiAoYiA9PT0gYSkge1YgPSBudWxsO2JyZWFrO312YXIgaCA9IGIuc2libGluZztpZiAobnVsbCAhPT0gaCkge2gucmV0dXJuID0gYi5yZXR1cm47ViA9IGg7YnJlYWs7fVYgPSBiLnJldHVybjt9fQogICAgICAgICAgdmFyIG1rID0gTWF0aC5jZWlsLG5rID0gdWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvayA9IHVhLlJlYWN0Q3VycmVudE93bmVyLHBrID0gdWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSyA9IDAsUiA9IG51bGwsWSA9IG51bGwsWiA9IDAsZ2ogPSAwLGZqID0gVWYoMCksVCA9IDAscWsgPSBudWxsLGhoID0gMCxyayA9IDAsc2sgPSAwLHRrID0gbnVsbCx1ayA9IG51bGwsZ2sgPSAwLEhqID0gSW5maW5pdHksdmsgPSBudWxsLFBpID0gITEsUWkgPSBudWxsLFNpID0gbnVsbCx3ayA9ICExLHhrID0gbnVsbCx5ayA9IDAsemsgPSAwLEFrID0gbnVsbCxCayA9IC0xLENrID0gMDtmdW5jdGlvbiBMKCkge3JldHVybiAwICE9PSAoSyAmIDYpID8gQigpIDogLTEgIT09IEJrID8gQmsgOiBCayA9IEIoKTt9CiAgICAgICAgICBmdW5jdGlvbiBsaChhKSB7aWYgKDAgPT09IChhLm1vZGUgJiAxKSkgcmV0dXJuIDE7aWYgKDAgIT09IChLICYgMikgJiYgMCAhPT0gWikgcmV0dXJuIFogJiAtWjtpZiAobnVsbCAhPT0gS2cudHJhbnNpdGlvbikgcmV0dXJuIDAgPT09IENrICYmIChDayA9IHljKCkpLCBDazthID0gQztpZiAoMCAhPT0gYSkgcmV0dXJuIGE7YSA9IHdpbmRvdy5ldmVudDthID0gdm9pZCAwID09PSBhID8gMTYgOiBqZChhLnR5cGUpO3JldHVybiBhO31mdW5jdGlvbiBtaChhLCBiLCBjLCBkKSB7aWYgKDUwIDwgemspIHRocm93IHprID0gMCwgQWsgPSBudWxsLCBFcnJvcihwKDE4NSkpO0FjKGEsIGMsIGQpO2lmICgwID09PSAoSyAmIDIpIHx8IGEgIT09IFIpIGEgPT09IFIgJiYgKDAgPT09IChLICYgMikgJiYgKHJrIHw9IGMpLCA0ID09PSBUICYmIERrKGEsIFopKSwgRWsoYSwgZCksIDEgPT09IGMgJiYgMCA9PT0gSyAmJiAwID09PSAoYi5tb2RlICYgMSkgJiYgKEhqID0gQigpICsgNTAwLCBmZyAmJiBqZygpKTt9CiAgICAgICAgICBmdW5jdGlvbiBFayhhLCBiKSB7dmFyIGMgPSBhLmNhbGxiYWNrTm9kZTt3YyhhLCBiKTt2YXIgZCA9IHVjKGEsIGEgPT09IFIgPyBaIDogMCk7aWYgKDAgPT09IGQpIG51bGwgIT09IGMgJiYgYmMoYyksIGEuY2FsbGJhY2tOb2RlID0gbnVsbCwgYS5jYWxsYmFja1ByaW9yaXR5ID0gMDtlbHNlIGlmIChiID0gZCAmIC1kLCBhLmNhbGxiYWNrUHJpb3JpdHkgIT09IGIpIHtudWxsICE9IGMgJiYgYmMoYyk7aWYgKDEgPT09IGIpIDAgPT09IGEudGFnID8gaWcoRmsuYmluZChudWxsLCBhKSkgOiBoZyhGay5iaW5kKG51bGwsIGEpKSwgSmYoZnVuY3Rpb24gKCkgezAgPT09IChLICYgNikgJiYgamcoKTt9KSwgYyA9IG51bGw7ZWxzZSB7c3dpdGNoIChEYyhkKSkge2Nhc2UgMTpjID0gZmM7YnJlYWs7Y2FzZSA0OmMgPSBnYzticmVhaztjYXNlIDE2OmMgPSBoYzticmVhaztjYXNlIDUzNjg3MDkxMjpjID0gamM7YnJlYWs7ZGVmYXVsdDpjID0gaGM7fWMgPSBHayhjLCBIay5iaW5kKG51bGwsIGEpKTt9YS5jYWxsYmFja1ByaW9yaXR5ID0gYjthLmNhbGxiYWNrTm9kZSA9IGM7fX0KICAgICAgICAgIGZ1bmN0aW9uIEhrKGEsIGIpIHtCayA9IC0xO0NrID0gMDtpZiAoMCAhPT0gKEsgJiA2KSkgdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYyA9IGEuY2FsbGJhY2tOb2RlO2lmIChJaygpICYmIGEuY2FsbGJhY2tOb2RlICE9PSBjKSByZXR1cm4gbnVsbDt2YXIgZCA9IHVjKGEsIGEgPT09IFIgPyBaIDogMCk7aWYgKDAgPT09IGQpIHJldHVybiBudWxsO2lmICgwICE9PSAoZCAmIDMwKSB8fCAwICE9PSAoZCAmIGEuZXhwaXJlZExhbmVzKSB8fCBiKSBiID0gSmsoYSwgZCk7ZWxzZSB7YiA9IGQ7dmFyIGUgPSBLO0sgfD0gMjt2YXIgZiA9IEtrKCk7aWYgKFIgIT09IGEgfHwgWiAhPT0gYikgdmsgPSBudWxsLCBIaiA9IEIoKSArIDUwMCwgTGsoYSwgYik7ZG8gdHJ5IHtNaygpO2JyZWFrO30gY2F0Y2ggKGgpIHtOayhhLCBoKTt9IHdoaWxlICgxKTtRZygpO25rLmN1cnJlbnQgPSBmO0sgPSBlO251bGwgIT09IFkgPyBiID0gMCA6IChSID0gbnVsbCwgWiA9IDAsIGIgPSBUKTt9aWYgKDAgIT09IGIpIHsyID09PSBiICYmIChlID0geGMoYSksIDAgIT09IGUgJiYgKGQgPSBlLCBiID0gT2soYSwgZSkpKTtpZiAoMSA9PT0gYikgdGhyb3cgYyA9IHFrLCBMayhhLCAwKSwgRGsoYSwgZCksIEVrKGEsIEIoKSksIGM7aWYgKDYgPT09IGIpIERrKGEsIGQpO2Vsc2UKICAgICAgICAgICAgICB7ZSA9IGEuY3VycmVudC5hbHRlcm5hdGU7aWYgKDAgPT09IChkICYgMzApICYmICFQayhlKSAmJiAoYiA9IEprKGEsIGQpLCAyID09PSBiICYmIChmID0geGMoYSksIDAgIT09IGYgJiYgKGQgPSBmLCBiID0gT2soYSwgZikpKSwgMSA9PT0gYikpIHRocm93IGMgPSBxaywgTGsoYSwgMCksIERrKGEsIGQpLCBFayhhLCBCKCkpLCBjO2EuZmluaXNoZWRXb3JrID0gZTthLmZpbmlzaGVkTGFuZXMgPSBkO3N3aXRjaCAoYikge2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSwgdWssIHZrKTticmVhaztjYXNlIDM6RGsoYSwgZCk7aWYgKChkICYgMTMwMDIzNDI0KSA9PT0gZCAmJiAoYiA9IGdrICsgNTAwIC0gQigpLCAxMCA8IGIpKSB7aWYgKDAgIT09IHVjKGEsIDApKSBicmVhaztlID0gYS5zdXNwZW5kZWRMYW5lcztpZiAoKGUgJiBkKSAhPT0gZCkge0woKTthLnBpbmdlZExhbmVzIHw9IGEuc3VzcGVuZGVkTGFuZXMgJiBlO2JyZWFrO31hLnRpbWVvdXRIYW5kbGUgPSBGZihRay5iaW5kKG51bGwsIGEsIHVrLCB2ayksIGIpO2JyZWFrO31RayhhLCB1aywgdmspO2JyZWFrO2Nhc2UgNDpEayhhLCBkKTtpZiAoKGQgJiA0MTk0MjQwKSA9PT0KICAgICAgICAgICAgICAgICAgICBkKSBicmVhaztiID0gYS5ldmVudFRpbWVzO2ZvciAoZSA9IC0xOyAwIDwgZDspIHt2YXIgZyA9IDMxIC0gb2MoZCk7ZiA9IDEgPDwgZztnID0gYltnXTtnID4gZSAmJiAoZSA9IGcpO2QgJj0gfmY7fWQgPSBlO2QgPSBCKCkgLSBkO2QgPSAoMTIwID4gZCA/IDEyMCA6IDQ4MCA+IGQgPyA0ODAgOiAxMDgwID4gZCA/IDEwODAgOiAxOTIwID4gZCA/IDE5MjAgOiAzRTMgPiBkID8gM0UzIDogNDMyMCA+IGQgPyA0MzIwIDogMTk2MCAqIG1rKGQgLyAxOTYwKSkgLSBkO2lmICgxMCA8IGQpIHthLnRpbWVvdXRIYW5kbGUgPSBGZihRay5iaW5kKG51bGwsIGEsIHVrLCB2ayksIGQpO2JyZWFrO31RayhhLCB1aywgdmspO2JyZWFrO2Nhc2UgNTpRayhhLCB1aywgdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLCBCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZSA9PT0gYyA/IEhrLmJpbmQobnVsbCwgYSkgOiBudWxsO30KICAgICAgICAgIGZ1bmN0aW9uIE9rKGEsIGIpIHt2YXIgYyA9IHRrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCAmJiAoTGsoYSwgYikuZmxhZ3MgfD0gMjU2KTthID0gSmsoYSwgYik7MiAhPT0gYSAmJiAoYiA9IHVrLCB1ayA9IGMsIG51bGwgIT09IGIgJiYgR2ooYikpO3JldHVybiBhO31mdW5jdGlvbiBHaihhKSB7bnVsbCA9PT0gdWsgPyB1ayA9IGEgOiB1ay5wdXNoLmFwcGx5KHVrLCBhKTt9CiAgICAgICAgICBmdW5jdGlvbiBQayhhKSB7Zm9yICh2YXIgYiA9IGE7Oykge2lmIChiLmZsYWdzICYgMTYzODQpIHt2YXIgYyA9IGIudXBkYXRlUXVldWU7aWYgKG51bGwgIT09IGMgJiYgKGMgPSBjLnN0b3JlcywgbnVsbCAhPT0gYykpIGZvciAodmFyIGQgPSAwOyBkIDwgYy5sZW5ndGg7IGQrKykge3ZhciBlID0gY1tkXSxmID0gZS5nZXRTbmFwc2hvdDtlID0gZS52YWx1ZTt0cnkge2lmICghSGUoZigpLCBlKSkgcmV0dXJuICExO30gY2F0Y2ggKGcpIHtyZXR1cm4gITE7fX19YyA9IGIuY2hpbGQ7aWYgKGIuc3VidHJlZUZsYWdzICYgMTYzODQgJiYgbnVsbCAhPT0gYykgYy5yZXR1cm4gPSBiLCBiID0gYztlbHNlIHtpZiAoYiA9PT0gYSkgYnJlYWs7Zm9yICg7IG51bGwgPT09IGIuc2libGluZzspIHtpZiAobnVsbCA9PT0gYi5yZXR1cm4gfHwgYi5yZXR1cm4gPT09IGEpIHJldHVybiAhMDtiID0gYi5yZXR1cm47fWIuc2libGluZy5yZXR1cm4gPSBiLnJldHVybjtiID0gYi5zaWJsaW5nO319cmV0dXJuICEwO30KICAgICAgICAgIGZ1bmN0aW9uIERrKGEsIGIpIHtiICY9IH5zaztiICY9IH5yazthLnN1c3BlbmRlZExhbmVzIHw9IGI7YS5waW5nZWRMYW5lcyAmPSB+Yjtmb3IgKGEgPSBhLmV4cGlyYXRpb25UaW1lczsgMCA8IGI7KSB7dmFyIGMgPSAzMSAtIG9jKGIpLGQgPSAxIDw8IGM7YVtjXSA9IC0xO2IgJj0gfmQ7fX1mdW5jdGlvbiBGayhhKSB7aWYgKDAgIT09IChLICYgNikpIHRocm93IEVycm9yKHAoMzI3KSk7SWsoKTt2YXIgYiA9IHVjKGEsIDApO2lmICgwID09PSAoYiAmIDEpKSByZXR1cm4gRWsoYSwgQigpKSwgbnVsbDt2YXIgYyA9IEprKGEsIGIpO2lmICgwICE9PSBhLnRhZyAmJiAyID09PSBjKSB7dmFyIGQgPSB4YyhhKTswICE9PSBkICYmIChiID0gZCwgYyA9IE9rKGEsIGQpKTt9aWYgKDEgPT09IGMpIHRocm93IGMgPSBxaywgTGsoYSwgMCksIERrKGEsIGIpLCBFayhhLCBCKCkpLCBjO2lmICg2ID09PSBjKSB0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrID0gYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXMgPSBiO1FrKGEsIHVrLCB2ayk7RWsoYSwgQigpKTtyZXR1cm4gbnVsbDt9CiAgICAgICAgICBmdW5jdGlvbiBSayhhLCBiKSB7dmFyIGMgPSBLO0sgfD0gMTt0cnkge3JldHVybiBhKGIpO30gZmluYWxseSB7SyA9IGMsIDAgPT09IEsgJiYgKEhqID0gQigpICsgNTAwLCBmZyAmJiBqZygpKTt9fWZ1bmN0aW9uIFNrKGEpIHtudWxsICE9PSB4ayAmJiAwID09PSB4ay50YWcgJiYgMCA9PT0gKEsgJiA2KSAmJiBJaygpO3ZhciBiID0gSztLIHw9IDE7dmFyIGMgPSBway50cmFuc2l0aW9uLGQgPSBDO3RyeSB7aWYgKHBrLnRyYW5zaXRpb24gPSBudWxsLCBDID0gMSwgYSkgcmV0dXJuIGEoKTt9IGZpbmFsbHkge0MgPSBkLCBway50cmFuc2l0aW9uID0gYywgSyA9IGIsIDAgPT09IChLICYgNikgJiYgamcoKTt9fWZ1bmN0aW9uIElqKCkge2dqID0gZmouY3VycmVudDtFKGZqKTt9CiAgICAgICAgICBmdW5jdGlvbiBMayhhLCBiKSB7YS5maW5pc2hlZFdvcmsgPSBudWxsO2EuZmluaXNoZWRMYW5lcyA9IDA7dmFyIGMgPSBhLnRpbWVvdXRIYW5kbGU7LTEgIT09IGMgJiYgKGEudGltZW91dEhhbmRsZSA9IC0xLCBHZihjKSk7aWYgKG51bGwgIT09IFkpIGZvciAoYyA9IFkucmV0dXJuOyBudWxsICE9PSBjOykge3ZhciBkID0gYzt3ZyhkKTtzd2l0Y2ggKGQudGFnKSB7Y2FzZSAxOmQgPSBkLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCAhPT0gZCAmJiB2b2lkIDAgIT09IGQgJiYgJGYoKTticmVhaztjYXNlIDM6SmgoKTtFKFdmKTtFKEgpO09oKCk7YnJlYWs7Y2FzZSA1OkxoKGQpO2JyZWFrO2Nhc2UgNDpKaCgpO2JyZWFrO2Nhc2UgMTM6RShNKTticmVhaztjYXNlIDE5OkUoTSk7YnJlYWs7Y2FzZSAxMDpSZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpJaigpO31jID0gYy5yZXR1cm47fVIgPSBhO1kgPSBhID0gd2goYS5jdXJyZW50LCBudWxsKTtaID0gZ2ogPSBiO1QgPSAwO3FrID0gbnVsbDtzayA9IHJrID0gaGggPSAwO3VrID0gdGsgPSBudWxsO2lmIChudWxsICE9PSBXZykge2ZvciAoYiA9CiAgICAgICAgICAgICAgMDsgYiA8IFdnLmxlbmd0aDsgYisrKSBpZiAoYyA9IFdnW2JdLCBkID0gYy5pbnRlcmxlYXZlZCwgbnVsbCAhPT0gZCkge2MuaW50ZXJsZWF2ZWQgPSBudWxsO3ZhciBlID0gZC5uZXh0LGYgPSBjLnBlbmRpbmc7aWYgKG51bGwgIT09IGYpIHt2YXIgZyA9IGYubmV4dDtmLm5leHQgPSBlO2QubmV4dCA9IGc7fWMucGVuZGluZyA9IGQ7fVdnID0gbnVsbDt9cmV0dXJuIGE7fQogICAgICAgICAgZnVuY3Rpb24gTmsoYSwgYikge2RvIHt2YXIgYyA9IFk7dHJ5IHtRZygpO1BoLmN1cnJlbnQgPSBhaTtpZiAoU2gpIHtmb3IgKHZhciBkID0gTi5tZW1vaXplZFN0YXRlOyBudWxsICE9PSBkOykge3ZhciBlID0gZC5xdWV1ZTtudWxsICE9PSBlICYmIChlLnBlbmRpbmcgPSBudWxsKTtkID0gZC5uZXh0O31TaCA9ICExO31SaCA9IDA7UCA9IE8gPSBOID0gbnVsbDtUaCA9ICExO1VoID0gMDtvay5jdXJyZW50ID0gbnVsbDtpZiAobnVsbCA9PT0gYyB8fCBudWxsID09PSBjLnJldHVybikge1QgPSAxO3FrID0gYjtZID0gbnVsbDticmVhazt9YToge3ZhciBmID0gYSxnID0gYy5yZXR1cm4saCA9IGMsayA9IGI7YiA9IFo7aC5mbGFncyB8PSAzMjc2ODtpZiAobnVsbCAhPT0gayAmJiAib2JqZWN0IiA9PT0gdHlwZW9mIGsgJiYgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGsudGhlbikge3ZhciBsID0gayxtID0gaCxxID0gbS50YWc7aWYgKDAgPT09IChtLm1vZGUgJiAxKSAmJiAoMCA9PT0gcSB8fCAxMSA9PT0gcSB8fCAxNSA9PT0gcSkpIHt2YXIgciA9IG0uYWx0ZXJuYXRlO3IgPyAobS51cGRhdGVRdWV1ZSA9IHIudXBkYXRlUXVldWUsIG0ubWVtb2l6ZWRTdGF0ZSA9IHIubWVtb2l6ZWRTdGF0ZSwKICAgICAgICAgICAgICAgICAgICAgIG0ubGFuZXMgPSByLmxhbmVzKSA6IChtLnVwZGF0ZVF1ZXVlID0gbnVsbCwgbS5tZW1vaXplZFN0YXRlID0gbnVsbCk7fXZhciB5ID0gVmkoZyk7aWYgKG51bGwgIT09IHkpIHt5LmZsYWdzICY9IC0yNTc7V2koeSwgZywgaCwgZiwgYik7eS5tb2RlICYgMSAmJiBUaShmLCBsLCBiKTtiID0geTtrID0gbDt2YXIgbiA9IGIudXBkYXRlUXVldWU7aWYgKG51bGwgPT09IG4pIHt2YXIgdCA9IG5ldyBTZXQoKTt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlID0gdDt9IGVsc2Ugbi5hZGQoayk7YnJlYWsgYTt9IGVsc2Uge2lmICgwID09PSAoYiAmIDEpKSB7VGkoZiwgbCwgYik7dWooKTticmVhayBhO31rID0gRXJyb3IocCg0MjYpKTt9fSBlbHNlIGlmIChJICYmIGgubW9kZSAmIDEpIHt2YXIgSiA9IFZpKGcpO2lmIChudWxsICE9PSBKKSB7MCA9PT0gKEouZmxhZ3MgJiA2NTUzNikgJiYgKEouZmxhZ3MgfD0gMjU2KTtXaShKLCBnLCBoLCBmLCBiKTtKZyhLaShrLCBoKSk7YnJlYWsgYTt9fWYgPSBrID0gS2koaywgaCk7NCAhPT0gVCAmJiAoVCA9IDIpO251bGwgPT09IHRrID8gdGsgPSBbZl0gOiB0ay5wdXNoKGYpO2YgPSBnO2RvIHtzd2l0Y2ggKGYudGFnKSB7Y2FzZSAzOmYuZmxhZ3MgfD0gNjU1MzY7CiAgICAgICAgICAgICAgICAgICAgICAgIGIgJj0gLWI7Zi5sYW5lcyB8PSBiO3ZhciB4ID0gT2koZiwgaywgYik7ZmgoZiwgeCk7YnJlYWsgYTtjYXNlIDE6aCA9IGs7dmFyIHcgPSBmLnR5cGUsdSA9IGYuc3RhdGVOb2RlO2lmICgwID09PSAoZi5mbGFncyAmIDEyOCkgJiYgKCJmdW5jdGlvbiIgPT09IHR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciB8fCBudWxsICE9PSB1ICYmICJmdW5jdGlvbiIgPT09IHR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoICYmIChudWxsID09PSBTaSB8fCAhU2kuaGFzKHUpKSkpIHtmLmZsYWdzIHw9IDY1NTM2O2IgJj0gLWI7Zi5sYW5lcyB8PSBiO3ZhciBGID0gUmkoZiwgaCwgYik7ZmgoZiwgRik7YnJlYWsgYTt9fWYgPSBmLnJldHVybjt9IHdoaWxlIChudWxsICE9PSBmKTt9VGsoYyk7fSBjYXRjaCAobmEpIHtiID0gbmE7WSA9PT0gYyAmJiBudWxsICE9PSBjICYmIChZID0gYyA9IGMucmV0dXJuKTtjb250aW51ZTt9YnJlYWs7fSB3aGlsZSAoMSk7fWZ1bmN0aW9uIEtrKCkge3ZhciBhID0gbmsuY3VycmVudDtuay5jdXJyZW50ID0gYWk7cmV0dXJuIG51bGwgPT09IGEgPyBhaSA6IGE7fQogICAgICAgICAgZnVuY3Rpb24gdWooKSB7aWYgKDAgPT09IFQgfHwgMyA9PT0gVCB8fCAyID09PSBUKSBUID0gNDtudWxsID09PSBSIHx8IDAgPT09IChoaCAmIDI2ODQzNTQ1NSkgJiYgMCA9PT0gKHJrICYgMjY4NDM1NDU1KSB8fCBEayhSLCBaKTt9ZnVuY3Rpb24gSmsoYSwgYikge3ZhciBjID0gSztLIHw9IDI7dmFyIGQgPSBLaygpO2lmIChSICE9PSBhIHx8IFogIT09IGIpIHZrID0gbnVsbCwgTGsoYSwgYik7ZG8gdHJ5IHtVaygpO2JyZWFrO30gY2F0Y2ggKGUpIHtOayhhLCBlKTt9IHdoaWxlICgxKTtRZygpO0sgPSBjO25rLmN1cnJlbnQgPSBkO2lmIChudWxsICE9PSBZKSB0aHJvdyBFcnJvcihwKDI2MSkpO1IgPSBudWxsO1ogPSAwO3JldHVybiBUO31mdW5jdGlvbiBVaygpIHtmb3IgKDsgbnVsbCAhPT0gWTspIFZrKFkpO31mdW5jdGlvbiBNaygpIHtmb3IgKDsgbnVsbCAhPT0gWSAmJiAhY2MoKTspIFZrKFkpO31mdW5jdGlvbiBWayhhKSB7dmFyIGIgPSBXayhhLmFsdGVybmF0ZSwgYSwgZ2opO2EubWVtb2l6ZWRQcm9wcyA9IGEucGVuZGluZ1Byb3BzO251bGwgPT09IGIgPyBUayhhKSA6IFkgPSBiO29rLmN1cnJlbnQgPSBudWxsO30KICAgICAgICAgIGZ1bmN0aW9uIFRrKGEpIHt2YXIgYiA9IGE7ZG8ge3ZhciBjID0gYi5hbHRlcm5hdGU7YSA9IGIucmV0dXJuO2lmICgwID09PSAoYi5mbGFncyAmIDMyNzY4KSkge2lmIChjID0gRmooYywgYiwgZ2opLCBudWxsICE9PSBjKSB7WSA9IGM7cmV0dXJuO319IGVsc2Uge2MgPSBKaihjLCBiKTtpZiAobnVsbCAhPT0gYykge2MuZmxhZ3MgJj0gMzI3Njc7WSA9IGM7cmV0dXJuO31pZiAobnVsbCAhPT0gYSkgYS5mbGFncyB8PSAzMjc2OCwgYS5zdWJ0cmVlRmxhZ3MgPSAwLCBhLmRlbGV0aW9ucyA9IG51bGw7ZWxzZSB7VCA9IDY7WSA9IG51bGw7cmV0dXJuO319YiA9IGIuc2libGluZztpZiAobnVsbCAhPT0gYikge1kgPSBiO3JldHVybjt9WSA9IGIgPSBhO30gd2hpbGUgKG51bGwgIT09IGIpOzAgPT09IFQgJiYgKFQgPSA1KTt9ZnVuY3Rpb24gUWsoYSwgYiwgYykge3ZhciBkID0gQyxlID0gcGsudHJhbnNpdGlvbjt0cnkge3BrLnRyYW5zaXRpb24gPSBudWxsLCBDID0gMSwgWGsoYSwgYiwgYywgZCk7fSBmaW5hbGx5IHtway50cmFuc2l0aW9uID0gZSwgQyA9IGQ7fXJldHVybiBudWxsO30KICAgICAgICAgIGZ1bmN0aW9uIFhrKGEsIGIsIGMsIGQpIHtkbyBJaygpOyB3aGlsZSAobnVsbCAhPT0geGspO2lmICgwICE9PSAoSyAmIDYpKSB0aHJvdyBFcnJvcihwKDMyNykpO2MgPSBhLmZpbmlzaGVkV29yazt2YXIgZSA9IGEuZmluaXNoZWRMYW5lcztpZiAobnVsbCA9PT0gYykgcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcmsgPSBudWxsO2EuZmluaXNoZWRMYW5lcyA9IDA7aWYgKGMgPT09IGEuY3VycmVudCkgdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZSA9IG51bGw7YS5jYWxsYmFja1ByaW9yaXR5ID0gMDt2YXIgZiA9IGMubGFuZXMgfCBjLmNoaWxkTGFuZXM7QmMoYSwgZik7YSA9PT0gUiAmJiAoWSA9IFIgPSBudWxsLCBaID0gMCk7MCA9PT0gKGMuc3VidHJlZUZsYWdzICYgMjA2NCkgJiYgMCA9PT0gKGMuZmxhZ3MgJiAyMDY0KSB8fCB3ayB8fCAod2sgPSAhMCwgR2soaGMsIGZ1bmN0aW9uICgpIHtJaygpO3JldHVybiBudWxsO30pKTtmID0gMCAhPT0gKGMuZmxhZ3MgJiAxNTk5MCk7aWYgKDAgIT09IChjLnN1YnRyZWVGbGFncyAmIDE1OTkwKSB8fCBmKSB7ZiA9IHBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbiA9IG51bGw7CiAgICAgICAgICAgICAgdmFyIGcgPSBDO0MgPSAxO3ZhciBoID0gSztLIHw9IDQ7b2suY3VycmVudCA9IG51bGw7UGooYSwgYyk7ZWsoYywgYSk7T2UoRGYpO2RkID0gISFDZjtEZiA9IENmID0gbnVsbDthLmN1cnJlbnQgPSBjO2lrKGMsIGEsIGUpO2RjKCk7SyA9IGg7QyA9IGc7cGsudHJhbnNpdGlvbiA9IGY7fSBlbHNlIGEuY3VycmVudCA9IGM7d2sgJiYgKHdrID0gITEsIHhrID0gYSwgeWsgPSBlKTtmID0gYS5wZW5kaW5nTGFuZXM7MCA9PT0gZiAmJiAoU2kgPSBudWxsKTttYyhjLnN0YXRlTm9kZSwgZCk7RWsoYSwgQigpKTtpZiAobnVsbCAhPT0gYikgZm9yIChkID0gYS5vblJlY292ZXJhYmxlRXJyb3IsIGMgPSAwOyBjIDwgYi5sZW5ndGg7IGMrKykgZSA9IGJbY10sIGQoZS52YWx1ZSwgeyBjb21wb25lbnRTdGFjazogZS5zdGFjaywgZGlnZXN0OiBlLmRpZ2VzdCB9KTtpZiAoUGkpIHRocm93IFBpID0gITEsIGEgPSBRaSwgUWkgPSBudWxsLCBhOzAgIT09ICh5ayAmIDEpICYmIDAgIT09IGEudGFnICYmIElrKCk7ZiA9IGEucGVuZGluZ0xhbmVzOzAgIT09IChmICYgMSkgPyBhID09PSBBayA/IHprKysgOiAoemsgPSAwLCBBayA9IGEpIDogemsgPSAwO2pnKCk7cmV0dXJuIG51bGw7fQogICAgICAgICAgZnVuY3Rpb24gSWsoKSB7aWYgKG51bGwgIT09IHhrKSB7dmFyIGEgPSBEYyh5ayksYiA9IHBrLnRyYW5zaXRpb24sYyA9IEM7dHJ5IHtway50cmFuc2l0aW9uID0gbnVsbDtDID0gMTYgPiBhID8gMTYgOiBhO2lmIChudWxsID09PSB4aykgdmFyIGQgPSAhMTtlbHNlIHthID0geGs7eGsgPSBudWxsO3lrID0gMDtpZiAoMCAhPT0gKEsgJiA2KSkgdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZSA9IEs7SyB8PSA0O2ZvciAoViA9IGEuY3VycmVudDsgbnVsbCAhPT0gVjspIHt2YXIgZiA9IFYsZyA9IGYuY2hpbGQ7aWYgKDAgIT09IChWLmZsYWdzICYgMTYpKSB7dmFyIGggPSBmLmRlbGV0aW9ucztpZiAobnVsbCAhPT0gaCkge2ZvciAodmFyIGsgPSAwOyBrIDwgaC5sZW5ndGg7IGsrKykge3ZhciBsID0gaFtrXTtmb3IgKFYgPSBsOyBudWxsICE9PSBWOykge3ZhciBtID0gVjtzd2l0Y2ggKG0udGFnKSB7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LCBtLCBmKTt9dmFyIHEgPSBtLmNoaWxkO2lmIChudWxsICE9PSBxKSBxLnJldHVybiA9IG0sIFYgPSBxO2Vsc2UgZm9yICg7IG51bGwgIT09IFY7KSB7bSA9IFY7dmFyIHIgPSBtLnNpYmxpbmcseSA9IG0ucmV0dXJuO1RqKG0pO2lmIChtID09PQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsKSB7ViA9IG51bGw7YnJlYWs7fWlmIChudWxsICE9PSByKSB7ci5yZXR1cm4gPSB5O1YgPSByO2JyZWFrO31WID0geTt9fX12YXIgbiA9IGYuYWx0ZXJuYXRlO2lmIChudWxsICE9PSBuKSB7dmFyIHQgPSBuLmNoaWxkO2lmIChudWxsICE9PSB0KSB7bi5jaGlsZCA9IG51bGw7ZG8ge3ZhciBKID0gdC5zaWJsaW5nO3Quc2libGluZyA9IG51bGw7dCA9IEo7fSB3aGlsZSAobnVsbCAhPT0gdCk7fX1WID0gZjt9fWlmICgwICE9PSAoZi5zdWJ0cmVlRmxhZ3MgJiAyMDY0KSAmJiBudWxsICE9PSBnKSBnLnJldHVybiA9IGYsIFYgPSBnO2Vsc2UgYjogZm9yICg7IG51bGwgIT09IFY7KSB7ZiA9IFY7aWYgKDAgIT09IChmLmZsYWdzICYgMjA0OCkpIHN3aXRjaCAoZi50YWcpIHtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksIGYsIGYucmV0dXJuKTt9dmFyIHggPSBmLnNpYmxpbmc7aWYgKG51bGwgIT09IHgpIHt4LnJldHVybiA9IGYucmV0dXJuO1YgPSB4O2JyZWFrIGI7fVYgPSBmLnJldHVybjt9fXZhciB3ID0gYS5jdXJyZW50O2ZvciAoViA9IHc7IG51bGwgIT09IFY7KSB7ZyA9IFY7dmFyIHUgPSBnLmNoaWxkO2lmICgwICE9PSAoZy5zdWJ0cmVlRmxhZ3MgJiAyMDY0KSAmJiBudWxsICE9PQogICAgICAgICAgICAgICAgICAgIHUpIHUucmV0dXJuID0gZywgViA9IHU7ZWxzZSBiOiBmb3IgKGcgPSB3OyBudWxsICE9PSBWOykge2ggPSBWO2lmICgwICE9PSAoaC5mbGFncyAmIDIwNDgpKSB0cnkge3N3aXRjaCAoaC50YWcpIHtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksIGgpO319IGNhdGNoIChuYSkge1coaCwgaC5yZXR1cm4sIG5hKTt9aWYgKGggPT09IGcpIHtWID0gbnVsbDticmVhayBiO312YXIgRiA9IGguc2libGluZztpZiAobnVsbCAhPT0gRikge0YucmV0dXJuID0gaC5yZXR1cm47ViA9IEY7YnJlYWsgYjt9ViA9IGgucmV0dXJuO319SyA9IGU7amcoKTtpZiAobGMgJiYgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCkgdHJ5IHtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsIGEpO30gY2F0Y2ggKG5hKSB7fWQgPSAhMDt9cmV0dXJuIGQ7fSBmaW5hbGx5IHtDID0gYywgcGsudHJhbnNpdGlvbiA9IGI7fX1yZXR1cm4gITE7fWZ1bmN0aW9uIFlrKGEsIGIsIGMpIHtiID0gS2koYywgYik7YiA9IE9pKGEsIGIsIDEpO2EgPSBkaChhLCBiLCAxKTtiID0gTCgpO251bGwgIT09IGEgJiYgKEFjKGEsIDEsIGIpLCBFayhhLCBiKSk7fQogICAgICAgICAgZnVuY3Rpb24gVyhhLCBiLCBjKSB7aWYgKDMgPT09IGEudGFnKSBZayhhLCBhLCBjKTtlbHNlIGZvciAoOyBudWxsICE9PSBiOykge2lmICgzID09PSBiLnRhZykge1lrKGIsIGEsIGMpO2JyZWFrO30gZWxzZSBpZiAoMSA9PT0gYi50YWcpIHt2YXIgZCA9IGIuc3RhdGVOb2RlO2lmICgiZnVuY3Rpb24iID09PSB0eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciB8fCAiZnVuY3Rpb24iID09PSB0eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCAmJiAobnVsbCA9PT0gU2kgfHwgIVNpLmhhcyhkKSkpIHthID0gS2koYywgYSk7YSA9IFJpKGIsIGEsIDEpO2IgPSBkaChiLCBhLCAxKTthID0gTCgpO251bGwgIT09IGIgJiYgKEFjKGIsIDEsIGEpLCBFayhiLCBhKSk7YnJlYWs7fX1iID0gYi5yZXR1cm47fX0KICAgICAgICAgIGZ1bmN0aW9uIFVpKGEsIGIsIGMpIHt2YXIgZCA9IGEucGluZ0NhY2hlO251bGwgIT09IGQgJiYgZC5kZWxldGUoYik7YiA9IEwoKTthLnBpbmdlZExhbmVzIHw9IGEuc3VzcGVuZGVkTGFuZXMgJiBjO1IgPT09IGEgJiYgKFogJiBjKSA9PT0gYyAmJiAoNCA9PT0gVCB8fCAzID09PSBUICYmIChaICYgMTMwMDIzNDI0KSA9PT0gWiAmJiA1MDAgPiBCKCkgLSBnayA/IExrKGEsIDApIDogc2sgfD0gYyk7RWsoYSwgYik7fWZ1bmN0aW9uIFprKGEsIGIpIHswID09PSBiICYmICgwID09PSAoYS5tb2RlICYgMSkgPyBiID0gMSA6IChiID0gc2MsIHNjIDw8PSAxLCAwID09PSAoc2MgJiAxMzAwMjM0MjQpICYmIChzYyA9IDQxOTQzMDQpKSk7dmFyIGMgPSBMKCk7YSA9IFpnKGEsIGIpO251bGwgIT09IGEgJiYgKEFjKGEsIGIsIGMpLCBFayhhLCBjKSk7fWZ1bmN0aW9uIHZqKGEpIHt2YXIgYiA9IGEubWVtb2l6ZWRTdGF0ZSxjID0gMDtudWxsICE9PSBiICYmIChjID0gYi5yZXRyeUxhbmUpO1prKGEsIGMpO30KICAgICAgICAgIGZ1bmN0aW9uIGNrKGEsIGIpIHt2YXIgYyA9IDA7c3dpdGNoIChhLnRhZykge2Nhc2UgMTM6dmFyIGQgPSBhLnN0YXRlTm9kZTt2YXIgZSA9IGEubWVtb2l6ZWRTdGF0ZTtudWxsICE9PSBlICYmIChjID0gZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZCA9IGEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCAhPT0gZCAmJiBkLmRlbGV0ZShiKTtaayhhLCBjKTt9dmFyIFdrOwogICAgICAgICAgV2sgPSBmdW5jdGlvbiBXayhhLCBiLCBjKSB7aWYgKG51bGwgIT09IGEpIHtpZiAoYS5tZW1vaXplZFByb3BzICE9PSBiLnBlbmRpbmdQcm9wcyB8fCBXZi5jdXJyZW50KSBVZyA9ICEwO2Vsc2Uge2lmICgwID09PSAoYS5sYW5lcyAmIGMpICYmIDAgPT09IChiLmZsYWdzICYgMTI4KSkgcmV0dXJuIFVnID0gITEsIHpqKGEsIGIsIGMpO1VnID0gMCAhPT0gKGEuZmxhZ3MgJiAxMzEwNzIpID8gITAgOiAhMTt9fSBlbHNlIFVnID0gITEsIEkgJiYgMCAhPT0gKGIuZmxhZ3MgJiAxMDQ4NTc2KSAmJiB1ZyhiLCBuZywgYi5pbmRleCk7Yi5sYW5lcyA9IDA7c3dpdGNoIChiLnRhZykge2Nhc2UgMjp2YXIgZCA9IGIudHlwZTtqaihhLCBiKTthID0gYi5wZW5kaW5nUHJvcHM7dmFyIGUgPSBZZihiLCBILmN1cnJlbnQpO1RnKGIsIGMpO2UgPSBYaChudWxsLCBiLCBkLCBhLCBlLCBjKTt2YXIgZiA9IGJpKCk7Yi5mbGFncyB8PSAxOyJvYmplY3QiID09PSB0eXBlb2YgZSAmJiBudWxsICE9PSBlICYmICJmdW5jdGlvbiIgPT09IHR5cGVvZiBlLnJlbmRlciAmJiB2b2lkIDAgPT09IGUuJCR0eXBlb2YgPyAoYi50YWcgPSAxLCBiLm1lbW9pemVkU3RhdGUgPSBudWxsLCBiLnVwZGF0ZVF1ZXVlID0KICAgICAgICAgICAgICAgIG51bGwsIFpmKGQpID8gKGYgPSAhMCwgY2coYikpIDogZiA9ICExLCBiLm1lbW9pemVkU3RhdGUgPSBudWxsICE9PSBlLnN0YXRlICYmIHZvaWQgMCAhPT0gZS5zdGF0ZSA/IGUuc3RhdGUgOiBudWxsLCBhaChiKSwgZS51cGRhdGVyID0gbmgsIGIuc3RhdGVOb2RlID0gZSwgZS5fcmVhY3RJbnRlcm5hbHMgPSBiLCByaChiLCBkLCBhLCBjKSwgYiA9IGtqKG51bGwsIGIsIGQsICEwLCBmLCBjKSkgOiAoYi50YWcgPSAwLCBJICYmIGYgJiYgdmcoYiksIFlpKG51bGwsIGIsIGUsIGMpLCBiID0gYi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkID0gYi5lbGVtZW50VHlwZTthOiB7amooYSwgYik7YSA9IGIucGVuZGluZ1Byb3BzO2UgPSBkLl9pbml0O2QgPSBlKGQuX3BheWxvYWQpO2IudHlwZSA9IGQ7ZSA9IGIudGFnID0gJGsoZCk7YSA9IExnKGQsIGEpO3N3aXRjaCAoZSkge2Nhc2UgMDpiID0gZGoobnVsbCwgYiwgZCwgYSwgYyk7YnJlYWsgYTtjYXNlIDE6YiA9IGlqKG51bGwsIGIsIGQsIGEsIGMpO2JyZWFrIGE7Y2FzZSAxMTpiID0gWmkobnVsbCwgYiwgZCwgYSwgYyk7YnJlYWsgYTtjYXNlIDE0OmIgPSBhaihudWxsLCBiLCBkLCBMZyhkLnR5cGUsIGEpLCBjKTticmVhayBhO310aHJvdyBFcnJvcihwKDMwNiwKICAgICAgICAgICAgICAgICAgZCwgIiIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkID0gYi50eXBlLCBlID0gYi5wZW5kaW5nUHJvcHMsIGUgPSBiLmVsZW1lbnRUeXBlID09PSBkID8gZSA6IExnKGQsIGUpLCBkaihhLCBiLCBkLCBlLCBjKTtjYXNlIDE6cmV0dXJuIGQgPSBiLnR5cGUsIGUgPSBiLnBlbmRpbmdQcm9wcywgZSA9IGIuZWxlbWVudFR5cGUgPT09IGQgPyBlIDogTGcoZCwgZSksIGlqKGEsIGIsIGQsIGUsIGMpO2Nhc2UgMzphOiB7bGooYik7aWYgKG51bGwgPT09IGEpIHRocm93IEVycm9yKHAoMzg3KSk7ZCA9IGIucGVuZGluZ1Byb3BzO2YgPSBiLm1lbW9pemVkU3RhdGU7ZSA9IGYuZWxlbWVudDtiaChhLCBiKTtnaChiLCBkLCBudWxsLCBjKTt2YXIgZyA9IGIubWVtb2l6ZWRTdGF0ZTtkID0gZy5lbGVtZW50O2lmIChmLmlzRGVoeWRyYXRlZCkge2lmIChmID0geyBlbGVtZW50OiBkLCBpc0RlaHlkcmF0ZWQ6ICExLCBjYWNoZTogZy5jYWNoZSwgcGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczogZy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLCB0cmFuc2l0aW9uczogZy50cmFuc2l0aW9ucyB9LCBiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9CiAgICAgICAgICAgICAgICAgICAgZiwgYi5tZW1vaXplZFN0YXRlID0gZiwgYi5mbGFncyAmIDI1Nikge2UgPSBLaShFcnJvcihwKDQyMykpLCBiKTtiID0gbWooYSwgYiwgZCwgYywgZSk7YnJlYWsgYTt9IGVsc2UgaWYgKGQgIT09IGUpIHtlID0gS2koRXJyb3IocCg0MjQpKSwgYik7YiA9IG1qKGEsIGIsIGQsIGMsIGUpO2JyZWFrIGE7fSBlbHNlIGZvciAoeWcgPSBMZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLCB4ZyA9IGIsIEkgPSAhMCwgemcgPSBudWxsLCBjID0gQ2goYiwgbnVsbCwgZCwgYyksIGIuY2hpbGQgPSBjOyBjOykgYy5mbGFncyA9IGMuZmxhZ3MgJiAtMyB8IDQwOTYsIGMgPSBjLnNpYmxpbmc7fSBlbHNlIHtJZygpO2lmIChkID09PSBlKSB7YiA9ICRpKGEsIGIsIGMpO2JyZWFrIGE7fVlpKGEsIGIsIGQsIGMpO31iID0gYi5jaGlsZDt9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBLaChiKSwgbnVsbCA9PT0gYSAmJiBFZyhiKSwgZCA9IGIudHlwZSwgZSA9IGIucGVuZGluZ1Byb3BzLCBmID0gbnVsbCAhPT0gYSA/IGEubWVtb2l6ZWRQcm9wcyA6IG51bGwsIGcgPSBlLmNoaWxkcmVuLCBFZihkLCBlKSA/IGcgPSBudWxsIDogbnVsbCAhPT0gZiAmJiBFZihkLCBmKSAmJiAoYi5mbGFncyB8PSAzMiksCiAgICAgICAgICAgICAgICBoaihhLCBiKSwgWWkoYSwgYiwgZywgYyksIGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsID09PSBhICYmIEVnKGIpLCBudWxsO2Nhc2UgMTM6cmV0dXJuIHBqKGEsIGIsIGMpO2Nhc2UgNDpyZXR1cm4gSWgoYiwgYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksIGQgPSBiLnBlbmRpbmdQcm9wcywgbnVsbCA9PT0gYSA/IGIuY2hpbGQgPSBCaChiLCBudWxsLCBkLCBjKSA6IFlpKGEsIGIsIGQsIGMpLCBiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQgPSBiLnR5cGUsIGUgPSBiLnBlbmRpbmdQcm9wcywgZSA9IGIuZWxlbWVudFR5cGUgPT09IGQgPyBlIDogTGcoZCwgZSksIFppKGEsIGIsIGQsIGUsIGMpO2Nhc2UgNzpyZXR1cm4gWWkoYSwgYiwgYi5wZW5kaW5nUHJvcHMsIGMpLCBiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSwgYiwgYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sIGMpLCBiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsIGIsIGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBjKSwgYi5jaGlsZDtjYXNlIDEwOmE6IHtkID0gYi50eXBlLl9jb250ZXh0O2UgPSBiLnBlbmRpbmdQcm9wcztmID0gYi5tZW1vaXplZFByb3BzOwogICAgICAgICAgICAgICAgICBnID0gZS52YWx1ZTtHKE1nLCBkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZSA9IGc7aWYgKG51bGwgIT09IGYpIGlmIChIZShmLnZhbHVlLCBnKSkge2lmIChmLmNoaWxkcmVuID09PSBlLmNoaWxkcmVuICYmICFXZi5jdXJyZW50KSB7YiA9ICRpKGEsIGIsIGMpO2JyZWFrIGE7fX0gZWxzZSBmb3IgKGYgPSBiLmNoaWxkLCBudWxsICE9PSBmICYmIChmLnJldHVybiA9IGIpOyBudWxsICE9PSBmOykge3ZhciBoID0gZi5kZXBlbmRlbmNpZXM7aWYgKG51bGwgIT09IGgpIHtnID0gZi5jaGlsZDtmb3IgKHZhciBrID0gaC5maXJzdENvbnRleHQ7IG51bGwgIT09IGs7KSB7aWYgKGsuY29udGV4dCA9PT0gZCkge2lmICgxID09PSBmLnRhZykge2sgPSBjaCgtMSwgYyAmIC1jKTtrLnRhZyA9IDI7dmFyIGwgPSBmLnVwZGF0ZVF1ZXVlO2lmIChudWxsICE9PSBsKSB7bCA9IGwuc2hhcmVkO3ZhciBtID0gbC5wZW5kaW5nO251bGwgPT09IG0gPyBrLm5leHQgPSBrIDogKGsubmV4dCA9IG0ubmV4dCwgbS5uZXh0ID0gayk7bC5wZW5kaW5nID0gazt9fWYubGFuZXMgfD0gYztrID0gZi5hbHRlcm5hdGU7bnVsbCAhPT0gayAmJiAoay5sYW5lcyB8PSBjKTtTZyhmLnJldHVybiwKICAgICAgICAgICAgICAgICAgICAgICAgICBjLCBiKTtoLmxhbmVzIHw9IGM7YnJlYWs7fWsgPSBrLm5leHQ7fX0gZWxzZSBpZiAoMTAgPT09IGYudGFnKSBnID0gZi50eXBlID09PSBiLnR5cGUgPyBudWxsIDogZi5jaGlsZDtlbHNlIGlmICgxOCA9PT0gZi50YWcpIHtnID0gZi5yZXR1cm47aWYgKG51bGwgPT09IGcpIHRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lcyB8PSBjO2ggPSBnLmFsdGVybmF0ZTtudWxsICE9PSBoICYmIChoLmxhbmVzIHw9IGMpO1NnKGcsIGMsIGIpO2cgPSBmLnNpYmxpbmc7fSBlbHNlIGcgPSBmLmNoaWxkO2lmIChudWxsICE9PSBnKSBnLnJldHVybiA9IGY7ZWxzZSBmb3IgKGcgPSBmOyBudWxsICE9PSBnOykge2lmIChnID09PSBiKSB7ZyA9IG51bGw7YnJlYWs7fWYgPSBnLnNpYmxpbmc7aWYgKG51bGwgIT09IGYpIHtmLnJldHVybiA9IGcucmV0dXJuO2cgPSBmO2JyZWFrO31nID0gZy5yZXR1cm47fWYgPSBnO31ZaShhLCBiLCBlLmNoaWxkcmVuLCBjKTtiID0gYi5jaGlsZDt9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlID0gYi50eXBlLCBkID0gYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sIFRnKGIsIGMpLCBlID0gVmcoZSksIGQgPSBkKGUpLCBiLmZsYWdzIHw9IDEsIFlpKGEsIGIsIGQsIGMpLAogICAgICAgICAgICAgICAgYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkID0gYi50eXBlLCBlID0gTGcoZCwgYi5wZW5kaW5nUHJvcHMpLCBlID0gTGcoZC50eXBlLCBlKSwgYWooYSwgYiwgZCwgZSwgYyk7Y2FzZSAxNTpyZXR1cm4gY2ooYSwgYiwgYi50eXBlLCBiLnBlbmRpbmdQcm9wcywgYyk7Y2FzZSAxNzpyZXR1cm4gZCA9IGIudHlwZSwgZSA9IGIucGVuZGluZ1Byb3BzLCBlID0gYi5lbGVtZW50VHlwZSA9PT0gZCA/IGUgOiBMZyhkLCBlKSwgamooYSwgYiksIGIudGFnID0gMSwgWmYoZCkgPyAoYSA9ICEwLCBjZyhiKSkgOiBhID0gITEsIFRnKGIsIGMpLCBwaChiLCBkLCBlKSwgcmgoYiwgZCwgZSwgYyksIGtqKG51bGwsIGIsIGQsICEwLCBhLCBjKTtjYXNlIDE5OnJldHVybiB5aihhLCBiLCBjKTtjYXNlIDIyOnJldHVybiBlaihhLCBiLCBjKTt9dGhyb3cgRXJyb3IocCgxNTYsIGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLCBiKSB7cmV0dXJuIGFjKGEsIGIpO30KICAgICAgICAgIGZ1bmN0aW9uIGFsKGEsIGIsIGMsIGQpIHt0aGlzLnRhZyA9IGE7dGhpcy5rZXkgPSBjO3RoaXMuc2libGluZyA9IHRoaXMuY2hpbGQgPSB0aGlzLnJldHVybiA9IHRoaXMuc3RhdGVOb2RlID0gdGhpcy50eXBlID0gdGhpcy5lbGVtZW50VHlwZSA9IG51bGw7dGhpcy5pbmRleCA9IDA7dGhpcy5yZWYgPSBudWxsO3RoaXMucGVuZGluZ1Byb3BzID0gYjt0aGlzLmRlcGVuZGVuY2llcyA9IHRoaXMubWVtb2l6ZWRTdGF0ZSA9IHRoaXMudXBkYXRlUXVldWUgPSB0aGlzLm1lbW9pemVkUHJvcHMgPSBudWxsO3RoaXMubW9kZSA9IGQ7dGhpcy5zdWJ0cmVlRmxhZ3MgPSB0aGlzLmZsYWdzID0gMDt0aGlzLmRlbGV0aW9ucyA9IG51bGw7dGhpcy5jaGlsZExhbmVzID0gdGhpcy5sYW5lcyA9IDA7dGhpcy5hbHRlcm5hdGUgPSBudWxsO31mdW5jdGlvbiBCZyhhLCBiLCBjLCBkKSB7cmV0dXJuIG5ldyBhbChhLCBiLCBjLCBkKTt9ZnVuY3Rpb24gYmooYSkge2EgPSBhLnByb3RvdHlwZTtyZXR1cm4gISghYSB8fCAhYS5pc1JlYWN0Q29tcG9uZW50KTt9CiAgICAgICAgICBmdW5jdGlvbiAkayhhKSB7aWYgKCJmdW5jdGlvbiIgPT09IHR5cGVvZiBhKSByZXR1cm4gYmooYSkgPyAxIDogMDtpZiAodm9pZCAwICE9PSBhICYmIG51bGwgIT09IGEpIHthID0gYS4kJHR5cGVvZjtpZiAoYSA9PT0gRGEpIHJldHVybiAxMTtpZiAoYSA9PT0gR2EpIHJldHVybiAxNDt9cmV0dXJuIDI7fQogICAgICAgICAgZnVuY3Rpb24gd2goYSwgYikge3ZhciBjID0gYS5hbHRlcm5hdGU7bnVsbCA9PT0gYyA/IChjID0gQmcoYS50YWcsIGIsIGEua2V5LCBhLm1vZGUpLCBjLmVsZW1lbnRUeXBlID0gYS5lbGVtZW50VHlwZSwgYy50eXBlID0gYS50eXBlLCBjLnN0YXRlTm9kZSA9IGEuc3RhdGVOb2RlLCBjLmFsdGVybmF0ZSA9IGEsIGEuYWx0ZXJuYXRlID0gYykgOiAoYy5wZW5kaW5nUHJvcHMgPSBiLCBjLnR5cGUgPSBhLnR5cGUsIGMuZmxhZ3MgPSAwLCBjLnN1YnRyZWVGbGFncyA9IDAsIGMuZGVsZXRpb25zID0gbnVsbCk7Yy5mbGFncyA9IGEuZmxhZ3MgJiAxNDY4MDA2NDtjLmNoaWxkTGFuZXMgPSBhLmNoaWxkTGFuZXM7Yy5sYW5lcyA9IGEubGFuZXM7Yy5jaGlsZCA9IGEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzID0gYS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZSA9IGEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlID0gYS51cGRhdGVRdWV1ZTtiID0gYS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXMgPSBudWxsID09PSBiID8gbnVsbCA6IHsgbGFuZXM6IGIubGFuZXMsIGZpcnN0Q29udGV4dDogYi5maXJzdENvbnRleHQgfTsKICAgICAgICAgICAgYy5zaWJsaW5nID0gYS5zaWJsaW5nO2MuaW5kZXggPSBhLmluZGV4O2MucmVmID0gYS5yZWY7cmV0dXJuIGM7fQogICAgICAgICAgZnVuY3Rpb24geWgoYSwgYiwgYywgZCwgZSwgZikge3ZhciBnID0gMjtkID0gYTtpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGEpIGJqKGEpICYmIChnID0gMSk7ZWxzZSBpZiAoInN0cmluZyIgPT09IHR5cGVvZiBhKSBnID0gNTtlbHNlIGE6IHN3aXRjaCAoYSkge2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sIGUsIGYsIGIpO2Nhc2UgemE6ZyA9IDg7ZSB8PSA4O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGEgPSBCZygxMiwgYywgYiwgZSB8IDIpLCBhLmVsZW1lbnRUeXBlID0gQWEsIGEubGFuZXMgPSBmLCBhO2Nhc2UgRWE6cmV0dXJuIGEgPSBCZygxMywgYywgYiwgZSksIGEuZWxlbWVudFR5cGUgPSBFYSwgYS5sYW5lcyA9IGYsIGE7Y2FzZSBGYTpyZXR1cm4gYSA9IEJnKDE5LCBjLCBiLCBlKSwgYS5lbGVtZW50VHlwZSA9IEZhLCBhLmxhbmVzID0gZiwgYTtjYXNlIElhOnJldHVybiBxaihjLCBlLCBmLCBiKTtkZWZhdWx0OmlmICgib2JqZWN0IiA9PT0gdHlwZW9mIGEgJiYgbnVsbCAhPT0gYSkgc3dpdGNoIChhLiQkdHlwZW9mKSB7Y2FzZSBCYTpnID0gMTA7YnJlYWsgYTtjYXNlIENhOmcgPSA5O2JyZWFrIGE7Y2FzZSBEYTpnID0gMTE7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtjYXNlIEdhOmcgPSAxNDticmVhayBhO2Nhc2UgSGE6ZyA9IDE2O2QgPSBudWxsO2JyZWFrIGE7fXRocm93IEVycm9yKHAoMTMwLCBudWxsID09IGEgPyBhIDogdHlwZW9mIGEsICIiKSk7fWIgPSBCZyhnLCBjLCBiLCBlKTtiLmVsZW1lbnRUeXBlID0gYTtiLnR5cGUgPSBkO2IubGFuZXMgPSBmO3JldHVybiBiO31mdW5jdGlvbiBBaChhLCBiLCBjLCBkKSB7YSA9IEJnKDcsIGEsIGQsIGIpO2EubGFuZXMgPSBjO3JldHVybiBhO31mdW5jdGlvbiBxaihhLCBiLCBjLCBkKSB7YSA9IEJnKDIyLCBhLCBkLCBiKTthLmVsZW1lbnRUeXBlID0gSWE7YS5sYW5lcyA9IGM7YS5zdGF0ZU5vZGUgPSB7IGlzSGlkZGVuOiAhMSB9O3JldHVybiBhO31mdW5jdGlvbiB4aChhLCBiLCBjKSB7YSA9IEJnKDYsIGEsIG51bGwsIGIpO2EubGFuZXMgPSBjO3JldHVybiBhO30KICAgICAgICAgIGZ1bmN0aW9uIHpoKGEsIGIsIGMpIHtiID0gQmcoNCwgbnVsbCAhPT0gYS5jaGlsZHJlbiA/IGEuY2hpbGRyZW4gOiBbXSwgYS5rZXksIGIpO2IubGFuZXMgPSBjO2Iuc3RhdGVOb2RlID0geyBjb250YWluZXJJbmZvOiBhLmNvbnRhaW5lckluZm8sIHBlbmRpbmdDaGlsZHJlbjogbnVsbCwgaW1wbGVtZW50YXRpb246IGEuaW1wbGVtZW50YXRpb24gfTtyZXR1cm4gYjt9CiAgICAgICAgICBmdW5jdGlvbiBibChhLCBiLCBjLCBkLCBlKSB7dGhpcy50YWcgPSBiO3RoaXMuY29udGFpbmVySW5mbyA9IGE7dGhpcy5maW5pc2hlZFdvcmsgPSB0aGlzLnBpbmdDYWNoZSA9IHRoaXMuY3VycmVudCA9IHRoaXMucGVuZGluZ0NoaWxkcmVuID0gbnVsbDt0aGlzLnRpbWVvdXRIYW5kbGUgPSAtMTt0aGlzLmNhbGxiYWNrTm9kZSA9IHRoaXMucGVuZGluZ0NvbnRleHQgPSB0aGlzLmNvbnRleHQgPSBudWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eSA9IDA7dGhpcy5ldmVudFRpbWVzID0gemMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXMgPSB6YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcyA9IHRoaXMuZmluaXNoZWRMYW5lcyA9IHRoaXMubXV0YWJsZVJlYWRMYW5lcyA9IHRoaXMuZXhwaXJlZExhbmVzID0gdGhpcy5waW5nZWRMYW5lcyA9IHRoaXMuc3VzcGVuZGVkTGFuZXMgPSB0aGlzLnBlbmRpbmdMYW5lcyA9IDA7dGhpcy5lbnRhbmdsZW1lbnRzID0gemMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4ID0gZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvciA9IGU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhID0KICAgICAgICAgICAgbnVsbDt9ZnVuY3Rpb24gY2woYSwgYiwgYywgZCwgZSwgZiwgZywgaCwgaykge2EgPSBuZXcgYmwoYSwgYiwgYywgaCwgayk7MSA9PT0gYiA/IChiID0gMSwgITAgPT09IGYgJiYgKGIgfD0gOCkpIDogYiA9IDA7ZiA9IEJnKDMsIG51bGwsIG51bGwsIGIpO2EuY3VycmVudCA9IGY7Zi5zdGF0ZU5vZGUgPSBhO2YubWVtb2l6ZWRTdGF0ZSA9IHsgZWxlbWVudDogZCwgaXNEZWh5ZHJhdGVkOiBjLCBjYWNoZTogbnVsbCwgdHJhbnNpdGlvbnM6IG51bGwsIHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6IG51bGwgfTthaChmKTtyZXR1cm4gYTt9ZnVuY3Rpb24gZGwoYSwgYiwgYykge3ZhciBkID0gMyA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiBudWxsO3JldHVybiB7ICQkdHlwZW9mOiB3YSwga2V5OiBudWxsID09IGQgPyBudWxsIDogIiIgKyBkLCBjaGlsZHJlbjogYSwgY29udGFpbmVySW5mbzogYiwgaW1wbGVtZW50YXRpb246IGMgfTt9CiAgICAgICAgICBmdW5jdGlvbiBlbChhKSB7aWYgKCFhKSByZXR1cm4gVmY7YSA9IGEuX3JlYWN0SW50ZXJuYWxzO2E6IHtpZiAoVmIoYSkgIT09IGEgfHwgMSAhPT0gYS50YWcpIHRocm93IEVycm9yKHAoMTcwKSk7dmFyIGIgPSBhO2RvIHtzd2l0Y2ggKGIudGFnKSB7Y2FzZSAzOmIgPSBiLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmIChaZihiLnR5cGUpKSB7YiA9IGIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGE7fX1iID0gYi5yZXR1cm47fSB3aGlsZSAobnVsbCAhPT0gYik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYgKDEgPT09IGEudGFnKSB7dmFyIGMgPSBhLnR5cGU7aWYgKFpmKGMpKSByZXR1cm4gYmcoYSwgYywgYik7fXJldHVybiBiO30KICAgICAgICAgIGZ1bmN0aW9uIGZsKGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgsIGspIHthID0gY2woYywgZCwgITAsIGEsIGUsIGYsIGcsIGgsIGspO2EuY29udGV4dCA9IGVsKG51bGwpO2MgPSBhLmN1cnJlbnQ7ZCA9IEwoKTtlID0gbGgoYyk7ZiA9IGNoKGQsIGUpO2YuY2FsbGJhY2sgPSB2b2lkIDAgIT09IGIgJiYgbnVsbCAhPT0gYiA/IGIgOiBudWxsO2RoKGMsIGYsIGUpO2EuY3VycmVudC5sYW5lcyA9IGU7QWMoYSwgZSwgZCk7RWsoYSwgZCk7cmV0dXJuIGE7fWZ1bmN0aW9uIGdsKGEsIGIsIGMsIGQpIHt2YXIgZSA9IGIuY3VycmVudCxmID0gTCgpLGcgPSBsaChlKTtjID0gZWwoYyk7bnVsbCA9PT0gYi5jb250ZXh0ID8gYi5jb250ZXh0ID0gYyA6IGIucGVuZGluZ0NvbnRleHQgPSBjO2IgPSBjaChmLCBnKTtiLnBheWxvYWQgPSB7IGVsZW1lbnQ6IGEgfTtkID0gdm9pZCAwID09PSBkID8gbnVsbCA6IGQ7bnVsbCAhPT0gZCAmJiAoYi5jYWxsYmFjayA9IGQpO2EgPSBkaChlLCBiLCBnKTtudWxsICE9PSBhICYmIChtaChhLCBlLCBnLCBmKSwgZWgoYSwgZSwgZykpO3JldHVybiBnO30KICAgICAgICAgIGZ1bmN0aW9uIGhsKGEpIHthID0gYS5jdXJyZW50O2lmICghYS5jaGlsZCkgcmV0dXJuIG51bGw7c3dpdGNoIChhLmNoaWxkLnRhZykge2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7fX1mdW5jdGlvbiBpbChhLCBiKSB7YSA9IGEubWVtb2l6ZWRTdGF0ZTtpZiAobnVsbCAhPT0gYSAmJiBudWxsICE9PSBhLmRlaHlkcmF0ZWQpIHt2YXIgYyA9IGEucmV0cnlMYW5lO2EucmV0cnlMYW5lID0gMCAhPT0gYyAmJiBjIDwgYiA/IGMgOiBiO319ZnVuY3Rpb24gamwoYSwgYikge2lsKGEsIGIpOyhhID0gYS5hbHRlcm5hdGUpICYmIGlsKGEsIGIpO31mdW5jdGlvbiBrbCgpIHtyZXR1cm4gbnVsbDt9dmFyIGxsID0gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIHJlcG9ydEVycm9yID8gcmVwb3J0RXJyb3IgOiBmdW5jdGlvbiAoYSkge2NvbnNvbGUuZXJyb3IoYSk7fTtmdW5jdGlvbiBtbChhKSB7dGhpcy5faW50ZXJuYWxSb290ID0gYTt9CiAgICAgICAgICBubC5wcm90b3R5cGUucmVuZGVyID0gbWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChhKSB7dmFyIGIgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7aWYgKG51bGwgPT09IGIpIHRocm93IEVycm9yKHAoNDA5KSk7Z2woYSwgYiwgbnVsbCwgbnVsbCk7fTtubC5wcm90b3R5cGUudW5tb3VudCA9IG1sLnByb3RvdHlwZS51bm1vdW50ID0gZnVuY3Rpb24gKCkge3ZhciBhID0gdGhpcy5faW50ZXJuYWxSb290O2lmIChudWxsICE9PSBhKSB7dGhpcy5faW50ZXJuYWxSb290ID0gbnVsbDt2YXIgYiA9IGEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbiAoKSB7Z2wobnVsbCwgYSwgbnVsbCwgbnVsbCk7fSk7Ylt1Zl0gPSBudWxsO319O2Z1bmN0aW9uIG5sKGEpIHt0aGlzLl9pbnRlcm5hbFJvb3QgPSBhO30KICAgICAgICAgIG5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiA9IGZ1bmN0aW9uIChhKSB7aWYgKGEpIHt2YXIgYiA9IEhjKCk7YSA9IHsgYmxvY2tlZE9uOiBudWxsLCB0YXJnZXQ6IGEsIHByaW9yaXR5OiBiIH07Zm9yICh2YXIgYyA9IDA7IGMgPCBRYy5sZW5ndGggJiYgMCAhPT0gYiAmJiBiIDwgUWNbY10ucHJpb3JpdHk7IGMrKyk7UWMuc3BsaWNlKGMsIDAsIGEpOzAgPT09IGMgJiYgVmMoYSk7fX07ZnVuY3Rpb24gb2woYSkge3JldHVybiAhKCFhIHx8IDEgIT09IGEubm9kZVR5cGUgJiYgOSAhPT0gYS5ub2RlVHlwZSAmJiAxMSAhPT0gYS5ub2RlVHlwZSk7fWZ1bmN0aW9uIHBsKGEpIHtyZXR1cm4gISghYSB8fCAxICE9PSBhLm5vZGVUeXBlICYmIDkgIT09IGEubm9kZVR5cGUgJiYgMTEgIT09IGEubm9kZVR5cGUgJiYgKDggIT09IGEubm9kZVR5cGUgfHwgIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSAiICE9PSBhLm5vZGVWYWx1ZSkpO31mdW5jdGlvbiBxbCgpIHt9CiAgICAgICAgICBmdW5jdGlvbiBybChhLCBiLCBjLCBkLCBlKSB7aWYgKGUpIHtpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGQpIHt2YXIgZiA9IGQ7ZCA9IGZ1bmN0aW9uIGQoKSB7dmFyIGEgPSBobChnKTtmLmNhbGwoYSk7fTt9dmFyIGcgPSBmbChiLCBkLCBhLCAwLCBudWxsLCAhMSwgITEsICIiLCBxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyID0gZzthW3VmXSA9IGcuY3VycmVudDtzZig4ID09PSBhLm5vZGVUeXBlID8gYS5wYXJlbnROb2RlIDogYSk7U2soKTtyZXR1cm4gZzt9Zm9yICg7IGUgPSBhLmxhc3RDaGlsZDspIGEucmVtb3ZlQ2hpbGQoZSk7aWYgKCJmdW5jdGlvbiIgPT09IHR5cGVvZiBkKSB7dmFyIGggPSBkO2QgPSBmdW5jdGlvbiBkKCkge3ZhciBhID0gaGwoayk7aC5jYWxsKGEpO307fXZhciBrID0gY2woYSwgMCwgITEsIG51bGwsIG51bGwsICExLCAhMSwgIiIsIHFsKTthLl9yZWFjdFJvb3RDb250YWluZXIgPSBrO2FbdWZdID0gay5jdXJyZW50O3NmKDggPT09IGEubm9kZVR5cGUgPyBhLnBhcmVudE5vZGUgOiBhKTtTayhmdW5jdGlvbiAoKSB7Z2woYiwgaywgYywgZCk7fSk7cmV0dXJuIGs7fQogICAgICAgICAgZnVuY3Rpb24gc2woYSwgYiwgYywgZCwgZSkge3ZhciBmID0gYy5fcmVhY3RSb290Q29udGFpbmVyO2lmIChmKSB7dmFyIGcgPSBmO2lmICgiZnVuY3Rpb24iID09PSB0eXBlb2YgZSkge3ZhciBoID0gZTtlID0gZnVuY3Rpb24gZSgpIHt2YXIgYSA9IGhsKGcpO2guY2FsbChhKTt9O31nbChiLCBnLCBhLCBlKTt9IGVsc2UgZyA9IHJsKGMsIGIsIGEsIGUsIGQpO3JldHVybiBobChnKTt9RWMgPSBmdW5jdGlvbiBFYyhhKSB7c3dpdGNoIChhLnRhZykge2Nhc2UgMzp2YXIgYiA9IGEuc3RhdGVOb2RlO2lmIChiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpIHt2YXIgYyA9IHRjKGIucGVuZGluZ0xhbmVzKTswICE9PSBjICYmIChDYyhiLCBjIHwgMSksIEVrKGIsIEIoKSksIDAgPT09IChLICYgNikgJiYgKEhqID0gQigpICsgNTAwLCBqZygpKSk7fWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24gKCkge3ZhciBiID0gWmcoYSwgMSk7aWYgKG51bGwgIT09IGIpIHt2YXIgYyA9IEwoKTttaChiLCBhLCAxLCBjKTt9fSksIGpsKGEsIDEpO319OwogICAgICAgICAgRmMgPSBmdW5jdGlvbiBGYyhhKSB7aWYgKDEzID09PSBhLnRhZykge3ZhciBiID0gWmcoYSwgMTM0MjE3NzI4KTtpZiAobnVsbCAhPT0gYikge3ZhciBjID0gTCgpO21oKGIsIGEsIDEzNDIxNzcyOCwgYyk7fWpsKGEsIDEzNDIxNzcyOCk7fX07R2MgPSBmdW5jdGlvbiBHYyhhKSB7aWYgKDEzID09PSBhLnRhZykge3ZhciBiID0gbGgoYSksYyA9IFpnKGEsIGIpO2lmIChudWxsICE9PSBjKSB7dmFyIGQgPSBMKCk7bWgoYywgYSwgYiwgZCk7fWpsKGEsIGIpO319O0hjID0gZnVuY3Rpb24gSGMoKSB7cmV0dXJuIEM7fTtJYyA9IGZ1bmN0aW9uIEljKGEsIGIpIHt2YXIgYyA9IEM7dHJ5IHtyZXR1cm4gQyA9IGEsIGIoKTt9IGZpbmFsbHkge0MgPSBjO319OwogICAgICAgICAgeWIgPSBmdW5jdGlvbiB5YihhLCBiLCBjKSB7c3dpdGNoIChiKSB7Y2FzZSAiaW5wdXQiOmJiKGEsIGMpO2IgPSBjLm5hbWU7aWYgKCJyYWRpbyIgPT09IGMudHlwZSAmJiBudWxsICE9IGIpIHtmb3IgKGMgPSBhOyBjLnBhcmVudE5vZGU7KSBjID0gYy5wYXJlbnROb2RlO2MgPSBjLnF1ZXJ5U2VsZWN0b3JBbGwoImlucHV0W25hbWU9IiArIEpTT04uc3RyaW5naWZ5KCIiICsgYikgKyAnXVt0eXBlPSJyYWRpbyJdJyk7Zm9yIChiID0gMDsgYiA8IGMubGVuZ3RoOyBiKyspIHt2YXIgZCA9IGNbYl07aWYgKGQgIT09IGEgJiYgZC5mb3JtID09PSBhLmZvcm0pIHt2YXIgZSA9IERiKGQpO2lmICghZSkgdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsIGUpO319fWJyZWFrO2Nhc2UgInRleHRhcmVhIjppYihhLCBjKTticmVhaztjYXNlICJzZWxlY3QiOmIgPSBjLnZhbHVlLCBudWxsICE9IGIgJiYgZmIoYSwgISFjLm11bHRpcGxlLCBiLCAhMSk7fX07R2IgPSBSaztIYiA9IFNrOwogICAgICAgICAgdmFyIHRsID0geyB1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ICExLCBFdmVudHM6IFtDYiwgdWUsIERiLCBFYiwgRmIsIFJrXSB9LHVsID0geyBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogV2MsIGJ1bmRsZVR5cGU6IDAsIHZlcnNpb246ICIxOC4yLjAiLCByZW5kZXJlclBhY2thZ2VOYW1lOiAicmVhY3QtZG9tIiB9OwogICAgICAgICAgdmFyIHZsID0geyBidW5kbGVUeXBlOiB1bC5idW5kbGVUeXBlLCB2ZXJzaW9uOiB1bC52ZXJzaW9uLCByZW5kZXJlclBhY2thZ2VOYW1lOiB1bC5yZW5kZXJlclBhY2thZ2VOYW1lLCByZW5kZXJlckNvbmZpZzogdWwucmVuZGVyZXJDb25maWcsIG92ZXJyaWRlSG9va1N0YXRlOiBudWxsLCBvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6IG51bGwsIG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDogbnVsbCwgb3ZlcnJpZGVQcm9wczogbnVsbCwgb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6IG51bGwsIG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOiBudWxsLCBzZXRFcnJvckhhbmRsZXI6IG51bGwsIHNldFN1c3BlbnNlSGFuZGxlcjogbnVsbCwgc2NoZWR1bGVVcGRhdGU6IG51bGwsIGN1cnJlbnREaXNwYXRjaGVyUmVmOiB1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLCBmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjogZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIoYSkge2EgPSBaYihhKTtyZXR1cm4gbnVsbCA9PT0gYSA/IG51bGwgOiBhLnN0YXRlTm9kZTt9LCBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogdWwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UgfHwKICAgICAgICAgICAga2wsIGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDogbnVsbCwgc2NoZWR1bGVSZWZyZXNoOiBudWxsLCBzY2hlZHVsZVJvb3Q6IG51bGwsIHNldFJlZnJlc2hIYW5kbGVyOiBudWxsLCBnZXRDdXJyZW50RmliZXI6IG51bGwsIHJlY29uY2lsZXJWZXJzaW9uOiAiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4IiB9O2lmICgidW5kZWZpbmVkIiAhPT0gdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXykge3ZhciB3bCA9IF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZiAoIXdsLmlzRGlzYWJsZWQgJiYgd2wuc3VwcG9ydHNGaWJlcikgdHJ5IHtrYyA9IHdsLmluamVjdCh2bCksIGxjID0gd2w7fSBjYXRjaCAoYSkge319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCA9IHRsOwogICAgICAgICAgZXhwb3J0cy5jcmVhdGVQb3J0YWwgPSBmdW5jdGlvbiAoYSwgYikge3ZhciBjID0gMiA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsO2lmICghb2woYikpIHRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsIGIsIG51bGwsIGMpO307ZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24gKGEsIGIpIHtpZiAoIW9sKGEpKSB0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjID0gITEsZCA9ICIiLGUgPSBsbDtudWxsICE9PSBiICYmIHZvaWQgMCAhPT0gYiAmJiAoITAgPT09IGIudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoYyA9ICEwKSwgdm9pZCAwICE9PSBiLmlkZW50aWZpZXJQcmVmaXggJiYgKGQgPSBiLmlkZW50aWZpZXJQcmVmaXgpLCB2b2lkIDAgIT09IGIub25SZWNvdmVyYWJsZUVycm9yICYmIChlID0gYi5vblJlY292ZXJhYmxlRXJyb3IpKTtiID0gY2woYSwgMSwgITEsIG51bGwsIG51bGwsIGMsICExLCBkLCBlKTthW3VmXSA9IGIuY3VycmVudDtzZig4ID09PSBhLm5vZGVUeXBlID8gYS5wYXJlbnROb2RlIDogYSk7cmV0dXJuIG5ldyBtbChiKTt9OwogICAgICAgICAgZXhwb3J0cy5maW5kRE9NTm9kZSA9IGZ1bmN0aW9uIChhKSB7aWYgKG51bGwgPT0gYSkgcmV0dXJuIG51bGw7aWYgKDEgPT09IGEubm9kZVR5cGUpIHJldHVybiBhO3ZhciBiID0gYS5fcmVhY3RJbnRlcm5hbHM7aWYgKHZvaWQgMCA9PT0gYikge2lmICgiZnVuY3Rpb24iID09PSB0eXBlb2YgYS5yZW5kZXIpIHRocm93IEVycm9yKHAoMTg4KSk7YSA9IE9iamVjdC5rZXlzKGEpLmpvaW4oIiwiKTt0aHJvdyBFcnJvcihwKDI2OCwgYSkpO31hID0gWmIoYik7YSA9IG51bGwgPT09IGEgPyBudWxsIDogYS5zdGF0ZU5vZGU7cmV0dXJuIGE7fTtleHBvcnRzLmZsdXNoU3luYyA9IGZ1bmN0aW9uIChhKSB7cmV0dXJuIFNrKGEpO307ZXhwb3J0cy5oeWRyYXRlID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtpZiAoIXBsKGIpKSB0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLCBhLCBiLCAhMCwgYyk7fTsKICAgICAgICAgIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbiAoYSwgYiwgYykge2lmICghb2woYSkpIHRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQgPSBudWxsICE9IGMgJiYgYy5oeWRyYXRlZFNvdXJjZXMgfHwgbnVsbCxlID0gITEsZiA9ICIiLGcgPSBsbDtudWxsICE9PSBjICYmIHZvaWQgMCAhPT0gYyAmJiAoITAgPT09IGMudW5zdGFibGVfc3RyaWN0TW9kZSAmJiAoZSA9ICEwKSwgdm9pZCAwICE9PSBjLmlkZW50aWZpZXJQcmVmaXggJiYgKGYgPSBjLmlkZW50aWZpZXJQcmVmaXgpLCB2b2lkIDAgIT09IGMub25SZWNvdmVyYWJsZUVycm9yICYmIChnID0gYy5vblJlY292ZXJhYmxlRXJyb3IpKTtiID0gZmwoYiwgbnVsbCwgYSwgMSwgbnVsbCAhPSBjID8gYyA6IG51bGwsIGUsICExLCBmLCBnKTthW3VmXSA9IGIuY3VycmVudDtzZihhKTtpZiAoZCkgZm9yIChhID0gMDsgYSA8IGQubGVuZ3RoOyBhKyspIGMgPSBkW2FdLCBlID0gYy5fZ2V0VmVyc2lvbiwgZSA9IGUoYy5fc291cmNlKSwgbnVsbCA9PSBiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEgPyBiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEgPSBbYywgZV0gOiBiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLAogICAgICAgICAgICBlKTtyZXR1cm4gbmV3IG5sKGIpO307ZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbiAoYSwgYiwgYykge2lmICghcGwoYikpIHRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsIGEsIGIsICExLCBjKTt9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZSA9IGZ1bmN0aW9uIChhKSB7aWYgKCFwbChhKSkgdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXIgPyAoU2soZnVuY3Rpb24gKCkge3NsKG51bGwsIG51bGwsIGEsICExLCBmdW5jdGlvbiAoKSB7YS5fcmVhY3RSb290Q29udGFpbmVyID0gbnVsbDthW3VmXSA9IG51bGw7fSk7fSksICEwKSA6ICExO307ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyA9IFJrOwogICAgICAgICAgZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7aWYgKCFwbChjKSkgdGhyb3cgRXJyb3IocCgyMDApKTtpZiAobnVsbCA9PSBhIHx8IHZvaWQgMCA9PT0gYS5fcmVhY3RJbnRlcm5hbHMpIHRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSwgYiwgYywgITEsIGQpO307ZXhwb3J0cy52ZXJzaW9uID0gIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOCI7CgoKICAgICAgICAgIC8qKiovfSwKCiAgICAgICAgLyoqKi83NDU6CiAgICAgICAgLyoqKi8oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiAgICAgICAgICB2YXIgX193ZWJwYWNrX3VudXNlZF9leHBvcnRfXzsKCgogICAgICAgICAgdmFyIG0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzNSk7CiAgICAgICAgICBpZiAodHJ1ZSkgewogICAgICAgICAgICBleHBvcnRzLnMgPSBtLmNyZWF0ZVJvb3Q7CiAgICAgICAgICAgIF9fd2VicGFja191bnVzZWRfZXhwb3J0X18gPSBtLmh5ZHJhdGVSb290OwogICAgICAgICAgfSBlbHNlIHt2YXIgaTt9CgoKICAgICAgICAgIC8qKiovfSwKCiAgICAgICAgLyoqKi85MzU6CiAgICAgICAgLyoqKi8obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCgoKICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrRENFKCkgewogICAgICAgICAgICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovCiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHwKICAgICAgICAgICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgewogICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZmFsc2UpIHt9CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS4KICAgICAgICAgICAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpOwogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LgogICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuCiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHRydWUpIHsKICAgICAgICAgICAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0CiAgICAgICAgICAgIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLgogICAgICAgICAgICBjaGVja0RDRSgpOwogICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDQ4KTsKICAgICAgICAgIH0gZWxzZSB7fQoKCiAgICAgICAgICAvKioqL30sCgogICAgICAgIC8qKiovNDA4OgogICAgICAgIC8qKiovKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbGljZW5zZSBSZWFjdAogICAgICAgICAgICogcmVhY3QucHJvZHVjdGlvbi5taW4uanMKICAgICAgICAgICAqCiAgICAgICAgICAgKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4KICAgICAgICAgICAqCiAgICAgICAgICAgKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICAgICAgICAgICAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KICAgICAgICAgICAqLwogICAgICAgICAgdmFyIGwgPSBTeW1ib2wuZm9yKCJyZWFjdC5lbGVtZW50IiksbiA9IFN5bWJvbC5mb3IoInJlYWN0LnBvcnRhbCIpLHAgPSBTeW1ib2wuZm9yKCJyZWFjdC5mcmFnbWVudCIpLHEgPSBTeW1ib2wuZm9yKCJyZWFjdC5zdHJpY3RfbW9kZSIpLHIgPSBTeW1ib2wuZm9yKCJyZWFjdC5wcm9maWxlciIpLHQgPSBTeW1ib2wuZm9yKCJyZWFjdC5wcm92aWRlciIpLHUgPSBTeW1ib2wuZm9yKCJyZWFjdC5jb250ZXh0IiksdiA9IFN5bWJvbC5mb3IoInJlYWN0LmZvcndhcmRfcmVmIiksdyA9IFN5bWJvbC5mb3IoInJlYWN0LnN1c3BlbnNlIikseCA9IFN5bWJvbC5mb3IoInJlYWN0Lm1lbW8iKSx5ID0gU3ltYm9sLmZvcigicmVhY3QubGF6eSIpLHogPSBTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKSB7aWYgKG51bGwgPT09IGEgfHwgIm9iamVjdCIgIT09IHR5cGVvZiBhKSByZXR1cm4gbnVsbDthID0geiAmJiBhW3pdIHx8IGFbIkBAaXRlcmF0b3IiXTtyZXR1cm4gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGEgPyBhIDogbnVsbDt9CiAgICAgICAgICB2YXIgQiA9IHsgaXNNb3VudGVkOiBmdW5jdGlvbiBpc01vdW50ZWQoKSB7cmV0dXJuICExO30sIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gZW5xdWV1ZUZvcmNlVXBkYXRlKCkge30sIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIGVucXVldWVSZXBsYWNlU3RhdGUoKSB7fSwgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiBlbnF1ZXVlU2V0U3RhdGUoKSB7fSB9LEMgPSBPYmplY3QuYXNzaWduLEQgPSB7fTtmdW5jdGlvbiBFKGEsIGIsIGUpIHt0aGlzLnByb3BzID0gYTt0aGlzLmNvbnRleHQgPSBiO3RoaXMucmVmcyA9IEQ7dGhpcy51cGRhdGVyID0gZSB8fCBCO31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307CiAgICAgICAgICBFLnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChhLCBiKSB7aWYgKCJvYmplY3QiICE9PSB0eXBlb2YgYSAmJiAiZnVuY3Rpb24iICE9PSB0eXBlb2YgYSAmJiBudWxsICE9IGEpIHRocm93IEVycm9yKCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy4iKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIGEsIGIsICJzZXRTdGF0ZSIpO307RS5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoYSkge3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgYSwgImZvcmNlVXBkYXRlIik7fTtmdW5jdGlvbiBGKCkge31GLnByb3RvdHlwZSA9IEUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSwgYiwgZSkge3RoaXMucHJvcHMgPSBhO3RoaXMuY29udGV4dCA9IGI7dGhpcy5yZWZzID0gRDt0aGlzLnVwZGF0ZXIgPSBlIHx8IEI7fXZhciBIID0gRy5wcm90b3R5cGUgPSBuZXcgRigpOwogICAgICAgICAgSC5jb25zdHJ1Y3RvciA9IEc7QyhILCBFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudCA9ICEwO3ZhciBJID0gQXJyYXkuaXNBcnJheSxKID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLID0geyBjdXJyZW50OiBudWxsIH0sTCA9IHsga2V5OiAhMCwgcmVmOiAhMCwgX19zZWxmOiAhMCwgX19zb3VyY2U6ICEwIH07CiAgICAgICAgICBmdW5jdGlvbiBNKGEsIGIsIGUpIHt2YXIgZCxjID0ge30sayA9IG51bGwsaCA9IG51bGw7aWYgKG51bGwgIT0gYikgZm9yIChkIGluIHZvaWQgMCAhPT0gYi5yZWYgJiYgKGggPSBiLnJlZiksIHZvaWQgMCAhPT0gYi5rZXkgJiYgKGsgPSAiIiArIGIua2V5KSwgYikgSi5jYWxsKGIsIGQpICYmICFMLmhhc093blByb3BlcnR5KGQpICYmIChjW2RdID0gYltkXSk7dmFyIGcgPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtpZiAoMSA9PT0gZykgYy5jaGlsZHJlbiA9IGU7ZWxzZSBpZiAoMSA8IGcpIHtmb3IgKHZhciBmID0gQXJyYXkoZyksIG0gPSAwOyBtIDwgZzsgbSsrKSBmW21dID0gYXJndW1lbnRzW20gKyAyXTtjLmNoaWxkcmVuID0gZjt9aWYgKGEgJiYgYS5kZWZhdWx0UHJvcHMpIGZvciAoZCBpbiBnID0gYS5kZWZhdWx0UHJvcHMsIGcpIHZvaWQgMCA9PT0gY1tkXSAmJiAoY1tkXSA9IGdbZF0pO3JldHVybiB7ICQkdHlwZW9mOiBsLCB0eXBlOiBhLCBrZXk6IGssIHJlZjogaCwgcHJvcHM6IGMsIF9vd25lcjogSy5jdXJyZW50IH07fQogICAgICAgICAgZnVuY3Rpb24gTihhLCBiKSB7cmV0dXJuIHsgJCR0eXBlb2Y6IGwsIHR5cGU6IGEudHlwZSwga2V5OiBiLCByZWY6IGEucmVmLCBwcm9wczogYS5wcm9wcywgX293bmVyOiBhLl9vd25lciB9O31mdW5jdGlvbiBPKGEpIHtyZXR1cm4gIm9iamVjdCIgPT09IHR5cGVvZiBhICYmIG51bGwgIT09IGEgJiYgYS4kJHR5cGVvZiA9PT0gbDt9ZnVuY3Rpb24gZXNjYXBlKGEpIHt2YXIgYiA9IHsgIj0iOiAiPTAiLCAiOiI6ICI9MiIgfTtyZXR1cm4gIiQiICsgYS5yZXBsYWNlKC9bPTpdL2csIGZ1bmN0aW9uIChhKSB7cmV0dXJuIGJbYV07fSk7fXZhciBQID0gL1wvKy9nO2Z1bmN0aW9uIFEoYSwgYikge3JldHVybiAib2JqZWN0IiA9PT0gdHlwZW9mIGEgJiYgbnVsbCAhPT0gYSAmJiBudWxsICE9IGEua2V5ID8gZXNjYXBlKCIiICsgYS5rZXkpIDogYi50b1N0cmluZygzNik7fQogICAgICAgICAgZnVuY3Rpb24gUihhLCBiLCBlLCBkLCBjKSB7dmFyIGsgPSB0eXBlb2YgYTtpZiAoInVuZGVmaW5lZCIgPT09IGsgfHwgImJvb2xlYW4iID09PSBrKSBhID0gbnVsbDt2YXIgaCA9ICExO2lmIChudWxsID09PSBhKSBoID0gITA7ZWxzZSBzd2l0Y2ggKGspIHtjYXNlICJzdHJpbmciOmNhc2UgIm51bWJlciI6aCA9ICEwO2JyZWFrO2Nhc2UgIm9iamVjdCI6c3dpdGNoIChhLiQkdHlwZW9mKSB7Y2FzZSBsOmNhc2UgbjpoID0gITA7fX1pZiAoaCkgcmV0dXJuIGggPSBhLCBjID0gYyhoKSwgYSA9ICIiID09PSBkID8gIi4iICsgUShoLCAwKSA6IGQsIEkoYykgPyAoZSA9ICIiLCBudWxsICE9IGEgJiYgKGUgPSBhLnJlcGxhY2UoUCwgIiQmLyIpICsgIi8iKSwgUihjLCBiLCBlLCAiIiwgZnVuY3Rpb24gKGEpIHtyZXR1cm4gYTt9KSkgOiBudWxsICE9IGMgJiYgKE8oYykgJiYgKGMgPSBOKGMsIGUgKyAoIWMua2V5IHx8IGggJiYgaC5rZXkgPT09IGMua2V5ID8gIiIgOiAoIiIgKyBjLmtleSkucmVwbGFjZShQLCAiJCYvIikgKyAiLyIpICsgYSkpLCBiLnB1c2goYykpLCAxO2ggPSAwO2QgPSAiIiA9PT0gZCA/ICIuIiA6IGQgKyAiOiI7aWYgKEkoYSkpIGZvciAodmFyIGcgPSAwOyBnIDwgYS5sZW5ndGg7IGcrKykge2sgPQogICAgICAgICAgICAgIGFbZ107dmFyIGYgPSBkICsgUShrLCBnKTtoICs9IFIoaywgYiwgZSwgZiwgYyk7fSBlbHNlIGlmIChmID0gQShhKSwgImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGYpIGZvciAoYSA9IGYuY2FsbChhKSwgZyA9IDA7ICEoayA9IGEubmV4dCgpKS5kb25lOykgayA9IGsudmFsdWUsIGYgPSBkICsgUShrLCBnKyspLCBoICs9IFIoaywgYiwgZSwgZiwgYyk7ZWxzZSBpZiAoIm9iamVjdCIgPT09IGspIHRocm93IGIgPSBTdHJpbmcoYSksIEVycm9yKCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICIgKyAoIltvYmplY3QgT2JqZWN0XSIgPT09IGIgPyAib2JqZWN0IHdpdGgga2V5cyB7IiArIE9iamVjdC5rZXlzKGEpLmpvaW4oIiwgIikgKyAifSIgOiBiKSArICIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuIik7cmV0dXJuIGg7fQogICAgICAgICAgZnVuY3Rpb24gUyhhLCBiLCBlKSB7aWYgKG51bGwgPT0gYSkgcmV0dXJuIGE7dmFyIGQgPSBbXSxjID0gMDtSKGEsIGQsICIiLCAiIiwgZnVuY3Rpb24gKGEpIHtyZXR1cm4gYi5jYWxsKGUsIGEsIGMrKyk7fSk7cmV0dXJuIGQ7fWZ1bmN0aW9uIFQoYSkge2lmICgtMSA9PT0gYS5fc3RhdHVzKSB7dmFyIGIgPSBhLl9yZXN1bHQ7YiA9IGIoKTtiLnRoZW4oZnVuY3Rpb24gKGIpIHtpZiAoMCA9PT0gYS5fc3RhdHVzIHx8IC0xID09PSBhLl9zdGF0dXMpIGEuX3N0YXR1cyA9IDEsIGEuX3Jlc3VsdCA9IGI7fSwgZnVuY3Rpb24gKGIpIHtpZiAoMCA9PT0gYS5fc3RhdHVzIHx8IC0xID09PSBhLl9zdGF0dXMpIGEuX3N0YXR1cyA9IDIsIGEuX3Jlc3VsdCA9IGI7fSk7LTEgPT09IGEuX3N0YXR1cyAmJiAoYS5fc3RhdHVzID0gMCwgYS5fcmVzdWx0ID0gYik7fWlmICgxID09PSBhLl9zdGF0dXMpIHJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fQogICAgICAgICAgdmFyIFUgPSB7IGN1cnJlbnQ6IG51bGwgfSxWID0geyB0cmFuc2l0aW9uOiBudWxsIH0sVyA9IHsgUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjogVSwgUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6IFYsIFJlYWN0Q3VycmVudE93bmVyOiBLIH07ZXhwb3J0cy5DaGlsZHJlbiA9IHsgbWFwOiBTLCBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGEsIGIsIGUpIHtTKGEsIGZ1bmN0aW9uICgpIHtiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fSwgZSk7fSwgY291bnQ6IGZ1bmN0aW9uIGNvdW50KGEpIHt2YXIgYiA9IDA7UyhhLCBmdW5jdGlvbiAoKSB7YisrO30pO3JldHVybiBiO30sIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoYSkge3JldHVybiBTKGEsIGZ1bmN0aW9uIChhKSB7cmV0dXJuIGE7fSkgfHwgW107fSwgb25seTogZnVuY3Rpb24gb25seShhKSB7aWYgKCFPKGEpKSB0aHJvdyBFcnJvcigiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuIik7cmV0dXJuIGE7fSB9O2V4cG9ydHMuQ29tcG9uZW50ID0gRTtleHBvcnRzLkZyYWdtZW50ID0gcDsKICAgICAgICAgIGV4cG9ydHMuUHJvZmlsZXIgPSByO2V4cG9ydHMuUHVyZUNvbXBvbmVudCA9IEc7ZXhwb3J0cy5TdHJpY3RNb2RlID0gcTtleHBvcnRzLlN1c3BlbnNlID0gdztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEID0gVzsKICAgICAgICAgIGV4cG9ydHMuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGUpIHtpZiAobnVsbCA9PT0gYSB8fCB2b2lkIDAgPT09IGEpIHRocm93IEVycm9yKCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCAiICsgYSArICIuIik7dmFyIGQgPSBDKHt9LCBhLnByb3BzKSxjID0gYS5rZXksayA9IGEucmVmLGggPSBhLl9vd25lcjtpZiAobnVsbCAhPSBiKSB7dm9pZCAwICE9PSBiLnJlZiAmJiAoayA9IGIucmVmLCBoID0gSy5jdXJyZW50KTt2b2lkIDAgIT09IGIua2V5ICYmIChjID0gIiIgKyBiLmtleSk7aWYgKGEudHlwZSAmJiBhLnR5cGUuZGVmYXVsdFByb3BzKSB2YXIgZyA9IGEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yIChmIGluIGIpIEouY2FsbChiLCBmKSAmJiAhTC5oYXNPd25Qcm9wZXJ0eShmKSAmJiAoZFtmXSA9IHZvaWQgMCA9PT0gYltmXSAmJiB2b2lkIDAgIT09IGcgPyBnW2ZdIDogYltmXSk7fXZhciBmID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7aWYgKDEgPT09IGYpIGQuY2hpbGRyZW4gPSBlO2Vsc2UgaWYgKDEgPCBmKSB7ZyA9IEFycmF5KGYpOwogICAgICAgICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgZjsgbSsrKSBnW21dID0gYXJndW1lbnRzW20gKyAyXTtkLmNoaWxkcmVuID0gZzt9cmV0dXJuIHsgJCR0eXBlb2Y6IGwsIHR5cGU6IGEudHlwZSwga2V5OiBjLCByZWY6IGssIHByb3BzOiBkLCBfb3duZXI6IGggfTt9O2V4cG9ydHMuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChhKSB7YSA9IHsgJCR0eXBlb2Y6IHUsIF9jdXJyZW50VmFsdWU6IGEsIF9jdXJyZW50VmFsdWUyOiBhLCBfdGhyZWFkQ291bnQ6IDAsIFByb3ZpZGVyOiBudWxsLCBDb25zdW1lcjogbnVsbCwgX2RlZmF1bHRWYWx1ZTogbnVsbCwgX2dsb2JhbE5hbWU6IG51bGwgfTthLlByb3ZpZGVyID0geyAkJHR5cGVvZjogdCwgX2NvbnRleHQ6IGEgfTtyZXR1cm4gYS5Db25zdW1lciA9IGE7fTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBNO2V4cG9ydHMuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uIChhKSB7dmFyIGIgPSBNLmJpbmQobnVsbCwgYSk7Yi50eXBlID0gYTtyZXR1cm4gYjt9O2V4cG9ydHMuY3JlYXRlUmVmID0gZnVuY3Rpb24gKCkge3JldHVybiB7IGN1cnJlbnQ6IG51bGwgfTt9OwogICAgICAgICAgZXhwb3J0cy5mb3J3YXJkUmVmID0gZnVuY3Rpb24gKGEpIHtyZXR1cm4geyAkJHR5cGVvZjogdiwgcmVuZGVyOiBhIH07fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50ID0gTztleHBvcnRzLmxhenkgPSBmdW5jdGlvbiAoYSkge3JldHVybiB7ICQkdHlwZW9mOiB5LCBfcGF5bG9hZDogeyBfc3RhdHVzOiAtMSwgX3Jlc3VsdDogYSB9LCBfaW5pdDogVCB9O307ZXhwb3J0cy5tZW1vID0gZnVuY3Rpb24gKGEsIGIpIHtyZXR1cm4geyAkJHR5cGVvZjogeCwgdHlwZTogYSwgY29tcGFyZTogdm9pZCAwID09PSBiID8gbnVsbCA6IGIgfTt9O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKGEpIHt2YXIgYiA9IFYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb24gPSB7fTt0cnkge2EoKTt9IGZpbmFsbHkge1YudHJhbnNpdGlvbiA9IGI7fX07ZXhwb3J0cy51bnN0YWJsZV9hY3QgPSBmdW5jdGlvbiAoKSB7dGhyb3cgRXJyb3IoImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuIik7fTsKICAgICAgICAgIGV4cG9ydHMudXNlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoYSwgYikge3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSwgYik7fTtleHBvcnRzLnVzZUNvbnRleHQgPSBmdW5jdGlvbiAoYSkge3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKTt9O2V4cG9ydHMudXNlRGVidWdWYWx1ZSA9IGZ1bmN0aW9uICgpIHt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZSA9IGZ1bmN0aW9uIChhKSB7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpO307ZXhwb3J0cy51c2VFZmZlY3QgPSBmdW5jdGlvbiAoYSwgYikge3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsIGIpO307ZXhwb3J0cy51c2VJZCA9IGZ1bmN0aW9uICgpIHtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCk7fTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGUgPSBmdW5jdGlvbiAoYSwgYiwgZSkge3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLCBiLCBlKTt9OwogICAgICAgICAgZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3QgPSBmdW5jdGlvbiAoYSwgYikge3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsIGIpO307ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3QgPSBmdW5jdGlvbiAoYSwgYikge3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsIGIpO307ZXhwb3J0cy51c2VNZW1vID0gZnVuY3Rpb24gKGEsIGIpIHtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSwgYik7fTtleHBvcnRzLnVzZVJlZHVjZXIgPSBmdW5jdGlvbiAoYSwgYiwgZSkge3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLCBiLCBlKTt9O2V4cG9ydHMudXNlUmVmID0gZnVuY3Rpb24gKGEpIHtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKTt9O2V4cG9ydHMudXNlU3RhdGUgPSBmdW5jdGlvbiAoYSkge3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSk7fTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZnVuY3Rpb24gKGEsIGIsIGUpIHtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsIGIsIGUpO307CiAgICAgICAgICBleHBvcnRzLnVzZVRyYW5zaXRpb24gPSBmdW5jdGlvbiAoKSB7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCk7fTtleHBvcnRzLnZlcnNpb24gPSAiMTguMi4wIjsKCgogICAgICAgICAgLyoqKi99LAoKICAgICAgICAvKioqLzI5NDoKICAgICAgICAvKioqLyhtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKCgogICAgICAgICAgaWYgKHRydWUpIHsKICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwOCk7CiAgICAgICAgICB9IGVsc2Uge30KCgogICAgICAgICAgLyoqKi99LAoKICAgICAgICAvKioqLzUzOgogICAgICAgIC8qKiovKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7CgogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBAbGljZW5zZSBSZWFjdAogICAgICAgICAgICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzCiAgICAgICAgICAgKgogICAgICAgICAgICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuCiAgICAgICAgICAgKgogICAgICAgICAgICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiAgICAgICAgICAgKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAgICAgICAgICAgKi8KICAgICAgICAgIGZ1bmN0aW9uIGYoYSwgYikge3ZhciBjID0gYS5sZW5ndGg7YS5wdXNoKGIpO2E6IGZvciAoOyAwIDwgYzspIHt2YXIgZCA9IGMgLSAxID4+PiAxLGUgPSBhW2RdO2lmICgwIDwgZyhlLCBiKSkgYVtkXSA9IGIsIGFbY10gPSBlLCBjID0gZDtlbHNlIGJyZWFrIGE7fX1mdW5jdGlvbiBoKGEpIHtyZXR1cm4gMCA9PT0gYS5sZW5ndGggPyBudWxsIDogYVswXTt9ZnVuY3Rpb24gayhhKSB7aWYgKDAgPT09IGEubGVuZ3RoKSByZXR1cm4gbnVsbDt2YXIgYiA9IGFbMF0sYyA9IGEucG9wKCk7aWYgKGMgIT09IGIpIHthWzBdID0gYzthOiBmb3IgKHZhciBkID0gMCwgZSA9IGEubGVuZ3RoLCB3ID0gZSA+Pj4gMTsgZCA8IHc7KSB7dmFyIG0gPSAyICogKGQgKyAxKSAtIDEsQyA9IGFbbV0sbiA9IG0gKyAxLHggPSBhW25dO2lmICgwID4gZyhDLCBjKSkgbiA8IGUgJiYgMCA+IGcoeCwgQykgPyAoYVtkXSA9IHgsIGFbbl0gPSBjLCBkID0gbikgOiAoYVtkXSA9IEMsIGFbbV0gPSBjLCBkID0gbSk7ZWxzZSBpZiAobiA8IGUgJiYgMCA+IGcoeCwgYykpIGFbZF0gPSB4LCBhW25dID0gYywgZCA9IG47ZWxzZSBicmVhayBhO319cmV0dXJuIGI7fQogICAgICAgICAgZnVuY3Rpb24gZyhhLCBiKSB7dmFyIGMgPSBhLnNvcnRJbmRleCAtIGIuc29ydEluZGV4O3JldHVybiAwICE9PSBjID8gYyA6IGEuaWQgLSBiLmlkO31pZiAoIm9iamVjdCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZSAmJiAiZnVuY3Rpb24iID09PSB0eXBlb2YgcGVyZm9ybWFuY2Uubm93KSB7dmFyIGwgPSBwZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdyA9IGZ1bmN0aW9uICgpIHtyZXR1cm4gbC5ub3coKTt9O30gZWxzZSB7dmFyIHAgPSBEYXRlLHEgPSBwLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge3JldHVybiBwLm5vdygpIC0gcTt9O312YXIgciA9IFtdLHQgPSBbXSx1ID0gMSx2ID0gbnVsbCx5ID0gMyx6ID0gITEsQSA9ICExLEIgPSAhMSxEID0gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIHNldFRpbWVvdXQgPyBzZXRUaW1lb3V0IDogbnVsbCxFID0gImZ1bmN0aW9uIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IG51bGwsRiA9ICJ1bmRlZmluZWQiICE9PSB0eXBlb2Ygc2V0SW1tZWRpYXRlID8gc2V0SW1tZWRpYXRlIDogbnVsbDsKICAgICAgICAgICJ1bmRlZmluZWQiICE9PSB0eXBlb2YgbmF2aWdhdG9yICYmIHZvaWQgMCAhPT0gbmF2aWdhdG9yLnNjaGVkdWxpbmcgJiYgdm9pZCAwICE9PSBuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyAmJiBuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpIHtmb3IgKHZhciBiID0gaCh0KTsgbnVsbCAhPT0gYjspIHtpZiAobnVsbCA9PT0gYi5jYWxsYmFjaykgayh0KTtlbHNlIGlmIChiLnN0YXJ0VGltZSA8PSBhKSBrKHQpLCBiLnNvcnRJbmRleCA9IGIuZXhwaXJhdGlvblRpbWUsIGYociwgYik7ZWxzZSBicmVhaztiID0gaCh0KTt9fWZ1bmN0aW9uIEgoYSkge0IgPSAhMTtHKGEpO2lmICghQSkgaWYgKG51bGwgIT09IGgocikpIEEgPSAhMCwgSShKKTtlbHNlIHt2YXIgYiA9IGgodCk7bnVsbCAhPT0gYiAmJiBLKEgsIGIuc3RhcnRUaW1lIC0gYSk7fX0KICAgICAgICAgIGZ1bmN0aW9uIEooYSwgYikge0EgPSAhMTtCICYmIChCID0gITEsIEUoTCksIEwgPSAtMSk7eiA9ICEwO3ZhciBjID0geTt0cnkge0coYik7Zm9yICh2ID0gaChyKTsgbnVsbCAhPT0gdiAmJiAoISh2LmV4cGlyYXRpb25UaW1lID4gYikgfHwgYSAmJiAhTSgpKTspIHt2YXIgZCA9IHYuY2FsbGJhY2s7aWYgKCJmdW5jdGlvbiIgPT09IHR5cGVvZiBkKSB7di5jYWxsYmFjayA9IG51bGw7eSA9IHYucHJpb3JpdHlMZXZlbDt2YXIgZSA9IGQodi5leHBpcmF0aW9uVGltZSA8PSBiKTtiID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTsiZnVuY3Rpb24iID09PSB0eXBlb2YgZSA/IHYuY2FsbGJhY2sgPSBlIDogdiA9PT0gaChyKSAmJiBrKHIpO0coYik7fSBlbHNlIGsocik7diA9IGgocik7fWlmIChudWxsICE9PSB2KSB2YXIgdyA9ICEwO2Vsc2Uge3ZhciBtID0gaCh0KTtudWxsICE9PSBtICYmIEsoSCwgbS5zdGFydFRpbWUgLSBiKTt3ID0gITE7fXJldHVybiB3O30gZmluYWxseSB7diA9IG51bGwsIHkgPSBjLCB6ID0gITE7fX12YXIgTiA9ICExLE8gPSBudWxsLEwgPSAtMSxQID0gNSxRID0gLTE7CiAgICAgICAgICBmdW5jdGlvbiBNKCkge3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpIC0gUSA8IFAgPyAhMSA6ICEwO31mdW5jdGlvbiBSKCkge2lmIChudWxsICE9PSBPKSB7dmFyIGEgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1EgPSBhO3ZhciBiID0gITA7dHJ5IHtiID0gTyghMCwgYSk7fSBmaW5hbGx5IHtiID8gUygpIDogKE4gPSAhMSwgTyA9IG51bGwpO319IGVsc2UgTiA9ICExO312YXIgUztpZiAoImZ1bmN0aW9uIiA9PT0gdHlwZW9mIEYpIFMgPSBmdW5jdGlvbiBTKCkge0YoUik7fTtlbHNlIGlmICgidW5kZWZpbmVkIiAhPT0gdHlwZW9mIE1lc3NhZ2VDaGFubmVsKSB7dmFyIFQgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKSxVID0gVC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZSA9IFI7UyA9IGZ1bmN0aW9uIFMoKSB7VS5wb3N0TWVzc2FnZShudWxsKTt9O30gZWxzZSBTID0gZnVuY3Rpb24gUygpIHtEKFIsIDApO307ZnVuY3Rpb24gSShhKSB7TyA9IGE7TiB8fCAoTiA9ICEwLCBTKCkpO31mdW5jdGlvbiBLKGEsIGIpIHtMID0gRChmdW5jdGlvbiAoKSB7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKTt9LCBiKTt9CiAgICAgICAgICBleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eSA9IDU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSA9IDE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eSA9IDQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSA9IDM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmcgPSBudWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkgPSAyO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoYSkge2EuY2FsbGJhY2sgPSBudWxsO307ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiA9IGZ1bmN0aW9uICgpIHtBIHx8IHogfHwgKEEgPSAhMCwgSShKKSk7fTsKICAgICAgICAgIGV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGUgPSBmdW5jdGlvbiAoYSkgezAgPiBhIHx8IDEyNSA8IGEgPyBjb25zb2xlLmVycm9yKCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWQiKSA6IFAgPSAwIDwgYSA/IE1hdGguZmxvb3IoMUUzIC8gYSkgOiA1O307ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCA9IGZ1bmN0aW9uICgpIHtyZXR1cm4geTt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUgPSBmdW5jdGlvbiAoKSB7cmV0dXJuIGgocik7fTtleHBvcnRzLnVuc3RhYmxlX25leHQgPSBmdW5jdGlvbiAoYSkge3N3aXRjaCAoeSkge2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiID0gMzticmVhaztkZWZhdWx0OmIgPSB5O312YXIgYyA9IHk7eSA9IGI7dHJ5IHtyZXR1cm4gYSgpO30gZmluYWxseSB7eSA9IGM7fX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiA9IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQgPSBmdW5jdGlvbiAoKSB7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSA9IGZ1bmN0aW9uIChhLCBiKSB7c3dpdGNoIChhKSB7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmEgPSAzO312YXIgYyA9IHk7eSA9IGE7dHJ5IHtyZXR1cm4gYigpO30gZmluYWxseSB7eSA9IGM7fX07CiAgICAgICAgICBleHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoYSwgYiwgYykge3ZhciBkID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTsib2JqZWN0IiA9PT0gdHlwZW9mIGMgJiYgbnVsbCAhPT0gYyA/IChjID0gYy5kZWxheSwgYyA9ICJudW1iZXIiID09PSB0eXBlb2YgYyAmJiAwIDwgYyA/IGQgKyBjIDogZCkgOiBjID0gZDtzd2l0Y2ggKGEpIHtjYXNlIDE6dmFyIGUgPSAtMTticmVhaztjYXNlIDI6ZSA9IDI1MDticmVhaztjYXNlIDU6ZSA9IDEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmUgPSAxRTQ7YnJlYWs7ZGVmYXVsdDplID0gNUUzO31lID0gYyArIGU7YSA9IHsgaWQ6IHUrKywgY2FsbGJhY2s6IGIsIHByaW9yaXR5TGV2ZWw6IGEsIHN0YXJ0VGltZTogYywgZXhwaXJhdGlvblRpbWU6IGUsIHNvcnRJbmRleDogLTEgfTtjID4gZCA/IChhLnNvcnRJbmRleCA9IGMsIGYodCwgYSksIG51bGwgPT09IGgocikgJiYgYSA9PT0gaCh0KSAmJiAoQiA/IChFKEwpLCBMID0gLTEpIDogQiA9ICEwLCBLKEgsIGMgLSBkKSkpIDogKGEuc29ydEluZGV4ID0gZSwgZihyLCBhKSwgQSB8fCB6IHx8IChBID0gITAsIEkoSikpKTtyZXR1cm4gYTt9OwogICAgICAgICAgZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCA9IE07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2sgPSBmdW5jdGlvbiAoYSkge3ZhciBiID0geTtyZXR1cm4gZnVuY3Rpb24gKCkge3ZhciBjID0geTt5ID0gYjt0cnkge3JldHVybiBhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7fSBmaW5hbGx5IHt5ID0gYzt9fTt9OwoKCiAgICAgICAgICAvKioqL30sCgogICAgICAgIC8qKiovODQwOgogICAgICAgIC8qKiovKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoKCiAgICAgICAgICBpZiAodHJ1ZSkgewogICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTMpOwogICAgICAgICAgfSBlbHNlIHt9CgoKICAgICAgICAgIC8qKiovfQoKICAgICAgICAvKioqKioqLyB9OwogICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogICAgICAvKioqKioqLyAvLyBUaGUgbW9kdWxlIGNhY2hlCiAgICAgIC8qKioqKiovdmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9OwogICAgICAvKioqKioqLwogICAgICAvKioqKioqLyAvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgogICAgICAvKioqKioqL2Z1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHsKICAgICAgICAvKioqKioqLyAvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKICAgICAgICAvKioqKioqL3ZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdOwogICAgICAgIC8qKioqKiovaWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAvKioqKioqL3JldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0czsKICAgICAgICAgIC8qKioqKiovfQogICAgICAgIC8qKioqKiovIC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCiAgICAgICAgLyoqKioqKi92YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHsKICAgICAgICAgIC8qKioqKiovIC8vIG5vIG1vZHVsZS5pZCBuZWVkZWQKICAgICAgICAgIC8qKioqKiovIC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkCiAgICAgICAgICAvKioqKioqL2V4cG9ydHM6IHt9CiAgICAgICAgICAvKioqKioqLyB9OwogICAgICAgIC8qKioqKiovCiAgICAgICAgLyoqKioqKi8gLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCiAgICAgICAgLyoqKioqKi9fX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKICAgICAgICAvKioqKioqLwogICAgICAgIC8qKioqKiovIC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCiAgICAgICAgLyoqKioqKi9yZXR1cm4gbW9kdWxlLmV4cG9ydHM7CiAgICAgICAgLyoqKioqKi99CiAgICAgIC8qKioqKiovCiAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAgICAgIC8qKioqKiovIC8qIHdlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovCiAgICAgIC8qKioqKiovKCgpID0+IHsKICAgICAgICAvKioqKioqL3ZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopIDogKG9iaikgPT4gb2JqLl9fcHJvdG9fXzsKICAgICAgICAvKioqKioqL3ZhciBsZWFmUHJvdG90eXBlczsKICAgICAgICAvKioqKioqLyAvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3QKICAgICAgICAvKioqKioqLyAvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXQKICAgICAgICAvKioqKioqLyAvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnMKICAgICAgICAvKioqKioqLyAvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3QKICAgICAgICAvKioqKioqLyAvLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlCiAgICAgICAgLyoqKioqKi8gLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZQogICAgICAgIC8qKioqKiovX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24gKHZhbHVlLCBtb2RlKSB7CiAgICAgICAgICAvKioqKioqL2lmIChtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTsKICAgICAgICAgIC8qKioqKiovaWYgKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7CiAgICAgICAgICAvKioqKioqL2lmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7CiAgICAgICAgICAgIC8qKioqKiovaWYgKG1vZGUgJiA0ICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgLyoqKioqKi9pZiAobW9kZSAmIDE2ICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIC8qKioqKiovfQogICAgICAgICAgLyoqKioqKi92YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgICAgLyoqKioqKi9fX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpOwogICAgICAgICAgLyoqKioqKi92YXIgZGVmID0ge307CiAgICAgICAgICAvKioqKioqL2xlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldOwogICAgICAgICAgLyoqKioqKi9mb3IgKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7CiAgICAgICAgICAgIC8qKioqKiovT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiBkZWZba2V5XSA9ICgpID0+IHZhbHVlW2tleV0pOwogICAgICAgICAgICAvKioqKioqL30KICAgICAgICAgIC8qKioqKiovZGVmWydkZWZhdWx0J10gPSAoKSA9PiB2YWx1ZTsKICAgICAgICAgIC8qKioqKiovX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpOwogICAgICAgICAgLyoqKioqKi9yZXR1cm4gbnM7CiAgICAgICAgICAvKioqKioqL307CiAgICAgICAgLyoqKioqKi99KSgpOwogICAgICAvKioqKioqLwogICAgICAvKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi8KICAgICAgLyoqKioqKi8oKCkgPT4gewogICAgICAgIC8qKioqKiovIC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHMKICAgICAgICAvKioqKioqL19fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7CiAgICAgICAgICAvKioqKioqL2ZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7CiAgICAgICAgICAgIC8qKioqKiovaWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkgewogICAgICAgICAgICAgIC8qKioqKiovT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTsKICAgICAgICAgICAgICAvKioqKioqL30KICAgICAgICAgICAgLyoqKioqKi99CiAgICAgICAgICAvKioqKioqL307CiAgICAgICAgLyoqKioqKi99KSgpOwogICAgICAvKioqKioqLwogICAgICAvKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovCiAgICAgIC8qKioqKiovKCgpID0+IHsKICAgICAgICAvKioqKioqL19fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOwogICAgICAgIC8qKioqKiovfSkoKTsKICAgICAgLyoqKioqKi8KICAgICAgLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqLwogICAgICAvKioqKioqLygoKSA9PiB7CiAgICAgICAgLyoqKioqKi8gLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0cwogICAgICAgIC8qKioqKiovX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHsKICAgICAgICAgIC8qKioqKiovaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykgewogICAgICAgICAgICAvKioqKioqL09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pOwogICAgICAgICAgICAvKioqKioqL30KICAgICAgICAgIC8qKioqKiovT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTsKICAgICAgICAgIC8qKioqKiovfTsKICAgICAgICAvKioqKioqL30pKCk7CiAgICAgIC8qKioqKiovCiAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAgICAgIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307CiAgICAgIC8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuCiAgICAgICgoKSA9PiB7CiAgICAgICAgX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwogICAgICAgIC8qIGhhcm1vbnkgaW1wb3J0ICovdmFyIF9BcHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODg3KTsKICAgICAgICAvKiBoYXJtb255IGltcG9ydCAqL3ZhciByZWFjdF9kb21fY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0NSk7CiAgICAgICAgLyogaGFybW9ueSBpbXBvcnQgKi92YXIgcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjk0KTsKICAgICAgICBmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge3ZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvWyJAQGl0ZXJhdG9yIl07aWYgKCFpdCkge2lmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09ICJudW1iZXIiKSB7aWYgKGl0KSBvID0gaXQ7dmFyIGkgPSAwO3ZhciBGID0gZnVuY3Rpb24gRigpIHt9O3JldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7aWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTtyZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9O30sIGU6IGZ1bmN0aW9uIGUoX2UpIHt0aHJvdyBfZTt9LCBmOiBGIH07fXRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTt9dmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLGRpZEVyciA9IGZhbHNlLGVycjtyZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkge2l0ID0gaXQuY2FsbChvKTt9LCBuOiBmdW5jdGlvbiBuKCkge3ZhciBzdGVwID0gaXQubmV4dCgpO25vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7cmV0dXJuIHN0ZXA7fSwgZTogZnVuY3Rpb24gZShfZTIpIHtkaWRFcnIgPSB0cnVlO2VyciA9IF9lMjt9LCBmOiBmdW5jdGlvbiBmKCkge3RyeSB7aWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0WyJyZXR1cm4iXSAhPSBudWxsKSBpdFsicmV0dXJuIl0oKTt9IGZpbmFsbHkge2lmIChkaWRFcnIpIHRocm93IGVycjt9fSB9O31mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7aWYgKCFvKSByZXR1cm47aWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7dmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO2lmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO2lmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7aWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTt9ZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07cmV0dXJuIGFycjI7fQoKCgoKCiAgICAgICAgZ2V0RGF0YShmdW5jdGlvbiAocGFnZXMpIHt2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoCiAgICAgICAgICAgIHBhZ2VzKSxfc3RlcDt0cnkge2ZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7dmFyIHBhZ2UgPSBfc3RlcC52YWx1ZTsKICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hcnIgPSBwYWdlLmNvbXBvbmVudHM7IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHt2YXIgY29tcG9uZW50ID0gX2FycltfaV07CiAgICAgICAgICAgICAgICBjb21wb25lbnQucHJldmlvdXNWYWx1ZSA9IGNvbXBvbmVudC52YWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50LnZhbGlkYXRlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgY29tcG9uZW50LnZhbGlkYXRlID0gZXZhbChjb21wb25lbnQudmFsaWRhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfX0gY2F0Y2ggKGVycikge19pdGVyYXRvci5lKGVycik7fSBmaW5hbGx5IHtfaXRlcmF0b3IuZigpO30KCiAgICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInJvb3QiKTsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uCiAgICAgICAgICB2YXIgcm9vdCA9ICgwLCByZWFjdF9kb21fY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gLyogLmNyZWF0ZVJvb3QgKi8ucykoY29udGFpbmVyKTsKICAgICAgICAgIHJvb3QucmVuZGVyKCAvKiNfX1BVUkVfXyovcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5jcmVhdGVFbGVtZW50KF9BcHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyAvKiBbImRlZmF1bHQiXSAqLy5aLCB7IHBhZ2VzOiBwYWdlcyB9KSk7CiAgICAgICAgfSk7CiAgICAgIH0pKCk7CgogICAgICAvKioqKioqL3JldHVybiBfX3dlYnBhY2tfZXhwb3J0c19fOwogICAgICAvKioqKioqL30pKCkpOwoKfSk7";

/***/ }),

/***/ 171:
/***/ ((module) => {

module.exports = "#relayContainer{margin:1rem;font-family:Arial,Helvetica,sans-serif}#notificationsContainer{pointer-events:none;position:fixed;top:5%;left:70%;transform:translateX(-50%);z-index:999}img{display:block;margin:auto}input.stringcontainer{background-color:#fff;border-radius:5px;border:1px solid #121943;height:24px;margin:auto;display:flex;padding-left:5px}input.interrupt{width:100%;border-color:darkred;background-color:#f1948a;color:darkred;margin:10px 0px;cursor:pointer}input.interrupt:hover{background-color:#f5867a}input.interrupt:active{background-color:#f77163}input.save,input.interrupt{margin:auto;display:block;font-size:x-large;padding:5px 25px;border-radius:10px}.notification{border:3px solid #00529b;background-color:#bde5f8;width:fit-content;margin-right:auto;margin-left:auto;border-radius:40px;color:#00529b;padding:7px 60px;animation:2s fadeOut 5s 1 forwards;cursor:default;pointer-events:auto}@keyframes fadeOut{0%{opacity:1}99%{height:100%}100%{opacity:0;height:0}}td{padding:.5rem}.toggle{align-items:center;border-radius:100px;display:flex;font-weight:700;margin-bottom:16px}.toggle:last-of-type{margin:0}.toggle__input{clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.toggle__input:not([disabled]):active+.toggle-track,.toggle__input:not([disabled]):focus+.toggle-track{border:1px solid rgba(0,0,0,0);box-shadow:0px 0px 0px 2px #121943}.toggle__input:disabled+.toggle-track{cursor:not-allowed;opacity:.7}.toggle-track{background:#fff;border:1px solid #5a72b5;border-radius:100px;cursor:pointer;display:flex;height:30px;margin-left:5%;position:relative;width:60px}.toggle-indicator{align-items:center;background:#121943;border-radius:24px;bottom:2px;display:flex;height:24px;justify-content:center;left:2px;outline:solid 2px rgba(0,0,0,0);position:absolute;transition:.4s;width:24px}.checkMark{fill:#fff;height:20px;width:20px;opacity:0;transition:opacity .4s ease-in-out}.dropdowncontainer{padding:8px 16px;border:1px solid rgba(0,0,0,0);border-color:#000}input[value=true]+.toggle-track .toggle-indicator{background:#121943;transform:translateX(30px)}input[value=true]+.toggle-track .toggle-indicator .checkMark{opacity:1;transition:opacity .4s ease-in-out}@media screen and (-ms-high-contrast: active){.toggle-track{border-radius:0;background-color:red}}.topBar{display:flex}.tabEntry{margin-right:10px;border-radius:10px;background-color:#333}.relayTable{padding-bottom:10px}.tabEntry a{display:block;color:#fff;text-align:center;padding:6px;text-decoration:none}.tabEntry a[aria-current=page]{background-color:#00529b;border-radius:10px}.tabEntry a:hover[aria-current=page]{background-color:#002c53;border-radius:10px}.tabEntry a:hover{background-color:#111;border-radius:10px}.setting{position:relative}.setting .settingNameHover{visibility:hidden;background-color:#cacaca;color:#000;text-align:center;border-radius:6px;border-color:#000;position:absolute;z-index:1}.setting:hover .settingNameHover{visibility:visible;padding:5px;margin-left:15px}.hoverBox{position:relative;white-space:nowrap}.settingInput .settingDefaultHover{visibility:hidden;color:#666;position:absolute;z-index:1;left:50%;transform:translateX(-50%)}.settingInput:hover .settingDefaultHover{visibility:visible}.invalid-setting input,.invalid-setting select,.invalid-setting .toggle-track{background:pink !important}.invalid-reason{text-align:center}.invalid-reason small{padding:0px 5px;border-radius:10px;color:red}.settingTag{display:flex;flex-wrap:wrap;overflow:hidden;color:#000;margin:5px}input{outline:none}.settingTagClose{cursor:pointer}.settingTagSingle{display:inline-flex;border:1.5px solid #764abc;padding:2px 0px 0px 5px;border-radius:5px;white-space:nowrap;color:#764abc;margin-right:5px;margin-bottom:5px;cursor:grab;position:relative}.dropdownMenu{position:absolute;transform:translateY(4px);border:1px solid #ccc;border-radius:5px;overflow-y:auto;overflow-x:clip;overflow-wrap:break-word;max-height:250px;background-color:#fff;z-index:99;user-select:none}.dropdownItem{padding:3px;cursor:pointer;padding-left:.2em}.dropdownMenu>div+div{border-top:1px solid #d6d6d6}.dropdownItem:hover{background-color:rgba(159,195,248,.4392156863)}.userPreference td:first-child{width:15%}.userPreference td:nth-child(2){width:20%}.hintTagDrop{width:40px;min-height:100%;height:20px;background-image:linear-gradient(rgb(162, 162, 162), transparent);border-radius:5px;padding:0px 0px 0px 5px;margin-right:5px;margin-bottom:2px}.hintTagDropOriginal{background-image:linear-gradient(rgb(176, 94, 168), transparent)}.tagContainer{display:flex;flex-wrap:wrap;overflow:hidden}.draggedItem{opacity:40%}.hidden{display:none}.rearrangedTag{animation:fadeIn 1s}@keyframes fadeIn{from{opacity:.2}to{opacity:1}}\n";

/***/ }),

/***/ 530:
/***/ ((module) => {

module.exports = require("kolmafia");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "main": () => (/* binding */ main)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _RelayUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(616);
function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];return arr2;}



function main() {for (var _len = arguments.length, pagesToLoad = new Array(_len), _key = 0; _key < _len; _key++) {pagesToLoad[_key] = arguments[_key];}
  if ((0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .handleApiRequest */ .SU)()) {
    return;
  }

  if (pagesToLoad.length == 0) {
    // Find any 'page' or 'pages' parameters
    pagesToLoad = ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)()["page"] || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)()["pages"] || "").
    split(",").
    filter((s) => s.length > 0);
  }

  var pages = [];
  var extraHtml;

  if (pagesToLoad.length > 0) {
    var cssFile;var _iterator = _createForOfIteratorHelper(
      pagesToLoad),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var pageName = _step.value;
        try {var _extraHtml$css;
          var page = null;

          // If the parameter is a string, then try to load from file
          if (typeof pageName == "string") {
            cssFile = (0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .parseCssFromFile */ .$p)(pageName);
            page = (0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .parsePageFromFile */ .jU)(pageName);
          } else {
            page = pageName;
          }

          if (page == null) {
            continue;
          }

          // Assume at this point it must be a RelayPage
          pages.push(page);

          if (cssFile == null) {
            continue;
          }

          if (extraHtml == null) {
            extraHtml = { cssFiles: [] };
          }

          extraHtml.css = ((_extraHtml$css = extraHtml.css) !== null && _extraHtml$css !== void 0 ? _extraHtml$css : "") + cssFile;
        } catch (e) {
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(
          "<h2>An error occured while trying to load " + (
          typeof pageName == "string" ?
          (0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .getPagePath */ .mn)(pageName) + ", is your json properly formatted?" :
          "a relay page") +
          "</h2>");


          if (e) {
            (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)("<br>");
            (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(e);

            if (e.stack) {
              for (var _i = 0, _arr = e.stack.split("\n"); _i < _arr.length; _i++) {var s = _arr[_i];
                while (s.match(/\t|\r/)) {
                  s = s.replace(/\t|\r/, "");
                }

                (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)("<br>");
                (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(s);
              }
            }
          }
          return;
        }
      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }

  if (pages.length == 0) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(
    "<h3>The relay script could not find any pages to load, either invalid/missing pages were provided or nothing was.</h3>");

    return;
  }

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)((0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .generateHTML */ .ar)(pages, extraHtml));
}
})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;