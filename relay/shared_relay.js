/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 616:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$p": () => (/* binding */ parseCssFromFile),
/* harmony export */   "ar": () => (/* binding */ generateHTML),
/* harmony export */   "jU": () => (/* binding */ parsePageFromFile),
/* harmony export */   "k7": () => (/* binding */ handledApiRequest)
/* harmony export */ });
/* unused harmony exports validateComponents, parsePageFromJson */
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArrayLimit(arr, i) {var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];if (_i == null) return;var _arr = [];var _n = true;var _d = false;var _s, _e;try {for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _iterableToArray(iter) {if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e2) {throw _e2;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e3) {didErr = true;err = _e3;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}








function handledApiRequest() {
  var fields = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)();

  if (fields["api"] == null) {
    return false;
  }
  var returns = eval(fields["api"]) || "";
  // We include the ' ' because otherwise the browser doesn't like an empty page
  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(returns + (returns ? "" : " "));

  return true;
}

function validateComponents(components) {var _iterator = _createForOfIteratorHelper(
    components),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var _button$name;var component = _step.value;
      var button = component;

      if (button.preference == null) {
        continue;
      }

      button.name = (_button$name = button.name) !== null && _button$name !== void 0 ? _button$name : button.preference;

      if (button.validate != null) {
        try {
          eval(button.validate);
        } catch (e) {
          (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.print)("Unable to load ".concat(button.name, "'s validator '").concat(button.validate, "'"));
          button.validate = null;
        }
      }

      if (button.value != null) {
        continue;
      }

      var val = void 0;

      if ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.propertyExists)(button.preference)) {
        val = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.getProperty)(button.preference);
      } else if (button.default != null) {
        val = button.default;
      } else {
        if (button.type == "dropdown") {
          val = button.dropdown[0].value;
        } else if (button.type == "boolean") {
          val = "true";
        } else {
          val = "";
        }
      }

      button.value = val;
    }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
}

function generateHTML(
pages,
extraHtml)
{
  pages = pages.filter((p) => p != null);var _iterator2 = _createForOfIteratorHelper(

    pages),_step2;try {for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {var page = _step2.value;
      validateComponents(page.components);
    }} catch (err) {_iterator2.e(err);} finally {_iterator2.f();}

  var buffer = [];

  var cssFiles = [];

  if (extraHtml && extraHtml.cssFiles) {
    cssFiles.push.apply(cssFiles, _toConsumableArray(extraHtml.cssFiles));
  }

  buffer.push("<head>");

  cssFiles.forEach((s) => {
    buffer.push("<link rel=\"stylesheet\" src=\"".concat(s, "\">"));
  });

  buffer.push("<style>");
  buffer.push("".concat(__webpack_require__(171)));

  if (extraHtml && extraHtml.css) {
    buffer.push(extraHtml.css);
  }

  buffer.push("</style>");

  buffer.push("</head>");

  buffer.push('<div id="root"></div>');

  buffer.push("<script>");

  // add script that react calls when loaded to get kol data
  buffer.push("let getData = function(callback) {callback(".concat(
  JSON.stringify(pages), ")}"));


  // close notifications when they are clicked on
  buffer.push("document.onclick = (e) => {\n    if(e.target.classList.contains('notification')) e.target.remove();\n  }");



  buffer.push("</script>");

  // include react script
  buffer.push("<script src=\"".concat(
  __webpack_require__(832), "\"></script>"));


  return buffer.join("\n");
}

/**
 * Parses from relay/shared_relay/pages/ if no slashes are in the name, otherwise expects a valid json file
 */
function parsePageFromFile(file) {
  var fileName = file.includes("/") ?
  file :
  "relay/shared_relay/pages/" + file + ".json";

  if (!fileName.endsWith(".json") && (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fileToBuffer)(fileName).length == 0) {
    fileName += ".json";
  }

  var data = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fileToBuffer)(fileName);

  return parsePageFromJson(file, data);
}

function parseCssFromFile(file) {
  var fileName = file.includes("/") ?
  file :
  "shared_relay/pages/" + file + ".css";

  if (!fileName.endsWith(".css")) {
    fileName += ".css";
  }

  var data = (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.fileToBuffer)(fileName);

  if (data.length == 0) {
    return null;
  }

  return fileName;
}

function parsePageFromJson(id, jsonData) {
  if (jsonData.length == 0) {
    return null;
  }

  var subpage = JSON.parse(jsonData);

  subpage.file = id;

  for (var _i = 0, _arr = subpage.components; _i < _arr.length; _i++) {var _button$dropdown;var button = _arr[_i];
    if (button.type != "dropdown") {
      continue;
    }

    if (button.dropdown == null) {
      button.dropdown = [];
    } else if (typeof button.dropdown[0] == "string") {
      button.dropdown = button.dropdown.map((s) => {
        return {
          display: s,
          value: s
        };
      });
    }

    if (button.dropdownFiller == null) {
      continue;
    }

    var data =
    eval(button.dropdownFiller).
    map((_ref) => {var _ref2 = _slicedToArray(_ref, 2),display = _ref2[0],value = _ref2[1];
      return {
        display: display,
        value: value
      };
    });

    (_button$dropdown = button.dropdown).push.apply(_button$dropdown, _toConsumableArray(data));
  }

  return subpage;
}

/***/ }),

/***/ 832:
/***/ ((module) => {

module.exports = "data:application/javascript;base64,";

/***/ }),

/***/ 171:
/***/ ((module) => {

module.exports = "#relayContainer{margin:1rem;font-family:Arial,Helvetica,sans-serif}#notificationsContainer{pointer-events:none;position:absolute;top:5%;left:70%;transform:translateX(-50%);z-index:999}img{display:block;margin:auto}input.stringcontainer{background-color:#fff;border-radius:5px;border:1px solid #121943;height:24px;margin:auto;display:flex;padding-left:10px}input.interrupt{width:100%;border-color:darkred;background-color:#f1948a;color:darkred;margin:10px 0px;cursor:pointer}input.interrupt:hover{background-color:#f5867a}input.interrupt:active{background-color:#f77163}input.save,input.interrupt{margin:auto;display:block;font-size:x-large;padding:5px 25px;border-radius:10px}.notification{border:3px solid #00529b;background-color:#bde5f8;width:fit-content;margin-right:auto;margin-left:auto;border-radius:40px;color:#00529b;padding:7px 60px;animation:2s fadeOut 5s 1 forwards;cursor:default;pointer-events:auto}@keyframes fadeOut{0%{opacity:1}99%{height:100%}100%{opacity:0;height:0}}td{padding:.5rem}.toggle{align-items:center;border-radius:100px;display:flex;font-weight:700;margin-bottom:16px}.toggle:last-of-type{margin:0}.toggle__input{clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.toggle__input:not([disabled]):active+.toggle-track,.toggle__input:not([disabled]):focus+.toggle-track{border:1px solid rgba(0,0,0,0);box-shadow:0px 0px 0px 2px #121943}.toggle__input:disabled+.toggle-track{cursor:not-allowed;opacity:.7}.toggle-track{background:#fff;border:1px solid #5a72b5;border-radius:100px;cursor:pointer;display:flex;height:30px;margin:auto;position:relative;width:60px}.toggle-indicator{align-items:center;background:#121943;border-radius:24px;bottom:2px;display:flex;height:24px;justify-content:center;left:2px;outline:solid 2px rgba(0,0,0,0);position:absolute;transition:.4s;width:24px}.checkMark{fill:#fff;height:20px;width:20px;opacity:0;transition:opacity .4s ease-in-out}.dropdowncontainer{padding:8px 16px;border:1px solid rgba(0,0,0,0);border-color:#000}input[value=true]+.toggle-track .toggle-indicator{background:#121943;transform:translateX(30px)}input[value=true]+.toggle-track .toggle-indicator .checkMark{opacity:1;transition:opacity .4s ease-in-out}@media screen and (-ms-high-contrast: active){.toggle-track{border-radius:0;background-color:red}}.topBar{display:flex}.tabEntry{margin-right:10px;border-radius:10px;background-color:#333}.tabEntry a{display:block;color:#fff;text-align:center;padding:6px;text-decoration:none}.tabEntry a[aria-current=page]{background-color:#00529b;border-radius:10px}.tabEntry a:hover[aria-current=page]{background-color:#002c53;border-radius:10px}.tabEntry a:hover{background-color:#111;border-radius:10px}.setting{position:relative;display:inline-block}.setting .settingHover{visibility:hidden;background-color:#cacaca;color:#000;text-align:center;border-radius:6px;border-color:#000;position:absolute;z-index:1}.setting:hover .settingHover{visibility:visible;padding:5px;margin-left:15px}.invalid-setting input,.invalid-setting select,.invalid-setting .toggle-track{background:pink !important}.invalid-reason{text-align:center}.invalid-reason small{padding:0px 5px;border-radius:10px;color:red}\n";

/***/ }),

/***/ 530:
/***/ ((module) => {

module.exports = require("kolmafia");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "main": () => (/* binding */ main)
/* harmony export */ });
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(530);
/* harmony import */ var kolmafia__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(kolmafia__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _RelayUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(616);
function _createForOfIteratorHelper(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (!it) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = it.call(o);}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it.return != null) it.return();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}



function main() {for (var _len = arguments.length, pagesToLoad = new Array(_len), _key = 0; _key < _len; _key++) {pagesToLoad[_key] = arguments[_key];}
  if ((0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .handledApiRequest */ .k7)()) {
    return;
  }

  if (pagesToLoad.length == 0) {
    // Find any 'page' or 'pages' parameters
    pagesToLoad = ((0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)()["page"] || (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.formFields)()["pages"] || "").
    split(",").
    filter((s) => s.length > 0);
  }

  var pages = [];
  var extraHtml;

  if (pagesToLoad.length > 0) {
    var cssFile;var _iterator = _createForOfIteratorHelper(
      pagesToLoad),_step;try {for (_iterator.s(); !(_step = _iterator.n()).done;) {var page = _step.value;
        // If the parameter is a string, then try to load from file
        if (typeof page == "string") {
          cssFile = (0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .parseCssFromFile */ .$p)(page);
          page = (0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .parsePageFromFile */ .jU)(page);
        }

        if (page == null) {
          continue;
        }

        // Assume at this point it must be a RelayPage
        pages.push(page);

        if (cssFile == null) {
          continue;
        }

        if (extraHtml == null) {
          extraHtml = { cssFiles: [] };
        }

        extraHtml.cssFiles.push(cssFile);
      }} catch (err) {_iterator.e(err);} finally {_iterator.f();}
  }

  if (pages.length == 0) {
    (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)(
    "<h3>The relay script could not find any pages to load, either invalid/missing pages were provided or nothing was.</h3>");

    return;
  }

  (0,kolmafia__WEBPACK_IMPORTED_MODULE_0__.write)((0,_RelayUtils__WEBPACK_IMPORTED_MODULE_1__/* .generateHTML */ .ar)(pages, extraHtml));
}
})();

var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;